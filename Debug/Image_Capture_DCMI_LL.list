
Image_Capture_DCMI_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006434  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025930  2000000c  08006710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002593c  08006710  0002593c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a07  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025c1  00000000  00000000  00031a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00034008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c78f  00000000  00000000  00035e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf8a  00000000  00000000  0006261f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010932a  00000000  00000000  0006f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001788d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e4  00000000  00000000  00178950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080065d8 	.word	0x080065d8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080065d8 	.word	0x080065d8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	075b      	lsls	r3, r3, #29
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	609a      	str	r2, [r3, #8]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	065b      	lsls	r3, r3, #25
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	609a      	str	r2, [r3, #8]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4013      	ands	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LL_DMA_SetDataTransferDirection+0x4c>)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000724:	f023 0310 	bic.w	r3, r3, #16
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <LL_DMA_SetDataTransferDirection+0x4c>)
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	440a      	add	r2, r1
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	440a      	add	r2, r1
 8000736:	4611      	mov	r1, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800073e:	bf00      	nop
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	08006630 	.word	0x08006630

08000750 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LL_DMA_SetMode+0x48>)
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 0220 	bic.w	r2, r3, #32
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <LL_DMA_SetMode+0x48>)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	440b      	add	r3, r1
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	600b      	str	r3, [r1, #0]
             Mode);
}
 800078a:	bf00      	nop
 800078c:	371c      	adds	r7, #28
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	08006630 	.word	0x08006630

0800079c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007c0:	4908      	ldr	r1, [pc, #32]	; (80007e4 <LL_DMA_SetPeriphIncMode+0x48>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	440b      	add	r3, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	440b      	add	r3, r1
 80007ce:	4619      	mov	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80007d6:	bf00      	nop
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	08006630 	.word	0x08006630

080007e8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LL_DMA_SetMemoryIncMode+0x48>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <LL_DMA_SetMemoryIncMode+0x48>)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	440b      	add	r3, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	440b      	add	r3, r1
 800081a:	4619      	mov	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	08006630 	.word	0x08006630

08000834 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LL_DMA_SetPeriphSize+0x48>)
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000858:	4908      	ldr	r1, [pc, #32]	; (800087c <LL_DMA_SetPeriphSize+0x48>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	440b      	add	r3, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	440b      	add	r3, r1
 8000866:	4619      	mov	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800086e:	bf00      	nop
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	08006630 	.word	0x08006630

08000880 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <LL_DMA_SetMemorySize+0x48>)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80008a4:	4908      	ldr	r1, [pc, #32]	; (80008c8 <LL_DMA_SetMemorySize+0x48>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	440b      	add	r3, r1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	440b      	add	r3, r1
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008ba:	bf00      	nop
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	08006630 	.word	0x08006630

080008cc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80008f0:	4908      	ldr	r1, [pc, #32]	; (8000914 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	440b      	add	r3, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	440b      	add	r3, r1
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000906:	bf00      	nop
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	08006630 	.word	0x08006630

08000918 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_AES_OUT
  *         @arg @ref LL_DMAMUX_REQ_HASH_IN
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	0a9b      	lsrs	r3, r3, #10
 8000928:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800092c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000930:	461a      	mov	r2, r3
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000944:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800095a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bf00      	nop
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fe97 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f828 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 fa22 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000980:	f000 f9d6 	bl	8000d30 <MX_DMA_Init>
  MX_DCMI_Init();
 8000984:	f000 f8a2 	bl	8000acc <MX_DCMI_Init>
  MX_I2C2_Init();
 8000988:	f000 f8d4 	bl	8000b34 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800098c:	f000 f912 	bl	8000bb4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //i2c_check(); //Implement as part of ov7670 init function?
  ov7670_init();
 8000990:	f000 fb54 	bl	800103c <ov7670_init>
//	  HAL_Delay(100);
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//	}
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);

  ov7670_read(0x0b); // read only register - version number
 8000994:	200b      	movs	r0, #11
 8000996:	f000 faf1 	bl	8000f7c <ov7670_read>
  ov7670_reg_check(); // Prints 0xAA if all registers are sucessfully written
 800099a:	f000 fb7f 	bl	800109c <ov7670_reg_check>
	  //ov7670_read_all_reg();
	  //ov7670_reg_check();
	//HAL_DCMI_Stop(&hdcmi);


	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800099e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <main+0x50>)
 80009a4:	f002 f868 	bl	8002a78 <HAL_GPIO_TogglePin>

	HAL_Delay(3000);
 80009a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ac:	f000 fef0 	bl	8001790 <HAL_Delay>
//
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <main+0x54>)
 80009b2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009b6:	2102      	movs	r1, #2
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <main+0x58>)
 80009ba:	f001 f8a3 	bl	8001b04 <HAL_DCMI_Start_DMA>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009be:	e7ee      	b.n	800099e <main+0x2e>
 80009c0:	48000400 	.word	0x48000400
 80009c4:	20000028 	.word	0x20000028
 80009c8:	200258d4 	.word	0x200258d4

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0bc      	sub	sp, #240	; 0xf0
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fdf4 	bl	80065c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2294      	movs	r2, #148	; 0x94
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fde6 	bl	80065c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 fc43 	bl	8004288 <HAL_PWREx_ControlVoltageScaling>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000a08:	f000 fab4 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2322      	movs	r3, #34	; 0x22
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a38:	231e      	movs	r3, #30
 8000a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fccb 	bl	80043f0 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a60:	f000 fa88 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a86:	2105      	movs	r1, #5
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 f8d7 	bl	8004c3c <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a94:	f000 fa6e 	bl	8000f74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C2;
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fb74 	bl	8005194 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ab2:	f000 fa5f 	bl	8000f74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_2);
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f004 f9e8 	bl	8004e94 <HAL_RCC_MCOConfig>
}
 8000ac4:	bf00      	nop
 8000ac6:	37f0      	adds	r7, #240	; 0xf0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_DCMI_Init+0x64>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b1a:	f000 ff6d 	bl	80019f8 <HAL_DCMI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 fa26 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200258d4 	.word	0x200258d4
 8000b30:	50050000 	.word	0x50050000

08000b34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <MX_I2C2_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <MX_I2C2_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b70:	f001 ff9c 	bl	8002aac <HAL_I2C_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 f9fb 	bl	8000f74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b82:	f003 fac9 	bl	8004118 <HAL_I2CEx_ConfigAnalogFilter>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f9f2 	bl	8000f74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b94:	f003 fb0b 	bl	80041ae <HAL_I2CEx_ConfigDigitalFilter>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f9e9 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20025828 	.word	0x20025828
 8000bac:	40005800 	.word	0x40005800
 8000bb0:	307075b1 	.word	0x307075b1

08000bb4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fd76 	bl	80006d0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000be4:	2040      	movs	r0, #64	; 0x40
 8000be6:	f7ff fd5b 	bl	80006a0 <LL_AHB2_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
 8000bea:	f003 fbf1 	bl	80043d0 <HAL_PWREx_EnableVddIO2>
  /**LPUART1 GPIO Configuration
  PG7   ------> LPUART1_TX
  PG8   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8000bee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c04:	2308      	movs	r3, #8
 8000c06:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4845      	ldr	r0, [pc, #276]	; (8000d24 <MX_LPUART1_UART_Init+0x170>)
 8000c0e:	f005 f914 	bl	8005e3a <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_LPUART1_TX);
 8000c12:	2223      	movs	r2, #35	; 0x23
 8000c14:	2100      	movs	r1, #0
 8000c16:	4844      	ldr	r0, [pc, #272]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c18:	f7ff fe7e 	bl	8000918 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4841      	ldr	r0, [pc, #260]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c22:	f7ff fd6d 	bl	8000700 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	483e      	ldr	r0, [pc, #248]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c2e:	f7ff fe4d 	bl	80008cc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	483c      	ldr	r0, [pc, #240]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c38:	f7ff fd8a 	bl	8000750 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4839      	ldr	r0, [pc, #228]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c42:	f7ff fdab 	bl	800079c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4837      	ldr	r0, [pc, #220]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c4c:	f7ff fdcc 	bl	80007e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	4834      	ldr	r0, [pc, #208]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c56:	f7ff fded 	bl	8000834 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c60:	f7ff fe0e 	bl	8000880 <LL_DMA_SetMemorySize>

  /* LPUART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_RX);
 8000c64:	2222      	movs	r2, #34	; 0x22
 8000c66:	2102      	movs	r1, #2
 8000c68:	482f      	ldr	r0, [pc, #188]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c6a:	f7ff fe55 	bl	8000918 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2102      	movs	r1, #2
 8000c72:	482d      	ldr	r0, [pc, #180]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c74:	f7ff fd44 	bl	8000700 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8000c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	482a      	ldr	r0, [pc, #168]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c80:	f7ff fe24 	bl	80008cc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2102      	movs	r1, #2
 8000c88:	4827      	ldr	r0, [pc, #156]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c8a:	f7ff fd61 	bl	8000750 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2102      	movs	r1, #2
 8000c92:	4825      	ldr	r0, [pc, #148]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c94:	f7ff fd82 	bl	800079c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000c9e:	f7ff fda3 	bl	80007e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4820      	ldr	r0, [pc, #128]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000ca8:	f7ff fdc4 	bl	8000834 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2102      	movs	r1, #2
 8000cb0:	481d      	ldr	r0, [pc, #116]	; (8000d28 <MX_LPUART1_UART_Init+0x174>)
 8000cb2:	f7ff fde5 	bl	8000880 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cb6:	f7ff fc21 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc71 	bl	80005a8 <NVIC_EncodePriority>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2046      	movs	r0, #70	; 0x46
 8000ccc:	f7ff fc42 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8000cd0:	2046      	movs	r0, #70	; 0x46
 8000cd2:	f7ff fc21 	bl	8000518 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 8000cda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cde:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000cec:	230c      	movs	r3, #12
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_LPUART1_UART_Init+0x178>)
 8000cfc:	f005 f9a4 	bl	8006048 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000d00:	2100      	movs	r1, #0
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <MX_LPUART1_UART_Init+0x178>)
 8000d04:	f7ff fca3 	bl	800064e <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_LPUART1_UART_Init+0x178>)
 8000d0c:	f7ff fcb3 	bl	8000676 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_LPUART1_UART_Init+0x178>)
 8000d12:	f7ff fc8c 	bl	800062e <LL_LPUART_DisableFIFO>
  LL_LPUART_Enable(LPUART1);
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_LPUART1_UART_Init+0x178>)
 8000d18:	f7ff fc79 	bl	800060e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3738      	adds	r7, #56	; 0x38
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	48001800 	.word	0x48001800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40008000 	.word	0x40008000

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6493      	str	r3, [r2, #72]	; 0x48
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_DMA_Init+0x90>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d66:	f7ff fbc9 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc19 	bl	80005a8 <NVIC_EncodePriority>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f7ff fbea 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d80:	200b      	movs	r0, #11
 8000d82:	f7ff fbc9 	bl	8000518 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200c      	movs	r0, #12
 8000d8c:	f000 fdfd 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d90:	200c      	movs	r0, #12
 8000d92:	f000 fe16 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d96:	f7ff fbb1 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fc01 	bl	80005a8 <NVIC_EncodePriority>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	200d      	movs	r0, #13
 8000dac:	f7ff fbd2 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000db0:	200d      	movs	r0, #13
 8000db2:	f7ff fbb1 	bl	8000518 <__NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b5a      	ldr	r3, [pc, #360]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a59      	ldr	r2, [pc, #356]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b48      	ldr	r3, [pc, #288]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a47      	ldr	r2, [pc, #284]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a41      	ldr	r2, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e52:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a3b      	ldr	r2, [pc, #236]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e6a:	f003 fab1 	bl	80043d0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <MX_GPIO_Init+0x180>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8c:	482e      	ldr	r0, [pc, #184]	; (8000f48 <MX_GPIO_Init+0x184>)
 8000e8e:	f001 fddb 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	482d      	ldr	r0, [pc, #180]	; (8000f4c <MX_GPIO_Init+0x188>)
 8000e98:	f001 fdd6 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	482b      	ldr	r0, [pc, #172]	; (8000f50 <MX_GPIO_Init+0x18c>)
 8000ea2:	f001 fdd1 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <MX_GPIO_Init+0x188>)
 8000ebc:	f001 fc32 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <MX_GPIO_Init+0x184>)
 8000eda:	f001 fc23 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4815      	ldr	r0, [pc, #84]	; (8000f4c <MX_GPIO_Init+0x188>)
 8000ef6:	f001 fc15 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f001 fc03 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_GPIO_Init+0x18c>)
 8000f36:	f001 fbf5 	bl	8002724 <HAL_GPIO_Init>

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48001000 	.word	0x48001000

08000f54 <HAL_DCMI_FrameEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_FrameEventCallback() callback can be implemented in the user file.
   */
  Serial_com(&frame_buffer[0], RGB565_QVGA_SIZE_8BIT);
 8000f5c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000f62:	f000 fb53 	bl	800160c <Serial_com>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000028 	.word	0x20000028

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <Error_Handler+0x6>

08000f7c <ov7670_read>:
extern I2C_HandleTypeDef hi2c2;



void ov7670_read(uint8_t reg_addr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2142      	movs	r1, #66	; 0x42
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <ov7670_read+0x44>)
 8000f96:	f001 fe19 	bl	8002bcc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2142      	movs	r1, #66	; 0x42
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <ov7670_read+0x44>)
 8000fa8:	f001 ff04 	bl	8002db4 <HAL_I2C_Master_Receive>
	Serial_com(&buffer[0], 1);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb2a 	bl	800160c <Serial_com>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20025828 	.word	0x20025828

08000fc4 <ov7670_write>:

void ov7670_write(uint8_t reg_addr, uint8_t data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, OV7670_WRITE_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT , &data, 1, 100); // I2C_MEMADD_SIZE_8BIT is defined in the HAL library
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2142      	movs	r1, #66	; 0x42
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <ov7670_write+0x34>)
 8000fea:	f001 ffd9 	bl	8002fa0 <HAL_I2C_Mem_Write>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20025828 	.word	0x20025828

08000ffc <ov7670_read_return>:

uint8_t ov7670_read_return(uint8_t reg_addr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 800100a:	1dfa      	adds	r2, r7, #7
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2142      	movs	r1, #66	; 0x42
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <ov7670_read_return+0x3c>)
 8001016:	f001 fdd9 	bl	8002bcc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	2142      	movs	r1, #66	; 0x42
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <ov7670_read_return+0x3c>)
 8001028:	f001 fec4 	bl	8002db4 <HAL_I2C_Master_Receive>
	return buffer[0];
 800102c:	7b3b      	ldrb	r3, [r7, #12]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20025828 	.word	0x20025828

0800103c <ov7670_init>:
//  return ov7670_config(ov7670Mode);
//}


void ov7670_init()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
//	uint8_t buffer[0];
//	buffer[0] = 0x01;
//  //ov7670_hard_reset();
  ov7670_write(0x12, 0x80);  // soft reset
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	2012      	movs	r0, #18
 8001046:	f7ff ffbd 	bl	8000fc4 <ov7670_write>
  HAL_Delay(500);			 // Needs a delay after reset otherwise all registers are 0x00
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f000 fb9f 	bl	8001790 <HAL_Delay>

  // Configure camera
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e011      	b.n	800107c <ov7670_init+0x40>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <ov7670_init+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <ov7670_init+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff ffaa 	bl	8000fc4 <ov7670_write>
    HAL_Delay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fb8d 	bl	8001790 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3301      	adds	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <ov7670_init+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d1e7      	bne.n	8001058 <ov7670_init+0x1c>
  }
  HAL_Delay(500);
 8001088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108c:	f000 fb80 	bl	8001790 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08006638 	.word	0x08006638

0800109c <ov7670_reg_check>:
	HAL_Delay(1000);
  }
}

void ov7670_reg_check()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 uint8_t buffer[1] = {00};
 80010a2:	2300      	movs	r3, #0
 80010a4:	713b      	strb	r3, [r7, #4]
 uint8_t counter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 uint8_t tot_reg_num = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	e01b      	b.n	80010ec <ov7670_reg_check+0x50>
	 tot_reg_num++;
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73bb      	strb	r3, [r7, #14]
	if (ov7670_read_return(OV7670_reg[i][0]) == OV7670_reg[i][1])
 80010ba:	4a20      	ldr	r2, [pc, #128]	; (800113c <ov7670_reg_check+0xa0>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff9a 	bl	8000ffc <ov7670_read_return>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <ov7670_reg_check+0xa0>)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d102      	bne.n	80010e0 <ov7670_reg_check+0x44>
	{
		counter++;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	3301      	adds	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
	}
	HAL_Delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 fb55 	bl	8001790 <HAL_Delay>
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <ov7670_reg_check+0xa0>)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010f4:	2bff      	cmp	r3, #255	; 0xff
 80010f6:	d1dd      	bne.n	80010b4 <ov7670_reg_check+0x18>
  }
 if (counter == tot_reg_num)
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d10c      	bne.n	800111a <ov7670_reg_check+0x7e>
 {
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <ov7670_reg_check+0xa4>)
 8001106:	f001 fc9f 	bl	8002a48 <HAL_GPIO_WritePin>
	 buffer[0] = 0xAA;
 800110a:	23aa      	movs	r3, #170	; 0xaa
 800110c:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fa7a 	bl	800160c <Serial_com>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
	 buffer[0] = 0xFA;
	 Serial_com(&buffer[0], 1);
	 //HAL_UART_Transmit(&hlpuart1, buffer, 1, 10);
 }
}
 8001118:	e00b      	b.n	8001132 <ov7670_reg_check+0x96>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <ov7670_reg_check+0xa4>)
 8001120:	f001 fc92 	bl	8002a48 <HAL_GPIO_WritePin>
	 buffer[0] = 0xFA;
 8001124:	23fa      	movs	r3, #250	; 0xfa
 8001126:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fa6d 	bl	800160c <Serial_com>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	08006638 	.word	0x08006638
 8001140:	48000800 	.word	0x48000800

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	; 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a84      	ldr	r2, [pc, #528]	; (80013bc <HAL_DCMI_MspInit+0x230>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f040 8101 	bne.w	80013b2 <HAL_DCMI_MspInit+0x226>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a82      	ldr	r2, [pc, #520]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b80      	ldr	r3, [pc, #512]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c8:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a7c      	ldr	r2, [pc, #496]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ec:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	4a70      	ldr	r2, [pc, #448]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001210:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	4a6a      	ldr	r2, [pc, #424]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121c:	4b68      	ldr	r3, [pc, #416]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	4a64      	ldr	r2, [pc, #400]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_DCMI_MspInit+0x234>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PA10     ------> DCMI_D1
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001240:	2370      	movs	r3, #112	; 0x70
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001248:	2302      	movs	r3, #2
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001250:	230a      	movs	r3, #10
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	485a      	ldr	r0, [pc, #360]	; (80013c4 <HAL_DCMI_MspInit+0x238>)
 800125c:	f001 fa62 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001260:	2310      	movs	r3, #16
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001268:	2302      	movs	r3, #2
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001270:	230a      	movs	r3, #10
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f001 fa51 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128a:	2302      	movs	r3, #2
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001292:	2304      	movs	r3, #4
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fa40 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80012a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012b6:	230a      	movs	r3, #10
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4841      	ldr	r0, [pc, #260]	; (80013c8 <HAL_DCMI_MspInit+0x23c>)
 80012c2:	f001 fa2f 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80012d8:	2304      	movs	r3, #4
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4839      	ldr	r0, [pc, #228]	; (80013c8 <HAL_DCMI_MspInit+0x23c>)
 80012e4:	f001 fa1e 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_DCMI;
 80012fa:	2305      	movs	r3, #5
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f001 fa0c 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800130c:	2308      	movs	r3, #8
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001314:	2302      	movs	r3, #2
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 800131c:	2304      	movs	r3, #4
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <HAL_DCMI_MspInit+0x240>)
 8001328:	f001 f9fc 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001334:	2302      	movs	r3, #2
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800133c:	230a      	movs	r3, #10
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4822      	ldr	r0, [pc, #136]	; (80013d0 <HAL_DCMI_MspInit+0x244>)
 8001348:	f001 f9ec 	bl	8002724 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Channel2;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_DCMI_MspInit+0x24c>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001354:	225a      	movs	r2, #90	; 0x5a
 8001356:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 8001388:	f000 feec 	bl	8002164 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_DCMI_MspInit+0x20a>
    {
      Error_Handler();
 8001392:	f7ff fdef 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800139a:	651a      	str	r2, [r3, #80]	; 0x50
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_DCMI_MspInit+0x248>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2055      	movs	r0, #85	; 0x55
 80013a8:	f000 faef 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80013ac:	2055      	movs	r0, #85	; 0x55
 80013ae:	f000 fb08 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	50050000 	.word	0x50050000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48001000 	.word	0x48001000
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	48000400 	.word	0x48000400
 80013d4:	20025874 	.word	0x20025874
 80013d8:	4002001c 	.word	0x4002001c

080013dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0x9c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d137      	bne.n	800146e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_I2C_MspInit+0xa0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	2312      	movs	r3, #18
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001426:	2304      	movs	r3, #4
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <HAL_I2C_MspInit+0xa4>)
 8001432:	f001 f977 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_I2C_MspInit+0xa0>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2021      	movs	r0, #33	; 0x21
 8001454:	f000 fa99 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001458:	2021      	movs	r0, #33	; 0x21
 800145a:	f000 fab2 	bl	80019c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2022      	movs	r0, #34	; 0x22
 8001464:	f000 fa91 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001468:	2022      	movs	r0, #34	; 0x22
 800146a:	f000 faaa 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005800 	.word	0x40005800
 800147c:	40021000 	.word	0x40021000
 8001480:	48001400 	.word	0x48001400

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f93e 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Channel2_IRQHandler+0x10>)
 80014ee:	f000 ffbb 	bl	8002468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20025874 	.word	0x20025874

080014fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <I2C2_EV_IRQHandler+0x10>)
 8001512:	f001 fe59 	bl	80031c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20025828 	.word	0x20025828

08001520 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <I2C2_ER_IRQHandler+0x10>)
 8001526:	f001 fe69 	bl	80031fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20025828 	.word	0x20025828

08001534 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <DCMI_IRQHandler+0x10>)
 800154a:	f000 fbb1 	bl	8001cb0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200258d4 	.word	0x200258d4

08001558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <SystemInit+0x64>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <SystemInit+0x64>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <SystemInit+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <SystemInit+0x68>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <SystemInit+0x68>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <SystemInit+0x68>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <SystemInit+0x68>)
 8001584:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001588:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800158c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <SystemInit+0x68>)
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <SystemInit+0x68>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <SystemInit+0x68>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <SystemInit+0x68>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SystemInit+0x64>)
 80015aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ae:	609a      	str	r2, [r3, #8]
#endif
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	40021000 	.word	0x40021000

080015c4 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d101      	bne.n	80015dc <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <Serial_com>:
 */


#include "uart.h"

void Serial_com(uint8_t *s, uint32_t size) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 800161a:	e011      	b.n	8001640 <Serial_com+0x34>
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1))
 800161c:	bf00      	nop
 800161e:	480c      	ldr	r0, [pc, #48]	; (8001650 <Serial_com+0x44>)
 8001620:	f7ff ffd0 	bl	80015c4 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f9      	beq.n	800161e <Serial_com+0x12>
			; // Wait for Empty
		LL_LPUART_TransmitData8(LPUART1, *s++);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <Serial_com+0x44>)
 8001636:	f7ff ffd8 	bl	80015ea <LL_LPUART_TransmitData8>
		counter++;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3e9      	bcc.n	800161c <Serial_com+0x10>
	}
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40008000 	.word	0x40008000

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff ff7e 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800165c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001662:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001664:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <LoopForever+0xa>)
	ldr	r3, =_edata
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <LoopForever+0xe>)
	adds	r2, r0, r1
 800166c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800166e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
	ldr	r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001676:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <LoopForever+0x16>)
	cmp	r2, r3
 800167e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f004 ff7d 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7ff f973 	bl	8000970 <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001690:	08006704 	.word	0x08006704
	ldr	r0, =_sdata
 8001694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001698:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800169c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80016a0:	2002593c 	.word	0x2002593c

080016a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_IRQHandler>

080016a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f95f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f80e 	bl	80016d8 <HAL_InitTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e001      	b.n	80016cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c8:	f7ff fd3c 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_InitTick+0x6c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_InitTick+0x70>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_InitTick+0x6c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f96b 	bl	80019de <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d809      	bhi.n	8001728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f935 	bl	800198a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_InitTick+0x74>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e007      	b.n	8001738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e004      	b.n	8001738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e001      	b.n	8001738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	20025938 	.word	0x20025938

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20025938 	.word	0x20025938

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_Delay+0x40>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e075      	b.n	8001af6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fbb4 	bl	800118c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a3a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_DCMI_Init+0x108>)
 8001a56:	400b      	ands	r3, r1
 8001a58:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a86:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a92:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a9e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d112      	bne.n	8001ad6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7f1b      	ldrb	r3, [r3, #28]
 8001ab4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7f5b      	ldrb	r3, [r3, #29]
 8001aba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001abc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7f9b      	ldrb	r3, [r3, #30]
 8001ac2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001ac4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7fdb      	ldrb	r3, [r3, #31]
 8001acc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001ad2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001ad4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 021f 	orr.w	r2, r2, #31
 8001ae4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	ffe0f007 	.word	0xffe0f007

08001b04 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_DCMI_Start_DMA+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e0bc      	b.n	8001c9a <HAL_DCMI_Start_DMA+0x196>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3a:	f023 0302 	bic.w	r3, r3, #2
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b50:	4a54      	ldr	r2, [pc, #336]	; (8001ca4 <HAL_DCMI_Start_DMA+0x1a0>)
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <HAL_DCMI_Start_DMA+0x1a4>)
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b60:	2200      	movs	r2, #0
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d21f      	bcs.n	8001bac <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3328      	adds	r3, #40	; 0x28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	f000 fb97 	bl	80022b4 <HAL_DMA_Start_IT>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d079      	beq.n	8001c80 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e076      	b.n	8001c9a <HAL_DCMI_Start_DMA+0x196>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb8:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_DCMI_Start_DMA+0x1a8>)
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f000 fa07 	bl	8001fdc <DCMI_TransferSize>
 8001bce:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e057      	b.n	8001c9a <HAL_DCMI_Start_DMA+0x196>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	085a      	lsrs	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c34:	3b01      	subs	r3, #1
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3328      	adds	r3, #40	; 0x28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f000 fb2d 	bl	80022b4 <HAL_DMA_Start_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e00c      	b.n	8001c9a <HAL_DCMI_Start_DMA+0x196>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08001de5 	.word	0x08001de5
 8001ca8:	08001fad 	.word	0x08001fad
 8001cac:	08001f15 	.word	0x08001f15

08001cb0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d10:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <HAL_DCMI_IRQHandler+0xf4>)
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fb46 	bl	80023aa <HAL_DMA_Abort_IT>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f93f 	bl	8001fac <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f83b 	bl	8001dbc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2208      	movs	r2, #8
 8001d56:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f839 	bl	8001dd0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d019      	beq.n	8001d9c <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d10b      	bne.n	8001d8e <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 021e 	bic.w	r2, r2, #30
 8001d84:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f8dc 	bl	8000f54 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08001fad 	.word	0x08001fad

08001da8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_LineEventCallback() callback can be implemented in the user file.
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_VsyncEventCallback() callback can be implemented in the user file.
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d05c      	beq.n	8001eb4 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10c      	bne.n	8001e20 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001e1e:	e075      	b.n	8001f0c <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f000 fa15 	bl	80022b4 <HAL_DMA_Start_IT>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03d      	beq.n	8001f0c <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8001eac:	69f8      	ldr	r0, [r7, #28]
 8001eae:	f7ff ff7b 	bl	8001da8 <HAL_DCMI_ErrorCallback>
}
 8001eb2:	e02b      	b.n	8001f0c <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d124      	bne.n	8001f0c <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01d      	beq.n	8001f0c <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d10f      	bne.n	8001f06 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 021e 	bic.w	r2, r2, #30
 8001ef4:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8001f06:	69f8      	ldr	r0, [r7, #28]
 8001f08:	f7ff f824 	bl	8000f54 <HAL_DCMI_FrameEventCallback>
}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d03c      	beq.n	8001fa4 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d036      	beq.n	8001fa4 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	441a      	add	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f000 f99c 	bl	80022b4 <HAL_DMA_Start_IT>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff02 	bl	8001da8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff feea 	bl	8001da8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8001fdc:	b5b0      	push	{r4, r5, r7, lr}
 8001fde:	b0a6      	sub	sp, #152	; 0x98
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t temp = InputSize;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t aPrime[NPRIME] = {0};
 8001ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 fae5 	bl	80065c8 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t PrimeArray[NPRIME] = { 1UL,  2UL,  3UL,  5UL,
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <DCMI_TransferSize+0x184>)
 8002006:	f107 040c 	add.w	r4, r7, #12
 800200a:	461d      	mov	r5, r3
 800200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002018:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800201c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 8002020:	e041      	b.n	80020a6 <DCMI_TransferSize+0xca>
  {
    if (temp < PrimeArray[j])
 8002022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800202c:	4413      	add	r3, r2
 800202e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8002032:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002036:	429a      	cmp	r2, r3
 8002038:	d33a      	bcc.n	80020b0 <DCMI_TransferSize+0xd4>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 800203a:	e01e      	b.n	800207a <DCMI_TransferSize+0x9e>
    {
      aPrime[j]++;
 800203c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002046:	4413      	add	r3, r2
 8002048:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002058:	440b      	add	r3, r1
 800205a:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 800205e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002068:	4413      	add	r3, r2
 800206a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800206e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while ((temp % PrimeArray[j]) == 0U)
 800207a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002084:	4413      	add	r3, r2
 8002086:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 800208a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800208e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002092:	fb02 f201 	mul.w	r2, r2, r1
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0cf      	beq.n	800203c <DCMI_TransferSize+0x60>
    }
    j++;
 800209c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a0:	3301      	adds	r3, #1
 80020a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while (j < NPRIME)
 80020a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	d9b9      	bls.n	8002022 <DCMI_TransferSize+0x46>
 80020ae:	e000      	b.n	80020b2 <DCMI_TransferSize+0xd6>
      break;
 80020b0:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count dividor 2 twice */
 80020b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b4:	3b01      	subs	r3, #1
 80020b6:	653b      	str	r3, [r7, #80]	; 0x50

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 80020b8:	230f      	movs	r3, #15
 80020ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80020be:	e03f      	b.n	8002140 <DCMI_TransferSize+0x164>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 80020c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020ca:	4413      	add	r3, r2
 80020cc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80020d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020dc:	4293      	cmp	r3, r2
 80020de:	d829      	bhi.n	8002134 <DCMI_TransferSize+0x158>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80020e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020ea:	4413      	add	r3, r2
 80020ec:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 80020f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        aPrime[j]--;
 80020fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002106:	4413      	add	r3, r2
 8002108:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800210c:	1e5a      	subs	r2, r3, #1
 800210e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002118:	440b      	add	r3, r1
 800211a:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 800211e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002128:	4413      	add	r3, r2
 800212a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1c6      	bne.n	80020c0 <DCMI_TransferSize+0xe4>
 8002132:	e000      	b.n	8002136 <DCMI_TransferSize+0x15a>
        break;
 8002134:	bf00      	nop
      }
    }
    j--;
 8002136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800213a:	3b01      	subs	r3, #1
 800213c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8002140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <DCMI_TransferSize+0x178>
 8002148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800214c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002150:	4293      	cmp	r3, r2
 8002152:	d9e4      	bls.n	800211e <DCMI_TransferSize+0x142>
  }



  return output;
 8002154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8002158:	4618      	mov	r0, r3
 800215a:	3798      	adds	r7, #152	; 0x98
 800215c:	46bd      	mov	sp, r7
 800215e:	bdb0      	pop	{r4, r5, r7, pc}
 8002160:	080065f0 	.word	0x080065f0

08002164 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e08d      	b.n	8002292 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_DMA_Init+0x138>)
 800217e:	429a      	cmp	r2, r3
 8002180:	d80f      	bhi.n	80021a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <HAL_DMA_Init+0x13c>)
 800218a:	4413      	add	r3, r2
 800218c:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_DMA_Init+0x140>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	009a      	lsls	r2, r3, #2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a42      	ldr	r2, [pc, #264]	; (80022a8 <HAL_DMA_Init+0x144>)
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
 80021a0:	e00e      	b.n	80021c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_DMA_Init+0x148>)
 80021aa:	4413      	add	r3, r2
 80021ac:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <HAL_DMA_Init+0x140>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	009a      	lsls	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a3c      	ldr	r2, [pc, #240]	; (80022b0 <HAL_DMA_Init+0x14c>)
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa24 	bl	8002660 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002220:	d102      	bne.n	8002228 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800223c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_DMA_Init+0x104>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d80c      	bhi.n	8002268 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa44 	bl	80026dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	e008      	b.n	800227a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40020407 	.word	0x40020407
 80022a0:	bffdfff8 	.word	0xbffdfff8
 80022a4:	cccccccd 	.word	0xcccccccd
 80022a8:	40020000 	.word	0x40020000
 80022ac:	bffdfbf8 	.word	0xbffdfbf8
 80022b0:	40020400 	.word	0x40020400

080022b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Start_IT+0x20>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e066      	b.n	80023a2 <HAL_DMA_Start_IT+0xee>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d155      	bne.n	8002394 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f968 	bl	80025e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 020e 	orr.w	r2, r2, #14
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e00f      	b.n	800234c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 020a 	orr.w	r2, r2, #10
 800234a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002368:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e005      	b.n	80023a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800239c:	2302      	movs	r3, #2
 800239e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d005      	beq.n	80023ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e047      	b.n	800245e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 020e 	bic.w	r2, r2, #14
 80023dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 021c 	and.w	r2, r3, #28
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800241a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002432:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800243c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
    }
  }
  return status;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f003 031c 	and.w	r3, r3, #28
 8002488:	2204      	movs	r2, #4
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d026      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x7a>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d021      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f003 021c 	and.w	r2, r3, #28
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2104      	movs	r1, #4
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d071      	beq.n	80025bc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	e06c      	b.n	80025bc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 031c 	and.w	r3, r3, #28
 80024ea:	2202      	movs	r2, #2
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02e      	beq.n	8002554 <HAL_DMA_IRQHandler+0xec>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d029      	beq.n	8002554 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 020a 	bic.w	r2, r2, #10
 800251c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 021c 	and.w	r2, r3, #28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2102      	movs	r1, #2
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d038      	beq.n	80025bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002552:	e033      	b.n	80025bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f003 031c 	and.w	r3, r3, #28
 800255c:	2208      	movs	r2, #8
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02a      	beq.n	80025be <HAL_DMA_IRQHandler+0x156>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d025      	beq.n	80025be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020e 	bic.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 021c 	and.w	r2, r3, #28
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
}
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d4:	b2db      	uxtb	r3, r3
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025f8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800260a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f003 021c 	and.w	r2, r3, #28
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b10      	cmp	r3, #16
 800262e:	d108      	bne.n	8002642 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002640:	e007      	b.n	8002652 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d80a      	bhi.n	800268a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002680:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6493      	str	r3, [r2, #72]	; 0x48
 8002688:	e007      	b.n	800269a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002694:	4413      	add	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3b08      	subs	r3, #8
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80026b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40020407 	.word	0x40020407
 80026d0:	4002081c 	.word	0x4002081c
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	40020880 	.word	0x40020880

080026dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a08      	ldr	r2, [pc, #32]	; (8002720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b01      	subs	r3, #1
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	1000823f 	.word	0x1000823f
 8002720:	40020940 	.word	0x40020940

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002732:	e166      	b.n	8002a02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8158 	beq.w	80029fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d00b      	beq.n	800276c <HAL_GPIO_Init+0x48>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d007      	beq.n	800276c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002760:	2b11      	cmp	r3, #17
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d130      	bne.n	80027ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027a2:	2201      	movs	r2, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0201 	and.w	r2, r3, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0xea>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b12      	cmp	r3, #18
 800280c:	d123      	bne.n	8002856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	08da      	lsrs	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3208      	adds	r2, #8
 8002816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	08da      	lsrs	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3208      	adds	r2, #8
 8002850:	6939      	ldr	r1, [r7, #16]
 8002852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0203 	and.w	r2, r3, #3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80b2 	beq.w	80029fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_GPIO_Init+0x2fc>)
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <HAL_GPIO_Init+0x2fc>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6613      	str	r3, [r2, #96]	; 0x60
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_GPIO_Init+0x2fc>)
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_GPIO_Init+0x300>)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028da:	d02b      	beq.n	8002934 <HAL_GPIO_Init+0x210>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x304>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d025      	beq.n	8002930 <HAL_GPIO_Init+0x20c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a51      	ldr	r2, [pc, #324]	; (8002a2c <HAL_GPIO_Init+0x308>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01f      	beq.n	800292c <HAL_GPIO_Init+0x208>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a50      	ldr	r2, [pc, #320]	; (8002a30 <HAL_GPIO_Init+0x30c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d019      	beq.n	8002928 <HAL_GPIO_Init+0x204>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a4f      	ldr	r2, [pc, #316]	; (8002a34 <HAL_GPIO_Init+0x310>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x200>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a4e      	ldr	r2, [pc, #312]	; (8002a38 <HAL_GPIO_Init+0x314>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1fc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a4d      	ldr	r2, [pc, #308]	; (8002a3c <HAL_GPIO_Init+0x318>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1f8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a4c      	ldr	r2, [pc, #304]	; (8002a40 <HAL_GPIO_Init+0x31c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1f4>
 8002914:	2307      	movs	r3, #7
 8002916:	e00e      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002918:	2308      	movs	r3, #8
 800291a:	e00c      	b.n	8002936 <HAL_GPIO_Init+0x212>
 800291c:	2306      	movs	r3, #6
 800291e:	e00a      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002920:	2305      	movs	r3, #5
 8002922:	e008      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002924:	2304      	movs	r3, #4
 8002926:	e006      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002928:	2303      	movs	r3, #3
 800292a:	e004      	b.n	8002936 <HAL_GPIO_Init+0x212>
 800292c:	2302      	movs	r3, #2
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_GPIO_Init+0x212>
 8002934:	2300      	movs	r3, #0
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4093      	lsls	r3, r2
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002946:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_GPIO_Init+0x300>)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_GPIO_Init+0x320>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002978:	4a32      	ldr	r2, [pc, #200]	; (8002a44 <HAL_GPIO_Init+0x320>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_GPIO_Init+0x320>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029a2:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <HAL_GPIO_Init+0x320>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_GPIO_Init+0x320>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_GPIO_Init+0x320>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_GPIO_Init+0x320>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_GPIO_Init+0x320>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f ae91 	bne.w	8002734 <HAL_GPIO_Init+0x10>
  }
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	48000800 	.word	0x48000800
 8002a30:	48000c00 	.word	0x48000c00
 8002a34:	48001000 	.word	0x48001000
 8002a38:	48001400 	.word	0x48001400
 8002a3c:	48001800 	.word	0x48001800
 8002a40:	48001c00 	.word	0x48001c00
 8002a44:	40010400 	.word	0x40010400

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43d9      	mvns	r1, r3
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	400b      	ands	r3, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e081      	b.n	8002bc2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe fc82 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002afc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	e006      	b.n	8002b34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d104      	bne.n	8002b46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	021a      	lsls	r2, r3, #8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69d9      	ldr	r1, [r3, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 80da 	bne.w	8002da2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0x30>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0d3      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fdb8 	bl	8001778 <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2319      	movs	r3, #25
 8002c10:	2201      	movs	r2, #1
 8002c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f001 f863 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0be      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2221      	movs	r2, #33	; 0x21
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2210      	movs	r2, #16
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	893a      	ldrh	r2, [r7, #8]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2bff      	cmp	r3, #255	; 0xff
 8002c56:	d90e      	bls.n	8002c76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	4b51      	ldr	r3, [pc, #324]	; (8002dac <HAL_I2C_Master_Transmit+0x1e0>)
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f001 f9c6 	bl	8004000 <I2C_TransferConfig>
 8002c74:	e06c      	b.n	8002d50 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	8979      	ldrh	r1, [r7, #10]
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <HAL_I2C_Master_Transmit+0x1e0>)
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f001 f9b5 	bl	8004000 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c96:	e05b      	b.n	8002d50 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f001 f860 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e07b      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d034      	beq.n	8002d50 <HAL_I2C_Master_Transmit+0x184>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d130      	bne.n	8002d50 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fff2 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e04d      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d90e      	bls.n	8002d30 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	8979      	ldrh	r1, [r7, #10]
 8002d20:	2300      	movs	r3, #0
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f001 f969 	bl	8004000 <I2C_TransferConfig>
 8002d2e:	e00f      	b.n	8002d50 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f001 f958 	bl	8004000 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d19e      	bne.n	8002c98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f001 f83f 	bl	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01a      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2220      	movs	r2, #32
 8002d74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d82:	400b      	ands	r3, r1
 8002d84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	80002000 	.word	0x80002000
 8002db0:	fe00e800 	.word	0xfe00e800

08002db4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	f040 80db 	bne.w	8002f8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_I2C_Master_Receive+0x30>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0d4      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dec:	f7fe fcc4 	bl	8001778 <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2319      	movs	r3, #25
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 ff6f 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0bf      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2222      	movs	r2, #34	; 0x22
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	893a      	ldrh	r2, [r7, #8]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2bff      	cmp	r3, #255	; 0xff
 8002e3e:	d90e      	bls.n	8002e5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	8979      	ldrh	r1, [r7, #10]
 8002e4e:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <HAL_I2C_Master_Receive+0x1e4>)
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f001 f8d2 	bl	8004000 <I2C_TransferConfig>
 8002e5c:	e06d      	b.n	8002f3a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	8979      	ldrh	r1, [r7, #10]
 8002e70:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <HAL_I2C_Master_Receive+0x1e4>)
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f001 f8c1 	bl	8004000 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e7e:	e05c      	b.n	8002f3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6a39      	ldr	r1, [r7, #32]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 ffe9 	bl	8003e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e07c      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d034      	beq.n	8002f3a <HAL_I2C_Master_Receive+0x186>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d130      	bne.n	8002f3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fefd 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e04d      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2bff      	cmp	r3, #255	; 0xff
 8002efa:	d90e      	bls.n	8002f1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	22ff      	movs	r2, #255	; 0xff
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	8979      	ldrh	r1, [r7, #10]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f001 f874 	bl	8004000 <I2C_TransferConfig>
 8002f18:	e00f      	b.n	8002f3a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	8979      	ldrh	r1, [r7, #10]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f001 f863 	bl	8004000 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d19d      	bne.n	8002e80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	6a39      	ldr	r1, [r7, #32]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 ff4a 	bl	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e01a      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_I2C_Master_Receive+0x1e8>)
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	80002400 	.word	0x80002400
 8002f9c:	fe00e800 	.word	0xfe00e800

08002fa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	817b      	strh	r3, [r7, #10]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	813b      	strh	r3, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	f040 80f9 	bne.w	80031ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_I2C_Mem_Write+0x34>
 8002fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0ed      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Mem_Write+0x4e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0e6      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff6:	f7fe fbbf 	bl	8001778 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fe6a 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0d1      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2221      	movs	r2, #33	; 0x21
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a3a      	ldr	r2, [r7, #32]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003040:	88f8      	ldrh	r0, [r7, #6]
 8003042:	893a      	ldrh	r2, [r7, #8]
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	4603      	mov	r3, r0
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa77 	bl	8003544 <I2C_RequestMemoryWrite>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0a9      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2bff      	cmp	r3, #255	; 0xff
 8003070:	d90e      	bls.n	8003090 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	b2da      	uxtb	r2, r3
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	2300      	movs	r3, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 ffb9 	bl	8004000 <I2C_TransferConfig>
 800308e:	e00f      	b.n	80030b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	8979      	ldrh	r1, [r7, #10]
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 ffa8 	bl	8004000 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fe54 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e07b      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d034      	beq.n	8003168 <HAL_I2C_Mem_Write+0x1c8>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d130      	bne.n	8003168 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	2200      	movs	r2, #0
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fde6 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e04d      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2bff      	cmp	r3, #255	; 0xff
 8003128:	d90e      	bls.n	8003148 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	22ff      	movs	r2, #255	; 0xff
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	b2da      	uxtb	r2, r3
 8003136:	8979      	ldrh	r1, [r7, #10]
 8003138:	2300      	movs	r3, #0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 ff5d 	bl	8004000 <I2C_TransferConfig>
 8003146:	e00f      	b.n	8003168 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	b2da      	uxtb	r2, r3
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	2300      	movs	r3, #0
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 ff4c 	bl	8004000 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d19e      	bne.n	80030b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fe33 	bl	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01a      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2220      	movs	r2, #32
 800318c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_I2C_Mem_Write+0x224>)
 800319a:	400b      	ands	r3, r1
 800319c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	fe00e800 	.word	0xfe00e800

080031c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
  }
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d010      	beq.n	8003242 <HAL_I2C_ER_IRQHandler+0x46>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003240:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	0a9b      	lsrs	r3, r3, #10
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0x74>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	09db      	lsrs	r3, r3, #7
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f043 0208 	orr.w	r2, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	0a5b      	lsrs	r3, r3, #9
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_I2C_ER_IRQHandler+0xa2>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	09db      	lsrs	r3, r3, #7
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0202 	orr.w	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 030b 	and.w	r3, r3, #11
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fbdd 	bl	8003a70 <I2C_ITError>
  }
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
 80032f2:	4613      	mov	r3, r2
 80032f4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <I2C_Slave_ISR_IT+0x24>
 800335e:	2302      	movs	r3, #2
 8003360:	e0ec      	b.n	800353c <I2C_Slave_ISR_IT+0x1fe>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <I2C_Slave_ISR_IT+0x4c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa13 	bl	80037b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04d      	beq.n	8003432 <I2C_Slave_ISR_IT+0xf4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d047      	beq.n	8003432 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d128      	bne.n	80033fe <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b28      	cmp	r3, #40	; 0x28
 80033b6:	d108      	bne.n	80033ca <I2C_Slave_ISR_IT+0x8c>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033be:	d104      	bne.n	80033ca <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fafe 	bl	80039c4 <I2C_ITListenCplt>
 80033c8:	e032      	b.n	8003430 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b29      	cmp	r3, #41	; 0x29
 80033d4:	d10e      	bne.n	80033f4 <I2C_Slave_ISR_IT+0xb6>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033dc:	d00a      	beq.n	80033f4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2210      	movs	r2, #16
 80033e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fc39 	bl	8003c5e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f981 	bl	80036f4 <I2C_ITSlaveSeqCplt>
 80033f2:	e01d      	b.n	8003430 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80033fc:	e096      	b.n	800352c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2210      	movs	r2, #16
 8003404:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f043 0204 	orr.w	r2, r3, #4
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <I2C_Slave_ISR_IT+0xe4>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341e:	f040 8085 	bne.w	800352c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4619      	mov	r1, r3
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb21 	bl	8003a70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800342e:	e07d      	b.n	800352c <I2C_Slave_ISR_IT+0x1ee>
 8003430:	e07c      	b.n	800352c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d030      	beq.n	80034a0 <I2C_Slave_ISR_IT+0x162>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d02a      	beq.n	80034a0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d14f      	bne.n	8003530 <I2C_Slave_ISR_IT+0x1f2>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003496:	d04b      	beq.n	8003530 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f92b 	bl	80036f4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800349e:	e047      	b.n	8003530 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	08db      	lsrs	r3, r3, #3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034b8:	6939      	ldr	r1, [r7, #16]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f896 	bl	80035ec <I2C_ITAddrCplt>
 80034c0:	e037      	b.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d031      	beq.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02b      	beq.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d018      	beq.n	8003516 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
 8003514:	e00d      	b.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351c:	d002      	beq.n	8003524 <I2C_Slave_ISR_IT+0x1e6>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f8e5 	bl	80036f4 <I2C_ITSlaveSeqCplt>
 800352a:	e002      	b.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003530:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <I2C_RequestMemoryWrite+0xa4>)
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fd47 	bl	8004000 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbf3 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02c      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
 8003596:	e015      	b.n	80035c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fbd9 	bl	8003d62 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e012      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fb87 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	80002000 	.word	0x80002000

080035ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003602:	2b28      	cmp	r3, #40	; 0x28
 8003604:	d16a      	bne.n	80036dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	b29b      	uxth	r3, r3
 8003620:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003624:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003632:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003640:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d138      	bne.n	80036bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	09db      	lsrs	r3, r3, #7
 800364e:	b29a      	uxth	r2, r3
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	4053      	eors	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	f003 0306 	and.w	r3, r3, #6
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11c      	bne.n	8003698 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	2b02      	cmp	r3, #2
 8003672:	d13b      	bne.n	80036ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2208      	movs	r2, #8
 8003680:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800368a:	89ba      	ldrh	r2, [r7, #12]
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fe28 	bl	80032e6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003696:	e029      	b.n	80036ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800369c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fcdb 	bl	800405c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036ae:	89ba      	ldrh	r2, [r7, #12]
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fe16 	bl	80032e6 <HAL_I2C_AddrCallback>
}
 80036ba:	e017      	b.n	80036ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fccb 	bl	800405c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036ce:	89ba      	ldrh	r2, [r7, #12]
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fe06 	bl	80032e6 <HAL_I2C_AddrCallback>
}
 80036da:	e007      	b.n	80036ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	0b9b      	lsrs	r3, r3, #14
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e00d      	b.n	8003746 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0bdb      	lsrs	r3, r3, #15
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b29      	cmp	r3, #41	; 0x29
 8003750:	d112      	bne.n	8003778 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2228      	movs	r2, #40	; 0x28
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2221      	movs	r2, #33	; 0x21
 800375e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003760:	2101      	movs	r1, #1
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fc7a 	bl	800405c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fda4 	bl	80032be <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003776:	e017      	b.n	80037a8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d111      	bne.n	80037a8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2228      	movs	r2, #40	; 0x28
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2222      	movs	r2, #34	; 0x22
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003792:	2102      	movs	r1, #2
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fc61 	bl	800405c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fd95 	bl	80032d2 <HAL_I2C_SlaveRxCpltCallback>
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b21      	cmp	r3, #33	; 0x21
 80037da:	d002      	beq.n	80037e2 <I2C_ITSlaveCplt+0x32>
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b29      	cmp	r3, #41	; 0x29
 80037e0:	d108      	bne.n	80037f4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80037e2:	f248 0101 	movw	r1, #32769	; 0x8001
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fc38 	bl	800405c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2221      	movs	r2, #33	; 0x21
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
 80037f2:	e00d      	b.n	8003810 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b22      	cmp	r3, #34	; 0x22
 80037f8:	d002      	beq.n	8003800 <I2C_ITSlaveCplt+0x50>
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d107      	bne.n	8003810 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003800:	f248 0102 	movw	r1, #32770	; 0x8002
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fc29 	bl	800405c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2222      	movs	r2, #34	; 0x22
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800381e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b64      	ldr	r3, [pc, #400]	; (80039bc <I2C_ITSlaveCplt+0x20c>)
 800382c:	400b      	ands	r3, r1
 800382e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa14 	bl	8003c5e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	0b9b      	lsrs	r3, r3, #14
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d013      	beq.n	800386a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003850:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	2b00      	cmp	r3, #0
 8003858:	d020      	beq.n	800389c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003868:	e018      	b.n	800389c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	0bdb      	lsrs	r3, r3, #15
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003884:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8a7 	bl	8003a70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b28      	cmp	r3, #40	; 0x28
 800392c:	d141      	bne.n	80039b2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f847 	bl	80039c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003936:	e03c      	b.n	80039b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003940:	d014      	beq.n	800396c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fed6 	bl	80036f4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <I2C_ITSlaveCplt+0x210>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fccc 	bl	8003302 <HAL_I2C_ListenCpltCallback>
}
 800396a:	e022      	b.n	80039b2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b22      	cmp	r3, #34	; 0x22
 8003976:	d10e      	bne.n	8003996 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fc9f 	bl	80032d2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003994:	e00d      	b.n	80039b2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fc86 	bl	80032be <HAL_I2C_SlaveTxCpltCallback>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	fe00e800 	.word	0xfe00e800
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a26      	ldr	r2, [pc, #152]	; (8003a6c <I2C_ITListenCplt+0xa8>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d022      	beq.n	8003a42 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a42:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fb08 	bl	800405c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fc50 	bl	8003302 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	ffff0000 	.word	0xffff0000

08003a70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a5d      	ldr	r2, [pc, #372]	; (8003c04 <I2C_ITError+0x194>)
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b28      	cmp	r3, #40	; 0x28
 8003aa6:	d005      	beq.n	8003ab4 <I2C_ITError+0x44>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b29      	cmp	r3, #41	; 0x29
 8003aac:	d002      	beq.n	8003ab4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab2:	d10b      	bne.n	8003acc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ab4:	2103      	movs	r1, #3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fad0 	bl	800405c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2228      	movs	r2, #40	; 0x28
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <I2C_ITError+0x198>)
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aca:	e011      	b.n	8003af0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003acc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fac3 	bl	800405c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b60      	cmp	r3, #96	; 0x60
 8003ae0:	d003      	beq.n	8003aea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d039      	beq.n	8003b72 <I2C_ITError+0x102>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b11      	cmp	r3, #17
 8003b02:	d002      	beq.n	8003b0a <I2C_ITError+0x9a>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b21      	cmp	r3, #33	; 0x21
 8003b08:	d133      	bne.n	8003b72 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b18:	d107      	bne.n	8003b2a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fd49 	bl	80025c6 <HAL_DMA_GetState>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d017      	beq.n	8003b6a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <I2C_ITError+0x19c>)
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fc2b 	bl	80023aa <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d04d      	beq.n	8003bf6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b68:	e045      	b.n	8003bf6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f850 	bl	8003c10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b70:	e041      	b.n	8003bf6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d039      	beq.n	8003bee <I2C_ITError+0x17e>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b12      	cmp	r3, #18
 8003b7e:	d002      	beq.n	8003b86 <I2C_ITError+0x116>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b22      	cmp	r3, #34	; 0x22
 8003b84:	d133      	bne.n	8003bee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	d107      	bne.n	8003ba6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fd0b 	bl	80025c6 <HAL_DMA_GetState>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d017      	beq.n	8003be6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <I2C_ITError+0x19c>)
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fbed 	bl	80023aa <HAL_DMA_Abort_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003be4:	e009      	b.n	8003bfa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f812 	bl	8003c10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bec:	e005      	b.n	8003bfa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f80e 	bl	8003c10 <I2C_TreatErrorCallback>
  }
}
 8003bf4:	e002      	b.n	8003bfc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bfa:	bf00      	nop
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	0800333f 	.word	0x0800333f
 8003c0c:	08003ca7 	.word	0x08003ca7

08003c10 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b60      	cmp	r3, #96	; 0x60
 8003c22:	d10e      	bne.n	8003c42 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fb75 	bl	800332a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c40:	e009      	b.n	8003c56 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fb60 	bl	8003316 <HAL_I2C_ErrorCallback>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d103      	bne.n	8003c7c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	619a      	str	r2, [r3, #24]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff9b 	bl	8003c10 <I2C_TreatErrorCallback>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf2:	e022      	b.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d01e      	beq.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fd fd3c 	bl	8001778 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d113      	bne.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d0cd      	beq.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d6e:	e02c      	b.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f8dd 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e02a      	b.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d01e      	beq.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8c:	f7fd fcf4 	bl	8001778 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d302      	bcc.n	8003da2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d113      	bne.n	8003dca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d1cb      	bne.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dee:	e028      	b.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f89d 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e026      	b.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fd fcb8 	bl	8001778 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e007      	b.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d1cf      	bne.n	8003df0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e68:	e055      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f860 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e053      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d129      	bne.n	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d105      	bne.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e03f      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e022      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fd fc4a 	bl	8001778 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10f      	bne.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e007      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d1a2      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	fe00e800 	.word	0xfe00e800

08003f34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d151      	bne.n	8003ff2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f4e:	e022      	b.n	8003f96 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d01e      	beq.n	8003f96 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fd fc0e 	bl	8001778 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_IsAcknowledgeFailed+0x3a>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d113      	bne.n	8003f96 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02e      	b.n	8003ff4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d1d5      	bne.n	8003f50 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff fe52 	bl	8003c5e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <I2C_IsAcknowledgeFailed+0xc8>)
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	fe00e800 	.word	0xfe00e800

08004000 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	817b      	strh	r3, [r7, #10]
 800400e:	4613      	mov	r3, r2
 8004010:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	0d5b      	lsrs	r3, r3, #21
 800401c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <I2C_TransferConfig+0x58>)
 8004022:	430b      	orrs	r3, r1
 8004024:	43db      	mvns	r3, r3
 8004026:	ea02 0103 	and.w	r1, r2, r3
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004030:	7a7b      	ldrb	r3, [r7, #9]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	431a      	orrs	r2, r3
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	03ff63ff 	.word	0x03ff63ff

0800405c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00f      	beq.n	8004096 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800407c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800408a:	2b28      	cmp	r3, #40	; 0x28
 800408c:	d003      	beq.n	8004096 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004094:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80040a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b4:	2b28      	cmp	r3, #40	; 0x28
 80040b6:	d003      	beq.n	80040c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da03      	bge.n	80040d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d103      	bne.n	80040de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d103      	bne.n	80040ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f043 0320 	orr.w	r3, r3, #32
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d103      	bne.n	80040fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43da      	mvns	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	400a      	ands	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d138      	bne.n	80041a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004138:	2302      	movs	r3, #2
 800413a:	e032      	b.n	80041a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800416a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d139      	bne.n	8004238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e033      	b.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_PWREx_GetVoltageRange+0x3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004258:	d102      	bne.n	8004260 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800425a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800425e:	e00b      	b.n	8004278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426e:	d102      	bne.n	8004276 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	e000      	b.n	8004278 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004276:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d141      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004296:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d131      	bne.n	8004308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a4:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	4a46      	ldr	r2, [pc, #280]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042bc:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042c4:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2232      	movs	r2, #50	; 0x32
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	4a3f      	ldr	r2, [pc, #252]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	0c9b      	lsrs	r3, r3, #18
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042da:	e002      	b.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e2:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d102      	bne.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f2      	bne.n	80042dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042f6:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004302:	d158      	bne.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e057      	b.n	80043b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004308:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430e:	4a2d      	ldr	r2, [pc, #180]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004318:	e04d      	b.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004320:	d141      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d131      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004336:	4a23      	ldr	r2, [pc, #140]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004348:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2232      	movs	r2, #50	; 0x32
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	0c9b      	lsrs	r3, r3, #18
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004366:	e002      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d102      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f2      	bne.n	8004368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d112      	bne.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e011      	b.n	80043b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043a4:	e007      	b.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40007000 	.word	0x40007000
 80043c8:	20000000 	.word	0x20000000
 80043cc:	431bde83 	.word	0x431bde83

080043d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80043da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043de:	6053      	str	r3, [r2, #4]
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40007000 	.word	0x40007000

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f000 bc16 	b.w	8004c30 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004404:	4ba0      	ldr	r3, [pc, #640]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800440e:	4b9e      	ldr	r3, [pc, #632]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80e4 	beq.w	80045ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_RCC_OscConfig+0x4c>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	f040 808b 	bne.w	800454a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b01      	cmp	r3, #1
 8004438:	f040 8087 	bne.w	800454a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800443c:	4b92      	ldr	r3, [pc, #584]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x64>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e3ed      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <HAL_RCC_OscConfig+0x7e>
 8004464:	4b88      	ldr	r3, [pc, #544]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446c:	e005      	b.n	800447a <HAL_RCC_OscConfig+0x8a>
 800446e:	4b86      	ldr	r3, [pc, #536]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447a:	4293      	cmp	r3, r2
 800447c:	d223      	bcs.n	80044c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fdc4 	bl	8005010 <RCC_SetFlashLatencyFromMSIRange>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e3ce      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004492:	4b7d      	ldr	r3, [pc, #500]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7c      	ldr	r2, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4977      	ldr	r1, [pc, #476]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b0:	4b75      	ldr	r3, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	4972      	ldr	r1, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
 80044c4:	e025      	b.n	8004512 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044c6:	4b70      	ldr	r3, [pc, #448]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6f      	ldr	r2, [pc, #444]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b6d      	ldr	r3, [pc, #436]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	496a      	ldr	r1, [pc, #424]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e4:	4b68      	ldr	r3, [pc, #416]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	4965      	ldr	r1, [pc, #404]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fd84 	bl	8005010 <RCC_SetFlashLatencyFromMSIRange>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e38e      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004512:	f000 fcf3 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004516:	4601      	mov	r1, r0
 8004518:	4b5b      	ldr	r3, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	4a5a      	ldr	r2, [pc, #360]	; (800468c <HAL_RCC_OscConfig+0x29c>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	fa21 f303 	lsr.w	r3, r1, r3
 800452e:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_RCC_OscConfig+0x2a0>)
 8004530:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004532:	4b58      	ldr	r3, [pc, #352]	; (8004694 <HAL_RCC_OscConfig+0x2a4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd f8ce 	bl	80016d8 <HAL_InitTick>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d052      	beq.n	80045ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	e372      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d032      	beq.n	80045b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004552:	4b4d      	ldr	r3, [pc, #308]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800455e:	f7fd f90b 	bl	8001778 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004566:	f7fd f907 	bl	8001778 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e35b      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	493a      	ldr	r1, [pc, #232]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	4935      	ldr	r1, [pc, #212]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	e01a      	b.n	80045ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a32      	ldr	r2, [pc, #200]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045c4:	f7fd f8d8 	bl	8001778 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045cc:	f7fd f8d4 	bl	8001778 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e328      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1dc>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d073      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x21c>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b0c      	cmp	r3, #12
 8004604:	d10e      	bne.n	8004624 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d10b      	bne.n	8004624 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d063      	beq.n	80046e0 <HAL_RCC_OscConfig+0x2f0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d15f      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e305      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d106      	bne.n	800463c <HAL_RCC_OscConfig+0x24c>
 800462e:	4b16      	ldr	r3, [pc, #88]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e01d      	b.n	8004678 <HAL_RCC_OscConfig+0x288>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x270>
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800464c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0x288>
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <HAL_RCC_OscConfig+0x298>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd f87a 	bl	8001778 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004686:	e010      	b.n	80046aa <HAL_RCC_OscConfig+0x2ba>
 8004688:	40021000 	.word	0x40021000
 800468c:	08006694 	.word	0x08006694
 8004690:	20000000 	.word	0x20000000
 8004694:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd f86e 	bl	8001778 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e2c2      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046aa:	4baf      	ldr	r3, [pc, #700]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x2a8>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd f85e 	bl	8001778 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fd f85a 	bl	8001778 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e2ae      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d2:	4ba5      	ldr	r3, [pc, #660]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x2d0>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d060      	beq.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_OscConfig+0x310>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d119      	bne.n	800472e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d116      	bne.n	800472e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004700:	4b99      	ldr	r3, [pc, #612]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_OscConfig+0x328>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e28b      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b93      	ldr	r3, [pc, #588]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	4990      	ldr	r1, [pc, #576]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472c:	e040      	b.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d023      	beq.n	800477e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004736:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a8b      	ldr	r2, [pc, #556]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fd f819 	bl	8001778 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474a:	f7fd f815 	bl	8001778 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e269      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475c:	4b82      	ldr	r3, [pc, #520]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b7f      	ldr	r3, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	497c      	ldr	r1, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
 800477c:	e018      	b.n	80047b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b7a      	ldr	r3, [pc, #488]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a79      	ldr	r2, [pc, #484]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fc fff5 	bl	8001778 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fc fff1 	bl	8001778 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e245      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a4:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03c      	beq.n	8004836 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	4a67      	ldr	r2, [pc, #412]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fc ffd0 	bl	8001778 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047dc:	f7fc ffcc 	bl	8001778 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e220      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ee:	4b5e      	ldr	r3, [pc, #376]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80047f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <HAL_RCC_OscConfig+0x3ec>
 80047fc:	e01b      	b.n	8004836 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4b5a      	ldr	r3, [pc, #360]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fc ffb3 	bl	8001778 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004816:	f7fc ffaf 	bl	8001778 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e203      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004828:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ef      	bne.n	8004816 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a6 	beq.w	8004990 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004844:	2300      	movs	r3, #0
 8004846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004854:	4b44      	ldr	r3, [pc, #272]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	4a43      	ldr	r2, [pc, #268]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485e:	6593      	str	r3, [r2, #88]	; 0x58
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <HAL_RCC_OscConfig+0x57c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d118      	bne.n	80048ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_OscConfig+0x57c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a3a      	ldr	r2, [pc, #232]	; (800496c <HAL_RCC_OscConfig+0x57c>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004888:	f7fc ff76 	bl	8001778 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004890:	f7fc ff72 	bl	8001778 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1c6      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a2:	4b32      	ldr	r3, [pc, #200]	; (800496c <HAL_RCC_OscConfig+0x57c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d108      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4d8>
 80048b6:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048c6:	e024      	b.n	8004912 <HAL_RCC_OscConfig+0x522>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d110      	bne.n	80048f2 <HAL_RCC_OscConfig+0x502>
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	4a20      	ldr	r2, [pc, #128]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f0:	e00f      	b.n	8004912 <HAL_RCC_OscConfig+0x522>
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fc ff2d 	bl	8001778 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fc ff29 	bl	8001778 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e17b      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x578>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ed      	beq.n	8004922 <HAL_RCC_OscConfig+0x532>
 8004946:	e01a      	b.n	800497e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fc ff16 	bl	8001778 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800494e:	e00f      	b.n	8004970 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fc ff12 	bl	8001778 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e164      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004970:	4ba8      	ldr	r3, [pc, #672]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e8      	bne.n	8004950 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497e:	7ffb      	ldrb	r3, [r7, #31]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004984:	4ba3      	ldr	r3, [pc, #652]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	4aa2      	ldr	r2, [pc, #648]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 800498a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d03c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a4:	4b9b      	ldr	r3, [pc, #620]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049aa:	4a9a      	ldr	r2, [pc, #616]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fc fee0 	bl	8001778 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049bc:	f7fc fedc 	bl	8001778 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e130      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ce:	4b91      	ldr	r3, [pc, #580]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 80049d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ef      	beq.n	80049bc <HAL_RCC_OscConfig+0x5cc>
 80049dc:	e01b      	b.n	8004a16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049de:	4b8d      	ldr	r3, [pc, #564]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 80049e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e4:	4a8b      	ldr	r2, [pc, #556]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ee:	f7fc fec3 	bl	8001778 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f6:	f7fc febf 	bl	8001778 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e113      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a08:	4b82      	ldr	r3, [pc, #520]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1ef      	bne.n	80049f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8107 	beq.w	8004c2e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f040 80cb 	bne.w	8004bc0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a2a:	4b7a      	ldr	r3, [pc, #488]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f003 0203 	and.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d12c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d123      	bne.n	8004a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d11b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d113      	bne.n	8004a98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	3b01      	subs	r3, #1
 8004a92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d06d      	beq.n	8004b74 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d068      	beq.n	8004b70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a9e:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aaa:	4b5a      	ldr	r3, [pc, #360]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0ba      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aba:	4b56      	ldr	r3, [pc, #344]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a55      	ldr	r2, [pc, #340]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac6:	f7fc fe57 	bl	8001778 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fc fe53 	bl	8001778 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0a7      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	4b4c      	ldr	r3, [pc, #304]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aec:	4b49      	ldr	r3, [pc, #292]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_RCC_OscConfig+0x828>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004afc:	3a01      	subs	r2, #1
 8004afe:	0112      	lsls	r2, r2, #4
 8004b00:	4311      	orrs	r1, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b06:	0212      	lsls	r2, r2, #8
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b0e:	0852      	lsrs	r2, r2, #1
 8004b10:	3a01      	subs	r2, #1
 8004b12:	0552      	lsls	r2, r2, #21
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b1a:	0852      	lsrs	r2, r2, #1
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	0652      	lsls	r2, r2, #25
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b26:	06d2      	lsls	r2, r2, #27
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	493a      	ldr	r1, [pc, #232]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b30:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b3c:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b48:	f7fc fe16 	bl	8001778 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fc fe12 	bl	8001778 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e066      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b6e:	e05e      	b.n	8004c2e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e05d      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d156      	bne.n	8004c2e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b80:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b8c:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b98:	f7fc fdee 	bl	8001778 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fc fdea 	bl	8001778 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e03e      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x7b0>
 8004bbe:	e036      	b.n	8004c2e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d031      	beq.n	8004c2a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004be4:	f023 0303 	bic.w	r3, r3, #3
 8004be8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_RCC_OscConfig+0x824>)
 8004bf0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fc fdbd 	bl	8001778 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c00:	e00c      	b.n	8004c1c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fc fdb9 	bl	8001778 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d905      	bls.n	8004c1c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e00d      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
 8004c14:	40021000 	.word	0x40021000
 8004c18:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_OscConfig+0x848>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ec      	bne.n	8004c02 <HAL_RCC_OscConfig+0x812>
 8004c28:	e001      	b.n	8004c2e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e10f      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b89      	ldr	r3, [pc, #548]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d910      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b86      	ldr	r3, [pc, #536]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 020f 	bic.w	r2, r3, #15
 8004c6a:	4984      	ldr	r1, [pc, #528]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b82      	ldr	r3, [pc, #520]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0f7      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8089 	beq.w	8004da4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d133      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	4b79      	ldr	r3, [pc, #484]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0e4      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004caa:	f000 fa0b 	bl	80050c4 <RCC_GetSysClockFreqFromPLLSource>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <HAL_RCC_ClockConfig+0x248>)
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d955      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004cb6:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cc2:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cca:	4a6d      	ldr	r2, [pc, #436]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e044      	b.n	8004d62 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03e      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x126>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d13a      	bne.n	8004d62 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cec:	4b64      	ldr	r3, [pc, #400]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf4:	4a62      	ldr	r2, [pc, #392]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e02f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d115      	bne.n	8004d42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0ac      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d22:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0a0      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d32:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e098      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004d42:	f000 f8db 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <HAL_RCC_ClockConfig+0x248>)
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d909      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d4e:	4b4c      	ldr	r3, [pc, #304]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d56:	4a4a      	ldr	r2, [pc, #296]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4944      	ldr	r1, [pc, #272]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d74:	f7fc fd00 	bl	8001778 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fc fcfc 	bl	8001778 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e070      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4930      	ldr	r1, [pc, #192]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d105      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dca:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d210      	bcs.n	8004e06 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 020f 	bic.w	r2, r3, #15
 8004dec:	4923      	ldr	r1, [pc, #140]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCC_ClockConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e036      	b.n	8004e74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e12:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4918      	ldr	r1, [pc, #96]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4910      	ldr	r1, [pc, #64]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e44:	f000 f85a 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004e48:	4601      	mov	r1, r0
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <HAL_RCC_ClockConfig+0x24c>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x250>)
 8004e62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <HAL_RCC_ClockConfig+0x254>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fc fc35 	bl	80016d8 <HAL_InitTick>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73fb      	strb	r3, [r7, #15]

  return status;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40022000 	.word	0x40022000
 8004e80:	40021000 	.word	0x40021000
 8004e84:	04c4b400 	.word	0x04c4b400
 8004e88:	08006694 	.word	0x08006694
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004ea0:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <HAL_RCC_MCOConfig+0x64>)
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <HAL_RCC_MCOConfig+0x64>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCC_MCOConfig+0x64>)
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ed8:	f7fd fc24 	bl	8002724 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_MCOConfig+0x64>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	4903      	ldr	r1, [pc, #12]	; (8004ef8 <HAL_RCC_MCOConfig+0x64>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3728      	adds	r7, #40	; 0x28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000

08004efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f14:	4b3a      	ldr	r3, [pc, #232]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d121      	bne.n	8004f6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d11e      	bne.n	8004f6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f30:	4b33      	ldr	r3, [pc, #204]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f3c:	4b30      	ldr	r3, [pc, #192]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e005      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f4c:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10d      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d102      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f74:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e004      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f80:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b0c      	cmp	r3, #12
 8004f88:	d133      	bne.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004f9e:	e005      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fa2:	617b      	str	r3, [r7, #20]
      break;
 8004fa4:	e005      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fa6:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fa8:	617b      	str	r3, [r7, #20]
      break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	617b      	str	r3, [r7, #20]
      break;
 8004fb0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb2:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	fb02 f203 	mul.w	r2, r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3724      	adds	r7, #36	; 0x24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40021000 	.word	0x40021000
 8005004:	080066ac 	.word	0x080066ac
 8005008:	00f42400 	.word	0x00f42400
 800500c:	007a1200 	.word	0x007a1200

08005010 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005028:	f7ff f90e 	bl	8004248 <HAL_PWREx_GetVoltageRange>
 800502c:	6178      	str	r0, [r7, #20]
 800502e:	e014      	b.n	800505a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005030:	4b22      	ldr	r3, [pc, #136]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503a:	6593      	str	r3, [r2, #88]	; 0x58
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005048:	f7ff f8fe 	bl	8004248 <HAL_PWREx_GetVoltageRange>
 800504c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800504e:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005058:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d10b      	bne.n	800507a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d913      	bls.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2ba0      	cmp	r3, #160	; 0xa0
 800506c:	d902      	bls.n	8005074 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800506e:	2302      	movs	r3, #2
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e00d      	b.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e00a      	b.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b7f      	cmp	r3, #127	; 0x7f
 800507e:	d902      	bls.n	8005086 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005080:	2302      	movs	r3, #2
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	e004      	b.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b70      	cmp	r3, #112	; 0x70
 800508a:	d101      	bne.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800508c:	2301      	movs	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f023 020f 	bic.w	r2, r3, #15
 8005098:	4909      	ldr	r1, [pc, #36]	; (80050c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d001      	beq.n	80050b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40022000 	.word	0x40022000

080050c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80050ce:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d118      	bne.n	800510c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e005      	b.n	8005102 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005102:	4a21      	ldr	r2, [pc, #132]	; (8005188 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d002      	beq.n	8005122 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800511c:	2b03      	cmp	r3, #3
 800511e:	d003      	beq.n	8005128 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005120:	e005      	b.n	800512e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005124:	613b      	str	r3, [r7, #16]
    break;
 8005126:	e005      	b.n	8005134 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800512a:	613b      	str	r3, [r7, #16]
    break;
 800512c:	e002      	b.n	8005134 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	613b      	str	r3, [r7, #16]
    break;
 8005132:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	3301      	adds	r3, #1
 8005140:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	fb02 f203 	mul.w	r2, r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	0e5b      	lsrs	r3, r3, #25
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	3301      	adds	r3, #1
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005174:	683b      	ldr	r3, [r7, #0]
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	080066ac 	.word	0x080066ac
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200

08005194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800519c:	2300      	movs	r3, #0
 800519e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051a0:	2300      	movs	r3, #0
 80051a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d03d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d804      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00e      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80051c4:	e01d      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80051c6:	2b60      	cmp	r3, #96	; 0x60
 80051c8:	d01e      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d01c      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051ce:	e018      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051d0:	4b86      	ldr	r3, [pc, #536]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a85      	ldr	r2, [pc, #532]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051dc:	e015      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fafd 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051ee:	e00c      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3320      	adds	r3, #32
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fbe4 	bl	80059c4 <RCCEx_PLLSAI2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	74fb      	strb	r3, [r7, #19]
      break;
 8005206:	e000      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005210:	4b76      	ldr	r3, [pc, #472]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005216:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	4973      	ldr	r1, [pc, #460]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005226:	e001      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d042      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005240:	d00f      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8005242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005246:	d805      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800524c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005250:	d017      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005252:	e01f      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005258:	d01f      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800525a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525e:	d01c      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005260:	e018      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005262:	4b62      	ldr	r3, [pc, #392]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a61      	ldr	r2, [pc, #388]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800526e:	e015      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fab4 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005280:	e00c      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3320      	adds	r3, #32
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fb9b 	bl	80059c4 <RCCEx_PLLSAI2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005292:	e003      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	74fb      	strb	r3, [r7, #19]
      break;
 8005298:	e000      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800529a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052a2:	4b52      	ldr	r3, [pc, #328]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	494e      	ldr	r1, [pc, #312]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80052b8:	e001      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	7cfb      	ldrb	r3, [r7, #19]
 80052bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 809f 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052cc:	2300      	movs	r3, #0
 80052ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d0:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	4a40      	ldr	r2, [pc, #256]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6593      	str	r3, [r2, #88]	; 0x58
 80052f2:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fe:	2301      	movs	r3, #1
 8005300:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005302:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3a      	ldr	r2, [pc, #232]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800530e:	f7fc fa33 	bl	8001778 <HAL_GetTick>
 8005312:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005314:	e009      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fc fa2f 	bl	8001778 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d902      	bls.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	74fb      	strb	r3, [r7, #19]
        break;
 8005328:	e005      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800532a:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ef      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d15b      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800533c:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005346:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01f      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	429a      	cmp	r2, r3
 8005358:	d019      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc f9ee 	bl	8001778 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	e00b      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fc f9ea 	bl	8001778 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d902      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	74fb      	strb	r3, [r7, #19]
            break;
 80053b6:	e006      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0ec      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053cc:	4b07      	ldr	r3, [pc, #28]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	4903      	ldr	r1, [pc, #12]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053e4:	e008      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	74bb      	strb	r3, [r7, #18]
 80053ea:	e005      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	7cfb      	ldrb	r3, [r7, #19]
 80053f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f8:	7c7b      	ldrb	r3, [r7, #17]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	4ba0      	ldr	r3, [pc, #640]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a9f      	ldr	r2, [pc, #636]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005416:	4b9a      	ldr	r3, [pc, #616]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f023 0203 	bic.w	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	4996      	ldr	r1, [pc, #600]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005438:	4b91      	ldr	r3, [pc, #580]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 020c 	bic.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	498e      	ldr	r1, [pc, #568]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800545a:	4b89      	ldr	r3, [pc, #548]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	4985      	ldr	r1, [pc, #532]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800547c:	4b80      	ldr	r3, [pc, #512]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	497d      	ldr	r1, [pc, #500]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800549e:	4b78      	ldr	r3, [pc, #480]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	4974      	ldr	r1, [pc, #464]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c0:	4b6f      	ldr	r3, [pc, #444]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	496c      	ldr	r1, [pc, #432]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e2:	4b67      	ldr	r3, [pc, #412]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f0:	4963      	ldr	r1, [pc, #396]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005504:	4b5e      	ldr	r3, [pc, #376]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005512:	495b      	ldr	r1, [pc, #364]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005526:	4b56      	ldr	r3, [pc, #344]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	4952      	ldr	r1, [pc, #328]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005548:	4b4d      	ldr	r3, [pc, #308]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	494a      	ldr	r1, [pc, #296]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	4941      	ldr	r1, [pc, #260]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800558c:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005592:	f023 0203 	bic.w	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	4939      	ldr	r1, [pc, #228]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d028      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ae:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055bc:	4930      	ldr	r1, [pc, #192]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d106      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d8:	60d3      	str	r3, [r2, #12]
 80055da:	e011      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f8f9 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d04d      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005614:	d108      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005622:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005626:	e012      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562e:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005634:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005646:	490e      	ldr	r1, [pc, #56]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005656:	d106      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005662:	60d3      	str	r3, [r2, #12]
 8005664:	e020      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566e:	d109      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a02      	ldr	r2, [pc, #8]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567a:	60d3      	str	r3, [r2, #12]
 800567c:	e014      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	2101      	movs	r1, #1
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f8a5 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569e:	7cfb      	ldrb	r3, [r7, #19]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d028      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056b4:	4b4a      	ldr	r3, [pc, #296]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	4947      	ldr	r1, [pc, #284]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d2:	d106      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b42      	ldr	r3, [pc, #264]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a41      	ldr	r2, [pc, #260]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
 80056e0:	e011      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ea:	d10c      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	2101      	movs	r1, #1
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f876 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01e      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005712:	4b33      	ldr	r3, [pc, #204]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005722:	492f      	ldr	r1, [pc, #188]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005734:	d10c      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f851 	bl	80057e4 <RCCEx_PLLSAI1_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800575c:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800575e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005762:	f023 0204 	bic.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	491c      	ldr	r1, [pc, #112]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005780:	4b17      	ldr	r3, [pc, #92]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005786:	f023 0218 	bic.w	r2, r3, #24
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	4913      	ldr	r1, [pc, #76]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b4:	490a      	ldr	r1, [pc, #40]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000

080057e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057f2:	4b70      	ldr	r3, [pc, #448]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057fe:	4b6d      	ldr	r3, [pc, #436]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0203 	and.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d103      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
       ||
 8005812:	2b00      	cmp	r3, #0
 8005814:	d13f      	bne.n	8005896 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
 800581a:	e03c      	b.n	8005896 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d00c      	beq.n	800583e <RCCEx_PLLSAI1_Config+0x5a>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d013      	beq.n	8005850 <RCCEx_PLLSAI1_Config+0x6c>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d120      	bne.n	800586e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800582c:	4b61      	ldr	r3, [pc, #388]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d11d      	bne.n	8005874 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583c:	e01a      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800583e:	4b5d      	ldr	r3, [pc, #372]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800584e:	e013      	b.n	8005878 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005850:	4b58      	ldr	r3, [pc, #352]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10f      	bne.n	800587c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800585c:	4b55      	ldr	r3, [pc, #340]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800586c:	e006      	b.n	800587c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
      break;
 8005872:	e004      	b.n	800587e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800587c:	bf00      	nop
    }

    if(status == HAL_OK)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005884:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f023 0203 	bic.w	r2, r3, #3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4948      	ldr	r1, [pc, #288]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f040 8086 	bne.w	80059aa <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800589e:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a44      	ldr	r2, [pc, #272]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058aa:	f7fb ff65 	bl	8001778 <HAL_GetTick>
 80058ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058b0:	e009      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058b2:	f7fb ff61 	bl	8001778 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d902      	bls.n	80058c6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	73fb      	strb	r3, [r7, #15]
        break;
 80058c4:	e005      	b.n	80058d2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058c6:	4b3b      	ldr	r3, [pc, #236]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1ef      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d168      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d113      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058de:	4b35      	ldr	r3, [pc, #212]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	4b35      	ldr	r3, [pc, #212]	; (80059b8 <RCCEx_PLLSAI1_Config+0x1d4>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6892      	ldr	r2, [r2, #8]
 80058ea:	0211      	lsls	r1, r2, #8
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68d2      	ldr	r2, [r2, #12]
 80058f0:	06d2      	lsls	r2, r2, #27
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6852      	ldr	r2, [r2, #4]
 80058f8:	3a01      	subs	r2, #1
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	430a      	orrs	r2, r1
 80058fe:	492d      	ldr	r1, [pc, #180]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005900:	4313      	orrs	r3, r2
 8005902:	610b      	str	r3, [r1, #16]
 8005904:	e02d      	b.n	8005962 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d115      	bne.n	8005938 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6892      	ldr	r2, [r2, #8]
 8005918:	0211      	lsls	r1, r2, #8
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6912      	ldr	r2, [r2, #16]
 800591e:	0852      	lsrs	r2, r2, #1
 8005920:	3a01      	subs	r2, #1
 8005922:	0552      	lsls	r2, r2, #21
 8005924:	4311      	orrs	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6852      	ldr	r2, [r2, #4]
 800592a:	3a01      	subs	r2, #1
 800592c:	0112      	lsls	r2, r2, #4
 800592e:	430a      	orrs	r2, r1
 8005930:	4920      	ldr	r1, [pc, #128]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	610b      	str	r3, [r1, #16]
 8005936:	e014      	b.n	8005962 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800593e:	4013      	ands	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6892      	ldr	r2, [r2, #8]
 8005944:	0211      	lsls	r1, r2, #8
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6952      	ldr	r2, [r2, #20]
 800594a:	0852      	lsrs	r2, r2, #1
 800594c:	3a01      	subs	r2, #1
 800594e:	0652      	lsls	r2, r2, #25
 8005950:	4311      	orrs	r1, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6852      	ldr	r2, [r2, #4]
 8005956:	3a01      	subs	r2, #1
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	430a      	orrs	r2, r1
 800595c:	4915      	ldr	r1, [pc, #84]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800596c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fb ff03 	bl	8001778 <HAL_GetTick>
 8005972:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005974:	e009      	b.n	800598a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005976:	f7fb feff 	bl	8001778 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d902      	bls.n	800598a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	73fb      	strb	r3, [r7, #15]
          break;
 8005988:	e005      	b.n	8005996 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ef      	beq.n	8005976 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	4903      	ldr	r1, [pc, #12]	; (80059b4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000
 80059b8:	07ff800f 	.word	0x07ff800f
 80059bc:	ff9f800f 	.word	0xff9f800f
 80059c0:	f9ff800f 	.word	0xf9ff800f

080059c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d2:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059de:	4b6d      	ldr	r3, [pc, #436]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0203 	and.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d103      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
       ||
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d13f      	bne.n	8005a76 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
 80059fa:	e03c      	b.n	8005a76 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d00c      	beq.n	8005a1e <RCCEx_PLLSAI2_Config+0x5a>
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d013      	beq.n	8005a30 <RCCEx_PLLSAI2_Config+0x6c>
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d120      	bne.n	8005a4e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11d      	bne.n	8005a54 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a1c:	e01a      	b.n	8005a54 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d116      	bne.n	8005a58 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2e:	e013      	b.n	8005a58 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a30:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10f      	bne.n	8005a5c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a3c:	4b55      	ldr	r3, [pc, #340]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a4c:	e006      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
      break;
 8005a52:	e004      	b.n	8005a5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005a5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d108      	bne.n	8005a76 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005a64:	4b4b      	ldr	r3, [pc, #300]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f023 0203 	bic.w	r2, r3, #3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4948      	ldr	r1, [pc, #288]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 8086 	bne.w	8005b8a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a7e:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a44      	ldr	r2, [pc, #272]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fb fe75 	bl	8001778 <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a90:	e009      	b.n	8005aa6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a92:	f7fb fe71 	bl	8001778 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d902      	bls.n	8005aa6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa4:	e005      	b.n	8005ab2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1ef      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d168      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d113      	bne.n	8005ae6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005abe:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6892      	ldr	r2, [r2, #8]
 8005aca:	0211      	lsls	r1, r2, #8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	06d2      	lsls	r2, r2, #27
 8005ad2:	4311      	orrs	r1, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	3a01      	subs	r2, #1
 8005ada:	0112      	lsls	r2, r2, #4
 8005adc:	430a      	orrs	r2, r1
 8005ade:	492d      	ldr	r1, [pc, #180]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	614b      	str	r3, [r1, #20]
 8005ae4:	e02d      	b.n	8005b42 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d115      	bne.n	8005b18 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aec:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6892      	ldr	r2, [r2, #8]
 8005af8:	0211      	lsls	r1, r2, #8
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6912      	ldr	r2, [r2, #16]
 8005afe:	0852      	lsrs	r2, r2, #1
 8005b00:	3a01      	subs	r2, #1
 8005b02:	0552      	lsls	r2, r2, #21
 8005b04:	4311      	orrs	r1, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6852      	ldr	r2, [r2, #4]
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	4920      	ldr	r1, [pc, #128]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	614b      	str	r3, [r1, #20]
 8005b16:	e014      	b.n	8005b42 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6892      	ldr	r2, [r2, #8]
 8005b24:	0211      	lsls	r1, r2, #8
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6952      	ldr	r2, [r2, #20]
 8005b2a:	0852      	lsrs	r2, r2, #1
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	0652      	lsls	r2, r2, #25
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6852      	ldr	r2, [r2, #4]
 8005b36:	3a01      	subs	r2, #1
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	4915      	ldr	r1, [pc, #84]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fb fe13 	bl	8001778 <HAL_GetTick>
 8005b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b54:	e009      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b56:	f7fb fe0f 	bl	8001778 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d902      	bls.n	8005b6a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	73fb      	strb	r3, [r7, #15]
          break;
 8005b68:	e005      	b.n	8005b76 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ef      	beq.n	8005b56 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	4903      	ldr	r1, [pc, #12]	; (8005b94 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	07ff800f 	.word	0x07ff800f
 8005b9c:	ff9f800f 	.word	0xff9f800f
 8005ba0:	f9ff800f 	.word	0xf9ff800f

08005ba4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b08b      	sub	sp, #44	; 0x2c
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005bca:	2320      	movs	r3, #32
 8005bcc:	e003      	b.n	8005bd6 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	2103      	movs	r1, #3
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	61fb      	str	r3, [r7, #28]
  return result;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	e003      	b.n	8005c04 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	372c      	adds	r7, #44	; 0x2c
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	605a      	str	r2, [r3, #4]
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b08b      	sub	sp, #44	; 0x2c
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	fa93 f3a3 	rbit	r3, r3
 8005c68:	613b      	str	r3, [r7, #16]
  return result;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005c74:	2320      	movs	r3, #32
 8005c76:	e003      	b.n	8005c80 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	fab3 f383 	clz	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	2103      	movs	r1, #3
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	fa93 f3a3 	rbit	r3, r3
 8005c96:	61fb      	str	r3, [r7, #28]
  return result;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	e003      	b.n	8005cae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	fab3 f383 	clz	r3, r3
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005cbc:	bf00      	nop
 8005cbe:	372c      	adds	r7, #44	; 0x2c
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b08b      	sub	sp, #44	; 0x2c
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	fa93 f3a3 	rbit	r3, r3
 8005ce2:	613b      	str	r3, [r7, #16]
  return result;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005cee:	2320      	movs	r3, #32
 8005cf0:	e003      	b.n	8005cfa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	fab3 f383 	clz	r3, r3
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2103      	movs	r1, #3
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	401a      	ands	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	fa93 f3a3 	rbit	r3, r3
 8005d10:	61fb      	str	r3, [r7, #28]
  return result;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	e003      	b.n	8005d28 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	fab3 f383 	clz	r3, r3
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	60da      	str	r2, [r3, #12]
}
 8005d36:	bf00      	nop
 8005d38:	372c      	adds	r7, #44	; 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b08b      	sub	sp, #44	; 0x2c
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	fa93 f3a3 	rbit	r3, r3
 8005d5c:	613b      	str	r3, [r7, #16]
  return result;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e003      	b.n	8005d74 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	210f      	movs	r1, #15
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	401a      	ands	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	61fb      	str	r3, [r7, #28]
  return result;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005d96:	2320      	movs	r3, #32
 8005d98:	e003      	b.n	8005da2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	fab3 f383 	clz	r3, r3
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	fa01 f303 	lsl.w	r3, r1, r3
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005db0:	bf00      	nop
 8005db2:	372c      	adds	r7, #44	; 0x2c
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b08b      	sub	sp, #44	; 0x2c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	fa93 f3a3 	rbit	r3, r3
 8005dd8:	613b      	str	r3, [r7, #16]
  return result;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005de4:	2320      	movs	r3, #32
 8005de6:	e003      	b.n	8005df0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	fab3 f383 	clz	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	210f      	movs	r1, #15
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	fa93 f3a3 	rbit	r3, r3
 8005e08:	61fb      	str	r3, [r7, #28]
  return result;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005e14:	2320      	movs	r3, #32
 8005e16:	e003      	b.n	8005e20 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	fab3 f383 	clz	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005e2e:	bf00      	nop
 8005e30:	372c      	adds	r7, #44	; 0x2c
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b088      	sub	sp, #32
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	60fb      	str	r3, [r7, #12]
  return result;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <LL_GPIO_Init+0x26>
    return 32U;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e003      	b.n	8005e68 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	fab3 f383 	clz	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005e6a:	e040      	b.n	8005eee <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2101      	movs	r1, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d032      	beq.n	8005ee8 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fe8a 	bl	8005ba4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d003      	beq.n	8005ea0 <LL_GPIO_Init+0x66>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d106      	bne.n	8005eae <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fed0 	bl	8005c4e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ff06 	bl	8005cc8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d111      	bne.n	8005ee8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2bff      	cmp	r3, #255	; 0xff
 8005ec8:	d807      	bhi.n	8005eda <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff35 	bl	8005d42 <LL_GPIO_SetAFPin_0_7>
 8005ed8:	e006      	b.n	8005ee8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff6a 	bl	8005dbc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1b7      	bne.n	8005e6c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d003      	beq.n	8005f0c <LL_GPIO_Init+0xd2>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d107      	bne.n	8005f1c <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	461a      	mov	r2, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe81 	bl	8005c1e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <LL_LPUART_IsEnabled>:
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <LL_LPUART_IsEnabled+0x18>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <LL_LPUART_IsEnabled+0x1a>
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <LL_LPUART_SetPrescaler>:
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	f023 030f 	bic.w	r3, r3, #15
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	b292      	uxth	r2, r2
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_LPUART_SetStopBitsLength>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	605a      	str	r2, [r3, #4]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_LPUART_SetHWFlowCtrl>:
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_LPUART_SetBaudRate>:
{
 8005fc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <LL_LPUART_SetBaudRate+0x84>)
 8005fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f04f 0400 	mov.w	r4, #0
 8005fea:	461a      	mov	r2, r3
 8005fec:	4623      	mov	r3, r4
 8005fee:	f7fa f905 	bl	80001fc <__aeabi_uldivmod>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	f04f 0400 	mov.w	r4, #0
 8006002:	0214      	lsls	r4, r2, #8
 8006004:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006008:	020b      	lsls	r3, r1, #8
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	0852      	lsrs	r2, r2, #1
 800600e:	4611      	mov	r1, r2
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	eb13 0b01 	adds.w	fp, r3, r1
 8006018:	eb44 0c02 	adc.w	ip, r4, r2
 800601c:	4658      	mov	r0, fp
 800601e:	4661      	mov	r1, ip
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f04f 0400 	mov.w	r4, #0
 8006026:	461a      	mov	r2, r3
 8006028:	4623      	mov	r3, r4
 800602a:	f7fa f8e7 	bl	80001fc <__aeabi_uldivmod>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	60da      	str	r2, [r3, #12]
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006044:	080066dc 	.word	0x080066dc

08006048 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff65 	bl	8005f26 <LL_LPUART_IsEnabled>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d136      	bne.n	80060d0 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <LL_LPUART_Init+0x94>)
 8006068:	4013      	ands	r3, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6891      	ldr	r1, [r2, #8]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	6912      	ldr	r2, [r2, #16]
 8006072:	4311      	orrs	r1, r2
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	6952      	ldr	r2, [r2, #20]
 8006078:	430a      	orrs	r2, r1
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff74 	bl	8005f74 <LL_LPUART_SetStopBitsLength>

    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ff81 	bl	8005f9a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8006098:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800609c:	f000 f8ea 	bl	8006274 <LL_RCC_GetLPUARTClockFreq>
 80060a0:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00d      	beq.n	80060c4 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff7e 	bl	8005fc0 <LL_LPUART_SetBaudRate>
#if defined(USART_PRESC_PRESCALER)
    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ff3e 	bl	8005f4c <LL_LPUART_SetPrescaler>
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	efffe9f3 	.word	0xefffe9f3

080060e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <LL_RCC_HSI_IsReady+0x24>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f0:	d101      	bne.n	80060f6 <LL_RCC_HSI_IsReady+0x16>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <LL_RCC_HSI_IsReady+0x18>
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000

08006108 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <LL_RCC_LSE_IsReady+0x24>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d101      	bne.n	800611e <LL_RCC_LSE_IsReady+0x16>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <LL_RCC_LSE_IsReady+0x18>
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000

08006130 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b08      	cmp	r3, #8
 800613e:	d101      	bne.n	8006144 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40021000 	.word	0x40021000

08006154 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <LL_RCC_MSI_GetRange+0x18>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000

08006170 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006174:	4b04      	ldr	r3, [pc, #16]	; (8006188 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800617a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800617e:	4618      	mov	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40021000 	.word	0x40021000

0800618c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006190:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <LL_RCC_GetSysClkSource+0x18>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000

080061a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <LL_RCC_GetAHBPrescaler+0x18>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40021000 	.word	0x40021000

080061c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <LL_RCC_GetAPB1Prescaler+0x18>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40021000 	.word	0x40021000

080061e0 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <LL_RCC_GetLPUARTClockSource+0x20>)
 80061ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4013      	ands	r3, r2
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000

08006204 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <LL_RCC_PLL_GetMainSource+0x18>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0303 	and.w	r3, r3, #3
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000

08006220 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <LL_RCC_PLL_GetN+0x18>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800622e:	4618      	mov	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40021000 	.word	0x40021000

0800623c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <LL_RCC_PLL_GetR+0x18>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006248:	4618      	mov	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000

08006258 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <LL_RCC_PLL_GetDivider+0x18>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006264:	4618      	mov	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000

08006274 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ffad 	bl	80061e0 <LL_RCC_GetLPUARTClockSource>
 8006286:	4603      	mov	r3, r0
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d00c      	beq.n	80062a8 <LL_RCC_GetLPUARTClockFreq+0x34>
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006292:	d802      	bhi.n	800629a <LL_RCC_GetLPUARTClockFreq+0x26>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01c      	beq.n	80062d2 <LL_RCC_GetLPUARTClockFreq+0x5e>
    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
      break;

    default:
      break;
 8006298:	e02a      	b.n	80062f0 <LL_RCC_GetLPUARTClockFreq+0x7c>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800629a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629e:	d007      	beq.n	80062b0 <LL_RCC_GetLPUARTClockFreq+0x3c>
 80062a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a4:	d00c      	beq.n	80062c0 <LL_RCC_GetLPUARTClockFreq+0x4c>
      break;
 80062a6:	e023      	b.n	80062f0 <LL_RCC_GetLPUARTClockFreq+0x7c>
      lpuart_frequency = RCC_GetSystemClockFreq();
 80062a8:	f000 f82a 	bl	8006300 <RCC_GetSystemClockFreq>
 80062ac:	60f8      	str	r0, [r7, #12]
      break;
 80062ae:	e01f      	b.n	80062f0 <LL_RCC_GetLPUARTClockFreq+0x7c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80062b0:	f7ff ff16 	bl	80060e0 <LL_RCC_HSI_IsReady>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d017      	beq.n	80062ea <LL_RCC_GetLPUARTClockFreq+0x76>
        lpuart_frequency = HSI_VALUE;
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <LL_RCC_GetLPUARTClockFreq+0x88>)
 80062bc:	60fb      	str	r3, [r7, #12]
      break;
 80062be:	e014      	b.n	80062ea <LL_RCC_GetLPUARTClockFreq+0x76>
      if (LL_RCC_LSE_IsReady() != 0U)
 80062c0:	f7ff ff22 	bl	8006108 <LL_RCC_LSE_IsReady>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <LL_RCC_GetLPUARTClockFreq+0x7a>
        lpuart_frequency = LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	60fb      	str	r3, [r7, #12]
      break;
 80062d0:	e00d      	b.n	80062ee <LL_RCC_GetLPUARTClockFreq+0x7a>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80062d2:	f000 f815 	bl	8006300 <RCC_GetSystemClockFreq>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f8a1 	bl	8006420 <RCC_GetHCLKClockFreq>
 80062de:	4603      	mov	r3, r0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f8b3 	bl	800644c <RCC_GetPCLK1ClockFreq>
 80062e6:	60f8      	str	r0, [r7, #12]
      break;
 80062e8:	e002      	b.n	80062f0 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 80062ee:	bf00      	nop
  }

  return lpuart_frequency;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	00f42400 	.word	0x00f42400

08006300 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006306:	f7ff ff41 	bl	800618c <LL_RCC_GetSysClkSource>
 800630a:	4603      	mov	r3, r0
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d851      	bhi.n	80063b4 <RCC_GetSystemClockFreq+0xb4>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <RCC_GetSystemClockFreq+0x18>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800634d 	.word	0x0800634d
 800631c:	080063b5 	.word	0x080063b5
 8006320:	080063b5 	.word	0x080063b5
 8006324:	080063b5 	.word	0x080063b5
 8006328:	080063a1 	.word	0x080063a1
 800632c:	080063b5 	.word	0x080063b5
 8006330:	080063b5 	.word	0x080063b5
 8006334:	080063b5 	.word	0x080063b5
 8006338:	080063a7 	.word	0x080063a7
 800633c:	080063b5 	.word	0x080063b5
 8006340:	080063b5 	.word	0x080063b5
 8006344:	080063b5 	.word	0x080063b5
 8006348:	080063ad 	.word	0x080063ad
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800634c:	f7ff fef0 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d111      	bne.n	800637a <RCC_GetSystemClockFreq+0x7a>
 8006356:	f7ff feeb 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <RCC_GetSystemClockFreq+0x6a>
 8006360:	f7ff fef8 	bl	8006154 <LL_RCC_MSI_GetRange>
 8006364:	4603      	mov	r3, r0
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	e003      	b.n	8006372 <RCC_GetSystemClockFreq+0x72>
 800636a:	f7ff ff01 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 800636e:	4603      	mov	r3, r0
 8006370:	0a1b      	lsrs	r3, r3, #8
 8006372:	4a28      	ldr	r2, [pc, #160]	; (8006414 <RCC_GetSystemClockFreq+0x114>)
 8006374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006378:	e010      	b.n	800639c <RCC_GetSystemClockFreq+0x9c>
 800637a:	f7ff fed9 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <RCC_GetSystemClockFreq+0x8e>
 8006384:	f7ff fee6 	bl	8006154 <LL_RCC_MSI_GetRange>
 8006388:	4603      	mov	r3, r0
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	e003      	b.n	8006396 <RCC_GetSystemClockFreq+0x96>
 800638e:	f7ff feef 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 8006392:	4603      	mov	r3, r0
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <RCC_GetSystemClockFreq+0x114>)
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800639e:	e033      	b.n	8006408 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <RCC_GetSystemClockFreq+0x118>)
 80063a2:	607b      	str	r3, [r7, #4]
      break;
 80063a4:	e030      	b.n	8006408 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <RCC_GetSystemClockFreq+0x11c>)
 80063a8:	607b      	str	r3, [r7, #4]
      break;
 80063aa:	e02d      	b.n	8006408 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80063ac:	f000 f862 	bl	8006474 <RCC_PLL_GetFreqDomain_SYS>
 80063b0:	6078      	str	r0, [r7, #4]
      break;
 80063b2:	e029      	b.n	8006408 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80063b4:	f7ff febc 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d111      	bne.n	80063e2 <RCC_GetSystemClockFreq+0xe2>
 80063be:	f7ff feb7 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <RCC_GetSystemClockFreq+0xd2>
 80063c8:	f7ff fec4 	bl	8006154 <LL_RCC_MSI_GetRange>
 80063cc:	4603      	mov	r3, r0
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	e003      	b.n	80063da <RCC_GetSystemClockFreq+0xda>
 80063d2:	f7ff fecd 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 80063d6:	4603      	mov	r3, r0
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <RCC_GetSystemClockFreq+0x114>)
 80063dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e0:	e010      	b.n	8006404 <RCC_GetSystemClockFreq+0x104>
 80063e2:	f7ff fea5 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <RCC_GetSystemClockFreq+0xf6>
 80063ec:	f7ff feb2 	bl	8006154 <LL_RCC_MSI_GetRange>
 80063f0:	4603      	mov	r3, r0
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	e003      	b.n	80063fe <RCC_GetSystemClockFreq+0xfe>
 80063f6:	f7ff febb 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 80063fa:	4603      	mov	r3, r0
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	4a05      	ldr	r2, [pc, #20]	; (8006414 <RCC_GetSystemClockFreq+0x114>)
 8006400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006404:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006406:	bf00      	nop
  }

  return frequency;
 8006408:	687b      	ldr	r3, [r7, #4]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	080066ac 	.word	0x080066ac
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006428:	f7ff febe 	bl	80061a8 <LL_RCC_GetAHBPrescaler>
 800642c:	4603      	mov	r3, r0
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	4a04      	ldr	r2, [pc, #16]	; (8006448 <RCC_GetHCLKClockFreq+0x28>)
 8006436:	5cd3      	ldrb	r3, [r2, r3]
 8006438:	461a      	mov	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	40d3      	lsrs	r3, r2
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	08006694 	.word	0x08006694

0800644c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006454:	f7ff feb6 	bl	80061c4 <LL_RCC_GetAPB1Prescaler>
 8006458:	4603      	mov	r3, r0
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <RCC_GetPCLK1ClockFreq+0x24>)
 800645e:	5cd3      	ldrb	r3, [r2, r3]
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	40d3      	lsrs	r3, r2
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	080066a4 	.word	0x080066a4

08006474 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800647a:	f7ff fec3 	bl	8006204 <LL_RCC_PLL_GetMainSource>
 800647e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d02d      	beq.n	80064e2 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8006486:	2b03      	cmp	r3, #3
 8006488:	d02e      	beq.n	80064e8 <RCC_PLL_GetFreqDomain_SYS+0x74>
 800648a:	2b01      	cmp	r3, #1
 800648c:	d12f      	bne.n	80064ee <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800648e:	f7ff fe4f 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d111      	bne.n	80064bc <RCC_PLL_GetFreqDomain_SYS+0x48>
 8006498:	f7ff fe4a 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <RCC_PLL_GetFreqDomain_SYS+0x38>
 80064a2:	f7ff fe57 	bl	8006154 <LL_RCC_MSI_GetRange>
 80064a6:	4603      	mov	r3, r0
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	e003      	b.n	80064b4 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80064ac:	f7ff fe60 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 80064b0:	4603      	mov	r3, r0
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80064b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ba:	e010      	b.n	80064de <RCC_PLL_GetFreqDomain_SYS+0x6a>
 80064bc:	f7ff fe38 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80064c6:	f7ff fe45 	bl	8006154 <LL_RCC_MSI_GetRange>
 80064ca:	4603      	mov	r3, r0
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	e003      	b.n	80064d8 <RCC_PLL_GetFreqDomain_SYS+0x64>
 80064d0:	f7ff fe4e 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 80064d4:	4603      	mov	r3, r0
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	4a26      	ldr	r2, [pc, #152]	; (8006574 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80064da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064de:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80064e0:	e02f      	b.n	8006542 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80064e2:	4b25      	ldr	r3, [pc, #148]	; (8006578 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80064e4:	607b      	str	r3, [r7, #4]
      break;
 80064e6:	e02c      	b.n	8006542 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80064e8:	4b24      	ldr	r3, [pc, #144]	; (800657c <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80064ea:	607b      	str	r3, [r7, #4]
      break;
 80064ec:	e029      	b.n	8006542 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80064ee:	f7ff fe1f 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d111      	bne.n	800651c <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80064f8:	f7ff fe1a 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <RCC_PLL_GetFreqDomain_SYS+0x98>
 8006502:	f7ff fe27 	bl	8006154 <LL_RCC_MSI_GetRange>
 8006506:	4603      	mov	r3, r0
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	e003      	b.n	8006514 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 800650c:	f7ff fe30 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 8006510:	4603      	mov	r3, r0
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	4a17      	ldr	r2, [pc, #92]	; (8006574 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8006516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651a:	e010      	b.n	800653e <RCC_PLL_GetFreqDomain_SYS+0xca>
 800651c:	f7ff fe08 	bl	8006130 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8006526:	f7ff fe15 	bl	8006154 <LL_RCC_MSI_GetRange>
 800652a:	4603      	mov	r3, r0
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	e003      	b.n	8006538 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8006530:	f7ff fe1e 	bl	8006170 <LL_RCC_MSI_GetRangeAfterStandby>
 8006534:	4603      	mov	r3, r0
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800653a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006540:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006542:	f7ff fe89 	bl	8006258 <LL_RCC_PLL_GetDivider>
 8006546:	4603      	mov	r3, r0
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	3301      	adds	r3, #1
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	fbb2 f4f3 	udiv	r4, r2, r3
 8006552:	f7ff fe65 	bl	8006220 <LL_RCC_PLL_GetN>
 8006556:	4603      	mov	r3, r0
 8006558:	fb03 f404 	mul.w	r4, r3, r4
 800655c:	f7ff fe6e 	bl	800623c <LL_RCC_PLL_GetR>
 8006560:	4603      	mov	r3, r0
 8006562:	0e5b      	lsrs	r3, r3, #25
 8006564:	3301      	adds	r3, #1
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bd90      	pop	{r4, r7, pc}
 8006574:	080066ac 	.word	0x080066ac
 8006578:	00f42400 	.word	0x00f42400
 800657c:	007a1200 	.word	0x007a1200

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4e0d      	ldr	r6, [pc, #52]	; (80065b8 <__libc_init_array+0x38>)
 8006584:	4c0d      	ldr	r4, [pc, #52]	; (80065bc <__libc_init_array+0x3c>)
 8006586:	1ba4      	subs	r4, r4, r6
 8006588:	10a4      	asrs	r4, r4, #2
 800658a:	2500      	movs	r5, #0
 800658c:	42a5      	cmp	r5, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	4e0b      	ldr	r6, [pc, #44]	; (80065c0 <__libc_init_array+0x40>)
 8006592:	4c0c      	ldr	r4, [pc, #48]	; (80065c4 <__libc_init_array+0x44>)
 8006594:	f000 f820 	bl	80065d8 <_init>
 8006598:	1ba4      	subs	r4, r4, r6
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	2500      	movs	r5, #0
 800659e:	42a5      	cmp	r5, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a8:	4798      	blx	r3
 80065aa:	3501      	adds	r5, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065b2:	4798      	blx	r3
 80065b4:	3501      	adds	r5, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	080066fc 	.word	0x080066fc
 80065bc:	080066fc 	.word	0x080066fc
 80065c0:	080066fc 	.word	0x080066fc
 80065c4:	08006700 	.word	0x08006700

080065c8 <memset>:
 80065c8:	4402      	add	r2, r0
 80065ca:	4603      	mov	r3, r0
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d100      	bne.n	80065d2 <memset+0xa>
 80065d0:	4770      	bx	lr
 80065d2:	f803 1b01 	strb.w	r1, [r3], #1
 80065d6:	e7f9      	b.n	80065cc <memset+0x4>

080065d8 <_init>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr

080065e4 <_fini>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr
