
STM32L4R5ZI-OV7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067fc  080067fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006804  08006804  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800680c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025938  2000000c  08006818  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20025944  08006818  00025944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f40  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002690  00000000  00000000  00031f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00034610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c7cf  00000000  00000000  000364f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d059  00000000  00000000  00062cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001093c5  00000000  00000000  0006fd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001790e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041cc  00000000  00000000  00179160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080066e4 	.word	0x080066e4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080066e4 	.word	0x080066e4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	075b      	lsls	r3, r3, #29
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	609a      	str	r2, [r3, #8]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	065b      	lsls	r3, r3, #25
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	609a      	str	r2, [r3, #8]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f043 0220 	orr.w	r2, r3, #32
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006cc:	4907      	ldr	r1, [pc, #28]	; (80006ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <LL_APB1_GRP2_EnableClock+0x2c>)
 80006fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006fc:	4907      	ldr	r1, [pc, #28]	; (800071c <LL_APB1_GRP2_EnableClock+0x2c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000706:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000

08000720 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <LL_DMA_SetDataTransferDirection+0x4c>)
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4413      	add	r3, r2
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000744:	f023 0310 	bic.w	r3, r3, #16
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <LL_DMA_SetDataTransferDirection+0x4c>)
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	440a      	add	r2, r1
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	4611      	mov	r1, r2
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	440a      	add	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800075e:	bf00      	nop
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	0800673c 	.word	0x0800673c

08000770 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000770:	b480      	push	{r7}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LL_DMA_SetMode+0x48>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f023 0220 	bic.w	r2, r3, #32
 8000794:	4908      	ldr	r1, [pc, #32]	; (80007b8 <LL_DMA_SetMode+0x48>)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	440b      	add	r3, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	440b      	add	r3, r1
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80007aa:	bf00      	nop
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	0800673c 	.word	0x0800673c

080007bc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007e0:	4908      	ldr	r1, [pc, #32]	; (8000804 <LL_DMA_SetPeriphIncMode+0x48>)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	440b      	add	r3, r1
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80007f6:	bf00      	nop
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	0800673c 	.word	0x0800673c

08000808 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LL_DMA_SetMemoryIncMode+0x48>)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800082c:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_DMA_SetMemoryIncMode+0x48>)
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	440b      	add	r3, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	440b      	add	r3, r1
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000842:	bf00      	nop
 8000844:	371c      	adds	r7, #28
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	0800673c 	.word	0x0800673c

08000854 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LL_DMA_SetPeriphSize+0x48>)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	4413      	add	r3, r2
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000878:	4908      	ldr	r1, [pc, #32]	; (800089c <LL_DMA_SetPeriphSize+0x48>)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	440b      	add	r3, r1
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	440b      	add	r3, r1
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4313      	orrs	r3, r2
 800088c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800088e:	bf00      	nop
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	0800673c 	.word	0x0800673c

080008a0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LL_DMA_SetMemorySize+0x48>)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	4413      	add	r3, r2
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80008c4:	4908      	ldr	r1, [pc, #32]	; (80008e8 <LL_DMA_SetMemorySize+0x48>)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	440b      	add	r3, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	440b      	add	r3, r1
 80008d2:	4619      	mov	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008da:	bf00      	nop
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	0800673c 	.word	0x0800673c

080008ec <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000910:	4908      	ldr	r1, [pc, #32]	; (8000934 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	440b      	add	r3, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	440b      	add	r3, r1
 800091e:	4619      	mov	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000926:	bf00      	nop
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	0800673c 	.word	0x0800673c

08000938 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_AES_OUT
  *         @arg @ref LL_DMAMUX_REQ_HASH_IN
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	0a9b      	lsrs	r3, r3, #10
 8000948:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800094c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000950:	461a      	mov	r2, r3
 8000952:	00d2      	lsls	r2, r2, #3
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000964:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	4413      	add	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800097a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	430a      	orrs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	bf00      	nop
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fef5 	bl	8001782 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f848 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 fa0c 	bl	8000db8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a0:	f000 f9d0 	bl	8000d44 <MX_DMA_Init>
  MX_DCMI_Init();
 80009a4:	f000 f8c2 	bl	8000b2c <MX_DCMI_Init>
  MX_I2C2_Init();
 80009a8:	f000 f8f4 	bl	8000b94 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80009ac:	f000 f932 	bl	8000c14 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // i2c_check(); //Implement as part of ov7670 init function?
  ov7670_init();
 80009b0:	f000 fb3e 	bl	8001030 <ov7670_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  ov7670_read(0x0b); // read only register - version number
 80009b4:	200b      	movs	r0, #11
 80009b6:	f000 fadb 	bl	8000f70 <ov7670_read>
  ov7670_reg_check(); // Prints 0xAA and lights Green LED if all registers are sucessfully written
 80009ba:	f000 fb69 	bl	8001090 <ov7670_reg_check>
//		  LL_LPUART_RequestRxDataFlush(LPUART1);
//	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
////	  }
//	  }
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	  if(snap_received)
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <main+0x88>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00e      	beq.n	80009e4 <main+0x54>
	  {
		  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <main+0x8c>)
 80009c8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009cc:	2102      	movs	r1, #2
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <main+0x90>)
 80009d0:	f001 f906 	bl	8001be0 <HAL_DCMI_Start_DMA>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <main+0x94>)
 80009da:	f002 f8d3 	bl	8002b84 <HAL_GPIO_TogglePin>
		  snap_received = false;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <main+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	  }
	//HAL_Delay(3000);

//	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
	/*Button pressed*/ //NOT IN USE ANYMORE
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <main+0x98>)
 80009ea:	f002 f89b 	bl	8002b24 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0e4      	beq.n	80009be <main+0x2e>
	{
	//	HAL_DCMI_Stop(&hdcmi);
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <main+0x94>)
 80009fa:	f002 f8c3 	bl	8002b84 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80009fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a02:	f000 ff33 	bl	800186c <HAL_Delay>
		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <main+0x8c>)
 8000a08:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <main+0x90>)
 8000a10:	f001 f8e6 	bl	8001be0 <HAL_DCMI_Start_DMA>
	  if(snap_received)
 8000a14:	e7d3      	b.n	80009be <main+0x2e>
 8000a16:	bf00      	nop
 8000a18:	20025828 	.word	0x20025828
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	200258d8 	.word	0x200258d8
 8000a24:	48000400 	.word	0x48000400
 8000a28:	48000800 	.word	0x48000800

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0bc      	sub	sp, #240	; 0xf0
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fe4a 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2294      	movs	r2, #148	; 0x94
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fe3c 	bl	80066d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f003 fc99 	bl	8004394 <HAL_PWREx_ControlVoltageScaling>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000a68:	f000 fa7e 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2322      	movs	r3, #34	; 0x22
 8000a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2340      	movs	r3, #64	; 0x40
 8000a82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a98:	231e      	movs	r3, #30
 8000a9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fd21 	bl	80044fc <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fa52 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f92d 	bl	8004d48 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000af4:	f000 fa38 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C2;
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fbca 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000b12:	f000 fa29 	bl	8000f68 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_2);
 8000b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f004 fa3e 	bl	8004fa0 <HAL_RCC_MCOConfig>
}
 8000b24:	bf00      	nop
 8000b26:	37f0      	adds	r7, #240	; 0xf0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <MX_DCMI_Init+0x64>)
 8000b34:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b3e:	2220      	movs	r2, #32
 8000b40:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_DCMI_Init+0x60>)
 8000b7a:	f000 ffab 	bl	8001ad4 <HAL_DCMI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f000 f9f0 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200258d8 	.word	0x200258d8
 8000b90:	50050000 	.word	0x50050000

08000b94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_I2C2_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_I2C2_Init+0x7c>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bd0:	f001 fff2 	bl	8002bb8 <HAL_I2C_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bda:	f000 f9c5 	bl	8000f68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000be2:	f003 fb1f 	bl	8004224 <HAL_I2CEx_ConfigAnalogFilter>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 f9bc 	bl	8000f68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C2_Init+0x74>)
 8000bf4:	f003 fb61 	bl	80042ba <HAL_I2CEx_ConfigDigitalFilter>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 f9b3 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2002582c 	.word	0x2002582c
 8000c0c:	40005800 	.word	0x40005800
 8000c10:	307075b1 	.word	0x307075b1

08000c14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff fd56 	bl	80006f0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000c44:	2040      	movs	r0, #64	; 0x40
 8000c46:	f7ff fd3b 	bl	80006c0 <LL_AHB2_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
 8000c4a:	f003 fc47 	bl	80044dc <HAL_PWREx_EnableVddIO2>
  /**LPUART1 GPIO Configuration
  PG7   ------> LPUART1_TX
  PG8   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8000c4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4832      	ldr	r0, [pc, #200]	; (8000d38 <MX_LPUART1_UART_Init+0x124>)
 8000c6e:	f005 f96a 	bl	8005f46 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_LPUART1_TX);
 8000c72:	2223      	movs	r2, #35	; 0x23
 8000c74:	2100      	movs	r1, #0
 8000c76:	4831      	ldr	r0, [pc, #196]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000c78:	f7ff fe5e 	bl	8000938 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000c7c:	2210      	movs	r2, #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	482e      	ldr	r0, [pc, #184]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000c82:	f7ff fd4d 	bl	8000720 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	482b      	ldr	r0, [pc, #172]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000c8e:	f7ff fe2d 	bl	80008ec <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000c98:	f7ff fd6a 	bl	8000770 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000ca2:	f7ff fd8b 	bl	80007bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000cac:	f7ff fdac 	bl	8000808 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000cb6:	f7ff fdcd 	bl	8000854 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <MX_LPUART1_UART_Init+0x128>)
 8000cc0:	f7ff fdee 	bl	80008a0 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cc4:	f7ff fc1a 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fc6a 	bl	80005a8 <NVIC_EncodePriority>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2046      	movs	r0, #70	; 0x46
 8000cda:	f7ff fc3b 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8000cde:	2046      	movs	r0, #70	; 0x46
 8000ce0:	f7ff fc1a 	bl	8000518 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 921600;
 8000ce8:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000cec:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d0a:	f005 fa23 	bl	8006154 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d12:	f7ff fc9c 	bl	800064e <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000d16:	2100      	movs	r1, #0
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d1a:	f7ff fcac 	bl	8000676 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d20:	f7ff fc85 	bl	800062e <LL_LPUART_DisableFIFO>
    LL_LPUART_EnableIT_RXNE(LPUART1);
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d26:	f7ff fcba 	bl	800069e <LL_LPUART_EnableIT_RXNE_RXFNE>
  LL_LPUART_Enable(LPUART1);
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_LPUART1_UART_Init+0x12c>)
 8000d2c:	f7ff fc6f 	bl	800060e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3738      	adds	r7, #56	; 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48001800 	.word	0x48001800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40008000 	.word	0x40008000

08000d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6493      	str	r3, [r2, #72]	; 0x48
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_DMA_Init+0x70>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d7a:	f7ff fbbf 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fc0f 	bl	80005a8 <NVIC_EncodePriority>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	200b      	movs	r0, #11
 8000d90:	f7ff fbe0 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d94:	200b      	movs	r0, #11
 8000d96:	f7ff fbbf 	bl	8000518 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	200c      	movs	r0, #12
 8000da0:	f000 fe61 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000da4:	200c      	movs	r0, #12
 8000da6:	f000 fe7a 	bl	8001a9e <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a59      	ldr	r2, [pc, #356]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a53      	ldr	r2, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a4d      	ldr	r2, [pc, #308]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e04:	f043 0320 	orr.w	r3, r3, #32
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0320 	and.w	r3, r3, #32
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a47      	ldr	r2, [pc, #284]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b42      	ldr	r3, [pc, #264]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a41      	ldr	r2, [pc, #260]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e5e:	f003 fb3d 	bl	80044dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <MX_GPIO_Init+0x180>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <MX_GPIO_Init+0x184>)
 8000e82:	f001 fe67 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	482d      	ldr	r0, [pc, #180]	; (8000f40 <MX_GPIO_Init+0x188>)
 8000e8c:	f001 fe62 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2102      	movs	r1, #2
 8000e94:	482b      	ldr	r0, [pc, #172]	; (8000f44 <MX_GPIO_Init+0x18c>)
 8000e96:	f001 fe5d 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4824      	ldr	r0, [pc, #144]	; (8000f40 <MX_GPIO_Init+0x188>)
 8000eb0:	f001 fca6 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481b      	ldr	r0, [pc, #108]	; (8000f3c <MX_GPIO_Init+0x184>)
 8000ece:	f001 fc97 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4815      	ldr	r0, [pc, #84]	; (8000f40 <MX_GPIO_Init+0x188>)
 8000eea:	f001 fc89 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f001 fc77 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_GPIO_Init+0x18c>)
 8000f2a:	f001 fc69 	bl	8002800 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48001000 	.word	0x48001000

08000f48 <HAL_DCMI_FrameEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_FrameEventCallback() callback can be implemented in the user file.
   */
  Serial_com(&frame_buffer[0], RGB565_QVGA_SIZE_8BIT); //Send the Frame buffer to PC
 8000f50:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000f56:	f000 fbc7 	bl	80016e8 <Serial_com>


}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000028 	.word	0x20000028

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <Error_Handler+0x6>

08000f70 <ov7670_read>:
extern DCMI_HandleTypeDef hdcmi;



void ov7670_read(uint8_t reg_addr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 8000f7e:	1dfa      	adds	r2, r7, #7
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	2142      	movs	r1, #66	; 0x42
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <ov7670_read+0x44>)
 8000f8a:	f001 fea5 	bl	8002cd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2142      	movs	r1, #66	; 0x42
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <ov7670_read+0x44>)
 8000f9c:	f001 ff90 	bl	8002ec0 <HAL_I2C_Master_Receive>
	Serial_com(&buffer[0], 1);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fb9e 	bl	80016e8 <Serial_com>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2002582c 	.word	0x2002582c

08000fb8 <ov7670_write>:

void ov7670_write(uint8_t reg_addr, uint8_t data)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, OV7670_WRITE_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT , &data, 1, 100); // I2C_MEMADD_SIZE_8BIT is defined in the HAL library
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	1dbb      	adds	r3, r7, #6
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2142      	movs	r1, #66	; 0x42
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <ov7670_write+0x34>)
 8000fde:	f002 f865 	bl	80030ac <HAL_I2C_Mem_Write>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2002582c 	.word	0x2002582c

08000ff0 <ov7670_read_return>:

uint8_t ov7670_read_return(uint8_t reg_addr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	2142      	movs	r1, #66	; 0x42
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <ov7670_read_return+0x3c>)
 800100a:	f001 fe65 	bl	8002cd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	2142      	movs	r1, #66	; 0x42
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <ov7670_read_return+0x3c>)
 800101c:	f001 ff50 	bl	8002ec0 <HAL_I2C_Master_Receive>
	return buffer[0];
 8001020:	7b3b      	ldrb	r3, [r7, #12]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2002582c 	.word	0x2002582c

08001030 <ov7670_init>:
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(100);
}

void ov7670_init()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  //ov7670_hard_reset();
  ov7670_write(0x12, 0x80);  // soft reset
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	2012      	movs	r0, #18
 800103a:	f7ff ffbd 	bl	8000fb8 <ov7670_write>
  HAL_Delay(500);			 // Needs a delay after reset otherwise all registers remain 0x00 after writing them
 800103e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001042:	f000 fc13 	bl	800186c <HAL_Delay>

  // Configure camera
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e011      	b.n	8001070 <ov7670_init+0x40>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <ov7670_init+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <ov7670_init+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff ffaa 	bl	8000fb8 <ov7670_write>
    HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fc01 	bl	800186c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3301      	adds	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <ov7670_init+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001078:	2bff      	cmp	r3, #255	; 0xff
 800107a:	d1e7      	bne.n	800104c <ov7670_init+0x1c>
  }
  HAL_Delay(500);
 800107c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001080:	f000 fbf4 	bl	800186c <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	08006744 	.word	0x08006744

08001090 <ov7670_reg_check>:
	HAL_Delay(1000);
  }
}

void ov7670_reg_check()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 uint8_t buffer[1] = {00};
 8001096:	2300      	movs	r3, #0
 8001098:	713b      	strb	r3, [r7, #4]
 uint8_t counter = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 uint8_t tot_reg_num = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e01b      	b.n	80010e0 <ov7670_reg_check+0x50>
	 tot_reg_num++;
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	3301      	adds	r3, #1
 80010ac:	73bb      	strb	r3, [r7, #14]
	if (ov7670_read_return(OV7670_reg[i][0]) == OV7670_reg[i][1])
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <ov7670_reg_check+0xa0>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff9a 	bl	8000ff0 <ov7670_read_return>
 80010bc:	4603      	mov	r3, r0
 80010be:	4619      	mov	r1, r3
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <ov7670_reg_check+0xa0>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d102      	bne.n	80010d4 <ov7670_reg_check+0x44>
	{
		counter++;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
	}
	HAL_Delay(10);
 80010d4:	200a      	movs	r0, #10
 80010d6:	f000 fbc9 	bl	800186c <HAL_Delay>
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3301      	adds	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <ov7670_reg_check+0xa0>)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010e8:	2bff      	cmp	r3, #255	; 0xff
 80010ea:	d1dd      	bne.n	80010a8 <ov7670_reg_check+0x18>
  }
 if (counter == tot_reg_num)
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d10c      	bne.n	800110e <ov7670_reg_check+0x7e>
 {
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <ov7670_reg_check+0xa4>)
 80010fa:	f001 fd2b 	bl	8002b54 <HAL_GPIO_WritePin>
	 buffer[0] = 0xAA;
 80010fe:	23aa      	movs	r3, #170	; 0xaa
 8001100:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f000 faee 	bl	80016e8 <Serial_com>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
	 buffer[0] = 0xFA;
	 Serial_com(&buffer[0], 1);
	 //HAL_UART_Transmit(&hlpuart1, buffer, 1, 10);
 }
}
 800110c:	e00b      	b.n	8001126 <ov7670_reg_check+0x96>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <ov7670_reg_check+0xa4>)
 8001114:	f001 fd1e 	bl	8002b54 <HAL_GPIO_WritePin>
	 buffer[0] = 0xFA;
 8001118:	23fa      	movs	r3, #250	; 0xfa
 800111a:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2101      	movs	r1, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fae1 	bl	80016e8 <Serial_com>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08006744 	.word	0x08006744
 8001134:	48000800 	.word	0x48000800

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x44>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x44>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x44>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x44>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6593      	str	r3, [r2, #88]	; 0x58
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <HAL_DCMI_MspInit+0x230>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	f040 8101 	bne.w	80013a6 <HAL_DCMI_MspInit+0x226>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011a4:	4b83      	ldr	r3, [pc, #524]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a82      	ldr	r2, [pc, #520]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011bc:	4b7d      	ldr	r3, [pc, #500]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a7c      	ldr	r2, [pc, #496]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a76      	ldr	r2, [pc, #472]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ec:	4b71      	ldr	r3, [pc, #452]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a70      	ldr	r2, [pc, #448]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b6e      	ldr	r3, [pc, #440]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001204:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a6a      	ldr	r2, [pc, #424]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <HAL_DCMI_MspInit+0x234>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PA10     ------> DCMI_D1
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001234:	2370      	movs	r3, #112	; 0x70
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123c:	2302      	movs	r3, #2
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001244:	230a      	movs	r3, #10
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	485a      	ldr	r0, [pc, #360]	; (80013b8 <HAL_DCMI_MspInit+0x238>)
 8001250:	f001 fad6 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001254:	2310      	movs	r3, #16
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125c:	2302      	movs	r3, #2
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001264:	230a      	movs	r3, #10
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 fac5 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001276:	2340      	movs	r3, #64	; 0x40
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800127e:	2302      	movs	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001286:	2304      	movs	r3, #4
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fab4 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001298:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a2:	2302      	movs	r3, #2
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012aa:	230a      	movs	r3, #10
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4841      	ldr	r0, [pc, #260]	; (80013bc <HAL_DCMI_MspInit+0x23c>)
 80012b6:	f001 faa3 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80012cc:	2304      	movs	r3, #4
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4839      	ldr	r0, [pc, #228]	; (80013bc <HAL_DCMI_MspInit+0x23c>)
 80012d8:	f001 fa92 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_DCMI;
 80012ee:	2305      	movs	r3, #5
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f001 fa80 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001300:	2308      	movs	r3, #8
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001308:	2302      	movs	r3, #2
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001310:	2304      	movs	r3, #4
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4829      	ldr	r0, [pc, #164]	; (80013c0 <HAL_DCMI_MspInit+0x240>)
 800131c:	f001 fa70 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001328:	2302      	movs	r3, #2
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001330:	230a      	movs	r3, #10
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <HAL_DCMI_MspInit+0x244>)
 800133c:	f001 fa60 	bl	8002800 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Channel2;
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_DCMI_MspInit+0x24c>)
 8001344:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001348:	225a      	movs	r2, #90	; 0x5a
 800134a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800137a:	4813      	ldr	r0, [pc, #76]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 800137c:	f000 ff60 	bl	8002240 <HAL_DMA_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_DCMI_MspInit+0x20a>
    {
      Error_Handler();
 8001386:	f7ff fdef 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_DCMI_MspInit+0x248>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6293      	str	r3, [r2, #40]	; 0x28

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2055      	movs	r0, #85	; 0x55
 800139c:	f000 fb63 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80013a0:	2055      	movs	r0, #85	; 0x55
 80013a2:	f000 fb7c 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	; 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	50050000 	.word	0x50050000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48001000 	.word	0x48001000
 80013bc:	48000800 	.word	0x48000800
 80013c0:	48000c00 	.word	0x48000c00
 80013c4:	48000400 	.word	0x48000400
 80013c8:	20025878 	.word	0x20025878
 80013cc:	4002001c 	.word	0x4002001c

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_I2C_MspInit+0x9c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d137      	bne.n	8001462 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800140a:	2303      	movs	r3, #3
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800141a:	2304      	movs	r3, #4
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <HAL_I2C_MspInit+0xa4>)
 8001426:	f001 f9eb 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 8001430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_I2C_MspInit+0xa0>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2021      	movs	r0, #33	; 0x21
 8001448:	f000 fb0d 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800144c:	2021      	movs	r0, #33	; 0x21
 800144e:	f000 fb26 	bl	8001a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2022      	movs	r0, #34	; 0x22
 8001458:	f000 fb05 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800145c:	2022      	movs	r0, #34	; 0x22
 800145e:	f000 fb1e 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40005800 	.word	0x40005800
 8001470:	40021000 	.word	0x40021000
 8001474:	48001400 	.word	0x48001400

08001478 <LL_LPUART_IsActiveFlag_ORE>:
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b08      	cmp	r3, #8
 800148a:	d101      	bne.n	8001490 <LL_LPUART_IsActiveFlag_ORE+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_LPUART_IsActiveFlag_ORE+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_LPUART_IsActiveFlag_RXNE_RXFNE>:
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d101      	bne.n	80014b6 <LL_LPUART_IsActiveFlag_RXNE_RXFNE+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_LPUART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_LPUART_ClearFlag_ORE>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2208      	movs	r2, #8
 80014d0:	621a      	str	r2, [r3, #32]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d101      	bne.n	80014f6 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(USART_TypeDef *LPUARTx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001510:	b29b      	uxth	r3, r3
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f95e 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
////
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Channel2_IRQHandler+0x10>)
 800158a:	f000 ffdb 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20025878 	.word	0x20025878

08001598 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <I2C2_EV_IRQHandler+0x10>)
 800159e:	f001 fe99 	bl	80032d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2002582c 	.word	0x2002582c

080015ac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <I2C2_ER_IRQHandler+0x10>)
 80015b2:	f001 fea9 	bl	8003308 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2002582c 	.word	0x2002582c

080015c0 <LPUART1_IRQHandler>:
/**
  * @brief This function handles LPUART1 global interrupt.
  */
uint8_t test2;
void LPUART1_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN LPUART1_IRQn 0 */

	    // receive
	    if (LL_LPUART_IsActiveFlag_RXNE(LPUART1) && LL_LPUART_IsEnabledIT_RXNE(LPUART1))
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <LPUART1_IRQHandler+0x54>)
 80015c6:	f7ff ff6a 	bl	800149e <LL_LPUART_IsActiveFlag_RXNE_RXFNE>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <LPUART1_IRQHandler+0x38>
 80015d0:	4810      	ldr	r0, [pc, #64]	; (8001614 <LPUART1_IRQHandler+0x54>)
 80015d2:	f7ff ff84 	bl	80014de <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00d      	beq.n	80015f8 <LPUART1_IRQHandler+0x38>
	    {
	    	test2 = LL_LPUART_ReceiveData8(LPUART1);
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LPUART1_IRQHandler+0x54>)
 80015de:	f7ff ff91 	bl	8001504 <LL_LPUART_ReceiveData8>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LPUART1_IRQHandler+0x58>)
 80015e8:	701a      	strb	r2, [r3, #0]
	        if (test2 == 's')
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LPUART1_IRQHandler+0x58>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b73      	cmp	r3, #115	; 0x73
 80015f0:	d102      	bne.n	80015f8 <LPUART1_IRQHandler+0x38>
	        {
	        	snap_received = true;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <LPUART1_IRQHandler+0x5c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
	        }

	    }
	    // overrun error
	        if (LL_LPUART_IsActiveFlag_ORE(LPUART1))
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <LPUART1_IRQHandler+0x54>)
 80015fa:	f7ff ff3d 	bl	8001478 <LL_LPUART_IsActiveFlag_ORE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <LPUART1_IRQHandler+0x50>
	        {
	            LL_LPUART_ReceiveData8(LPUART1);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <LPUART1_IRQHandler+0x54>)
 8001606:	f7ff ff7d 	bl	8001504 <LL_LPUART_ReceiveData8>
	            LL_LPUART_ClearFlag_ORE(LPUART1);
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <LPUART1_IRQHandler+0x54>)
 800160c:	f7ff ff5a 	bl	80014c4 <LL_LPUART_ClearFlag_ORE>
	        }
  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40008000 	.word	0x40008000
 8001618:	2002593c 	.word	0x2002593c
 800161c:	20025828 	.word	0x20025828

08001620 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DCMI_IRQHandler+0x10>)
 8001626:	f000 fbb1 	bl	8001d8c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200258d8 	.word	0x200258d8

08001634 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <SystemInit+0x64>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <SystemInit+0x64>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <SystemInit+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <SystemInit+0x68>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <SystemInit+0x68>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <SystemInit+0x68>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <SystemInit+0x68>)
 8001660:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001664:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001668:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <SystemInit+0x68>)
 800166c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001670:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <SystemInit+0x68>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <SystemInit+0x68>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <SystemInit+0x68>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SystemInit+0x64>)
 8001686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168a:	609a      	str	r2, [r3, #8]
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00
 800169c:	40021000 	.word	0x40021000

080016a0 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b0:	2b80      	cmp	r3, #128	; 0x80
 80016b2:	d101      	bne.n	80016b8 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <Serial_com>:
 */


#include "uart.h"

void Serial_com(uint8_t *s, uint32_t size) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 80016f6:	e011      	b.n	800171c <Serial_com+0x34>
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1))
 80016f8:	bf00      	nop
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <Serial_com+0x44>)
 80016fc:	f7ff ffd0 	bl	80016a0 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f9      	beq.n	80016fa <Serial_com+0x12>
			; // Wait for Empty
		LL_LPUART_TransmitData8(LPUART1, *s++);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <Serial_com+0x44>)
 8001712:	f7ff ffd8 	bl	80016c6 <LL_LPUART_TransmitData8>
		counter++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3e9      	bcc.n	80016f8 <Serial_com+0x10>
	}
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40008000 	.word	0x40008000

08001730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001734:	f7ff ff7e 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800173a:	e003      	b.n	8001744 <LoopCopyDataInit>

0800173c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800173e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001742:	3104      	adds	r1, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001744:	480a      	ldr	r0, [pc, #40]	; (8001770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800174a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800174c:	d3f6      	bcc.n	800173c <CopyDataInit>
	ldr	r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001750:	e002      	b.n	8001758 <LoopFillZerobss>

08001752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001754:	f842 3b04 	str.w	r3, [r2], #4

08001758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <LoopForever+0x16>)
	cmp	r2, r3
 800175a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800175c:	d3f9      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f004 ff95 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001762:	f7ff f915 	bl	8000990 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001768:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800176c:	0800680c 	.word	0x0800680c
	ldr	r0, =_sdata
 8001770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001774:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001778:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800177c:	20025944 	.word	0x20025944

08001780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_IRQHandler>

08001782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f95f 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f80e 	bl	80017b4 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	e001      	b.n	80017a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a4:	f7ff fcc8 	bl	8001138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_InitTick+0x6c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d023      	beq.n	8001810 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_InitTick+0x70>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f96b 	bl	8001aba <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d809      	bhi.n	8001804 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f935 	bl	8001a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_InitTick+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e007      	b.n	8001814 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e004      	b.n	8001814 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e001      	b.n	8001814 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	20025940 	.word	0x20025940

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20025940 	.word	0x20025940

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_Delay+0x40>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008

080018b0 <__NVIC_SetPriorityGrouping>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e075      	b.n	8001bd2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fb40 	bl	8001180 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b16:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_DCMI_Init+0x108>)
 8001b32:	400b      	ands	r3, r1
 8001b34:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b4a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001b56:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001b62:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001b6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001b7a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d112      	bne.n	8001bb2 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7f1b      	ldrb	r3, [r3, #28]
 8001b90:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7f5b      	ldrb	r3, [r3, #29]
 8001b96:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001b98:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7f9b      	ldrb	r3, [r3, #30]
 8001b9e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001ba0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7fdb      	ldrb	r3, [r3, #31]
 8001ba8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001bae:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001bb0:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 021f 	orr.w	r2, r2, #31
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	ffe0f007 	.word	0xffe0f007

08001be0 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_DCMI_Start_DMA+0x1c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0bc      	b.n	8001d76 <HAL_DCMI_Start_DMA+0x196>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c16:	f023 0302 	bic.w	r3, r3, #2
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c26:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2c:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <HAL_DCMI_Start_DMA+0x1a0>)
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_DCMI_Start_DMA+0x1a4>)
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d21f      	bcs.n	8001c88 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3328      	adds	r3, #40	; 0x28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f000 fb97 	bl	8002390 <HAL_DMA_Start_IT>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d079      	beq.n	8001d5c <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e076      	b.n	8001d76 <HAL_DCMI_Start_DMA+0x196>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c94:	4a3c      	ldr	r2, [pc, #240]	; (8001d88 <HAL_DCMI_Start_DMA+0x1a8>)
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8001ca4:	6838      	ldr	r0, [r7, #0]
 8001ca6:	f000 fa07 	bl	80020b8 <DCMI_TransferSize>
 8001caa:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e057      	b.n	8001d76 <HAL_DCMI_Start_DMA+0x196>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	005a      	lsls	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	085a      	lsrs	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d04:	6839      	ldr	r1, [r7, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d10:	3b01      	subs	r3, #1
 8001d12:	6979      	ldr	r1, [r7, #20]
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3328      	adds	r3, #40	; 0x28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f000 fb2d 	bl	8002390 <HAL_DMA_Start_IT>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00f      	beq.n	8001d5c <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00c      	b.n	8001d76 <HAL_DCMI_Start_DMA+0x196>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08001ec1 	.word	0x08001ec1
 8001d84:	08002089 	.word	0x08002089
 8001d88:	08001ff1 	.word	0x08001ff1

08001d8c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2204      	movs	r2, #4
 8001dac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d014      	beq.n	8001e0a <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_DCMI_IRQHandler+0xf4>)
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fb46 	bl	8002486 <HAL_DMA_Abort_IT>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f93f 	bl	8002088 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f83b 	bl	8001e98 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2208      	movs	r2, #8
 8001e32:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f839 	bl	8001eac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d019      	beq.n	8001e78 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d10b      	bne.n	8001e6a <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 021e 	bic.w	r2, r2, #30
 8001e60:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f868 	bl	8000f48 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	08002089 	.word	0x08002089

08001e84 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_LineEventCallback() callback can be implemented in the user file.
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_VsyncEventCallback() callback can be implemented in the user file.
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d05c      	beq.n	8001f90 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10c      	bne.n	8001efc <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001efa:	e075      	b.n	8001fe8 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	1ad2      	subs	r2, r2, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001f5c:	6979      	ldr	r1, [r7, #20]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f000 fa15 	bl	8002390 <HAL_DMA_Start_IT>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03d      	beq.n	8001fe8 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8001f88:	69f8      	ldr	r0, [r7, #28]
 8001f8a:	f7ff ff7b 	bl	8001e84 <HAL_DCMI_ErrorCallback>
}
 8001f8e:	e02b      	b.n	8001fe8 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d124      	bne.n	8001fe8 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01d      	beq.n	8001fe8 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d10f      	bne.n	8001fe2 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 021e 	bic.w	r2, r2, #30
 8001fd0:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8001fe2:	69f8      	ldr	r0, [r7, #28]
 8001fe4:	f7fe ffb0 	bl	8000f48 <HAL_DCMI_FrameEventCallback>
}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03c      	beq.n	8002080 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800200e:	4293      	cmp	r3, r2
 8002010:	d036      	beq.n	8002080 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	1e5a      	subs	r2, r3, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f000 f99c 	bl	8002390 <HAL_DMA_Start_IT>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff02 	bl	8001e84 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff feea 	bl	8001e84 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b0a6      	sub	sp, #152	; 0x98
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t temp = InputSize;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t aPrime[NPRIME] = {0};
 80020cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fafd 	bl	80066d4 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t PrimeArray[NPRIME] = { 1UL,  2UL,  3UL,  5UL,
 80020e0:	4b56      	ldr	r3, [pc, #344]	; (800223c <DCMI_TransferSize+0x184>)
 80020e2:	f107 040c 	add.w	r4, r7, #12
 80020e6:	461d      	mov	r5, r3
 80020e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 80020fc:	e041      	b.n	8002182 <DCMI_TransferSize+0xca>
  {
    if (temp < PrimeArray[j])
 80020fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002108:	4413      	add	r3, r2
 800210a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800210e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002112:	429a      	cmp	r2, r3
 8002114:	d33a      	bcc.n	800218c <DCMI_TransferSize+0xd4>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 8002116:	e01e      	b.n	8002156 <DCMI_TransferSize+0x9e>
    {
      aPrime[j]++;
 8002118:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002122:	4413      	add	r3, r2
 8002124:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002134:	440b      	add	r3, r1
 8002136:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 800213a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002144:	4413      	add	r3, r2
 8002146:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800214a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while ((temp % PrimeArray[j]) == 0U)
 8002156:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002160:	4413      	add	r3, r2
 8002162:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 8002166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800216a:	fbb3 f1f2 	udiv	r1, r3, r2
 800216e:	fb02 f201 	mul.w	r2, r2, r1
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0cf      	beq.n	8002118 <DCMI_TransferSize+0x60>
    }
    j++;
 8002178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800217c:	3301      	adds	r3, #1
 800217e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while (j < NPRIME)
 8002182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002186:	2b0f      	cmp	r3, #15
 8002188:	d9b9      	bls.n	80020fe <DCMI_TransferSize+0x46>
 800218a:	e000      	b.n	800218e <DCMI_TransferSize+0xd6>
      break;
 800218c:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count dividor 2 twice */
 800218e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002190:	3b01      	subs	r3, #1
 8002192:	653b      	str	r3, [r7, #80]	; 0x50

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8002194:	230f      	movs	r3, #15
 8002196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 800219a:	e03f      	b.n	800221c <DCMI_TransferSize+0x164>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 800219c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80021a6:	4413      	add	r3, r2
 80021a8:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80021ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d829      	bhi.n	8002210 <DCMI_TransferSize+0x158>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80021bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80021c6:	4413      	add	r3, r2
 80021c8:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 80021cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        aPrime[j]--;
 80021d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80021e2:	4413      	add	r3, r2
 80021e4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80021f4:	440b      	add	r3, r1
 80021f6:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 80021fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002204:	4413      	add	r3, r2
 8002206:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1c6      	bne.n	800219c <DCMI_TransferSize+0xe4>
 800220e:	e000      	b.n	8002212 <DCMI_TransferSize+0x15a>
        break;
 8002210:	bf00      	nop
      }
    }
    j--;
 8002212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002216:	3b01      	subs	r3, #1
 8002218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 800221c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <DCMI_TransferSize+0x178>
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800222c:	4293      	cmp	r3, r2
 800222e:	d9e4      	bls.n	80021fa <DCMI_TransferSize+0x142>
  }



  return output;
 8002230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8002234:	4618      	mov	r0, r3
 8002236:	3798      	adds	r7, #152	; 0x98
 8002238:	46bd      	mov	sp, r7
 800223a:	bdb0      	pop	{r4, r5, r7, pc}
 800223c:	080066fc 	.word	0x080066fc

08002240 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e08d      	b.n	800236e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_DMA_Init+0x138>)
 800225a:	429a      	cmp	r2, r3
 800225c:	d80f      	bhi.n	800227e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_DMA_Init+0x13c>)
 8002266:	4413      	add	r3, r2
 8002268:	4a45      	ldr	r2, [pc, #276]	; (8002380 <HAL_DMA_Init+0x140>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_DMA_Init+0x144>)
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
 800227c:	e00e      	b.n	800229c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b40      	ldr	r3, [pc, #256]	; (8002388 <HAL_DMA_Init+0x148>)
 8002286:	4413      	add	r3, r2
 8002288:	4a3d      	ldr	r2, [pc, #244]	; (8002380 <HAL_DMA_Init+0x140>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	009a      	lsls	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a3c      	ldr	r2, [pc, #240]	; (800238c <HAL_DMA_Init+0x14c>)
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fa24 	bl	800273c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022fc:	d102      	bne.n	8002304 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002318:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_DMA_Init+0x104>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b04      	cmp	r3, #4
 8002328:	d80c      	bhi.n	8002344 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa44 	bl	80027b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e008      	b.n	8002356 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020407 	.word	0x40020407
 800237c:	bffdfff8 	.word	0xbffdfff8
 8002380:	cccccccd 	.word	0xcccccccd
 8002384:	40020000 	.word	0x40020000
 8002388:	bffdfbf8 	.word	0xbffdfbf8
 800238c:	40020400 	.word	0x40020400

08002390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Start_IT+0x20>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e066      	b.n	800247e <HAL_DMA_Start_IT+0xee>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d155      	bne.n	8002470 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f968 	bl	80026be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 020e 	orr.w	r2, r2, #14
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e00f      	b.n	8002428 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0204 	bic.w	r2, r2, #4
 8002416:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 020a 	orr.w	r2, r2, #10
 8002426:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002444:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e005      	b.n	800247c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d005      	beq.n	80024aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e047      	b.n	800253a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 020e 	bic.w	r2, r2, #14
 80024b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 021c 	and.w	r2, r3, #28
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024f6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800250e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002518:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4798      	blx	r3
    }
  }
  return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f003 031c 	and.w	r3, r3, #28
 8002564:	2204      	movs	r2, #4
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d026      	beq.n	80025be <HAL_DMA_IRQHandler+0x7a>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d021      	beq.n	80025be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f003 021c 	and.w	r2, r3, #28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2104      	movs	r1, #4
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d071      	beq.n	8002698 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	e06c      	b.n	8002698 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f003 031c 	and.w	r3, r3, #28
 80025c6:	2202      	movs	r2, #2
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02e      	beq.n	8002630 <HAL_DMA_IRQHandler+0xec>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d029      	beq.n	8002630 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 020a 	bic.w	r2, r2, #10
 80025f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f003 021c 	and.w	r2, r3, #28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2102      	movs	r1, #2
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d038      	beq.n	8002698 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800262e:	e033      	b.n	8002698 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f003 031c 	and.w	r3, r3, #28
 8002638:	2208      	movs	r2, #8
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d02a      	beq.n	800269a <HAL_DMA_IRQHandler+0x156>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d025      	beq.n	800269a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 020e 	bic.w	r2, r2, #14
 800265c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 021c 	and.w	r2, r3, #28
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002698:	bf00      	nop
 800269a:	bf00      	nop
}
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026b0:	b2db      	uxtb	r3, r3
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026d4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026e6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 021c 	and.w	r2, r3, #28
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b10      	cmp	r3, #16
 800270a:	d108      	bne.n	800271e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800271c:	e007      	b.n	800272e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	60da      	str	r2, [r3, #12]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800274c:	429a      	cmp	r2, r3
 800274e:	d80a      	bhi.n	8002766 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800275c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6493      	str	r3, [r2, #72]	; 0x48
 8002764:	e007      	b.n	8002776 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002770:	4413      	add	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3b08      	subs	r3, #8
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2201      	movs	r2, #1
 8002796:	409a      	lsls	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40020407 	.word	0x40020407
 80027ac:	4002081c 	.word	0x4002081c
 80027b0:	cccccccd 	.word	0xcccccccd
 80027b4:	40020880 	.word	0x40020880

080027b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a08      	ldr	r2, [pc, #32]	; (80027fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80027da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	1000823f 	.word	0x1000823f
 80027fc:	40020940 	.word	0x40020940

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e166      	b.n	8002ade <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8158 	beq.w	8002ad8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00b      	beq.n	8002848 <HAL_GPIO_Init+0x48>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800283c:	2b11      	cmp	r3, #17
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b12      	cmp	r3, #18
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0xea>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d123      	bne.n	8002932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	6939      	ldr	r1, [r7, #16]
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80b2 	beq.w	8002ad8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <HAL_GPIO_Init+0x2fc>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002978:	4a60      	ldr	r2, [pc, #384]	; (8002afc <HAL_GPIO_Init+0x2fc>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6613      	str	r3, [r2, #96]	; 0x60
 8002980:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HAL_GPIO_Init+0x2fc>)
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800298c:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_GPIO_Init+0x300>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029b6:	d02b      	beq.n	8002a10 <HAL_GPIO_Init+0x210>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x304>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d025      	beq.n	8002a0c <HAL_GPIO_Init+0x20c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x308>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01f      	beq.n	8002a08 <HAL_GPIO_Init+0x208>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x30c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d019      	beq.n	8002a04 <HAL_GPIO_Init+0x204>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x310>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x200>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x314>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1fc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x318>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1f8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_GPIO_Init+0x31c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1f4>
 80029f0:	2307      	movs	r3, #7
 80029f2:	e00e      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f4:	2308      	movs	r3, #8
 80029f6:	e00c      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f8:	2306      	movs	r3, #6
 80029fa:	e00a      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029fc:	2305      	movs	r3, #5
 80029fe:	e008      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a04:	2303      	movs	r3, #3
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a10:	2300      	movs	r3, #0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a22:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_GPIO_Init+0x300>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a30:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a54:	4a32      	ldr	r2, [pc, #200]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_GPIO_Init+0x320>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f ae91 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010000 	.word	0x40010000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	48000c00 	.word	0x48000c00
 8002b10:	48001000 	.word	0x48001000
 8002b14:	48001400 	.word	0x48001400
 8002b18:	48001800 	.word	0x48001800
 8002b1c:	48001c00 	.word	0x48001c00
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43d9      	mvns	r1, r3
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e081      	b.n	8002cce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fbf6 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d104      	bne.n	8002c52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	ea42 0103 	orr.w	r1, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	817b      	strh	r3, [r7, #10]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	f040 80da 	bne.w	8002eae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x30>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0d3      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe fda0 	bl	8001854 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2319      	movs	r3, #25
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f001 f863 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0be      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	; 0x21
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2bff      	cmp	r3, #255	; 0xff
 8002d62:	d90e      	bls.n	8002d82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f001 f9c6 	bl	800410c <I2C_TransferConfig>
 8002d80:	e06c      	b.n	8002e5c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f001 f9b5 	bl	800410c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002da2:	e05b      	b.n	8002e5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f001 f860 	bl	8003e6e <I2C_WaitOnTXISFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e07b      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d034      	beq.n	8002e5c <HAL_I2C_Master_Transmit+0x184>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d130      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fff2 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e04d      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d90e      	bls.n	8002e3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	22ff      	movs	r2, #255	; 0xff
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f001 f969 	bl	800410c <I2C_TransferConfig>
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	8979      	ldrh	r1, [r7, #10]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f001 f958 	bl	800410c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d19e      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	6a39      	ldr	r1, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f001 f83f 	bl	8003eee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e01a      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_I2C_Master_Transmit+0x1e4>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	80002000 	.word	0x80002000
 8002ebc:	fe00e800 	.word	0xfe00e800

08002ec0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	f040 80db 	bne.w	8003098 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2C_Master_Receive+0x30>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0d4      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fe fcac 	bl	8001854 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2319      	movs	r3, #25
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 ff6f 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0bf      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2222      	movs	r2, #34	; 0x22
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2bff      	cmp	r3, #255	; 0xff
 8002f4a:	d90e      	bls.n	8002f6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_I2C_Master_Receive+0x1e4>)
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f001 f8d2 	bl	800410c <I2C_TransferConfig>
 8002f68:	e06d      	b.n	8003046 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_I2C_Master_Receive+0x1e4>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f001 f8c1 	bl	800410c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002f8a:	e05c      	b.n	8003046 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 ffe9 	bl	8003f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07c      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d034      	beq.n	8003046 <HAL_I2C_Master_Receive+0x186>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d130      	bne.n	8003046 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2200      	movs	r2, #0
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fefd 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e04d      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2bff      	cmp	r3, #255	; 0xff
 8003006:	d90e      	bls.n	8003026 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	b2da      	uxtb	r2, r3
 8003014:	8979      	ldrh	r1, [r7, #10]
 8003016:	2300      	movs	r3, #0
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f001 f874 	bl	800410c <I2C_TransferConfig>
 8003024:	e00f      	b.n	8003046 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	b2da      	uxtb	r2, r3
 8003036:	8979      	ldrh	r1, [r7, #10]
 8003038:	2300      	movs	r3, #0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f001 f863 	bl	800410c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d19d      	bne.n	8002f8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 ff4a 	bl	8003eee <I2C_WaitOnSTOPFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e01a      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2220      	movs	r2, #32
 800306a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_I2C_Master_Receive+0x1e8>)
 8003078:	400b      	ands	r3, r1
 800307a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	80002400 	.word	0x80002400
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 80f9 	bne.w	80032c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x34>
 80030da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ed      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Mem_Write+0x4e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0e6      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003102:	f7fe fba7 	bl	8001854 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fe6a 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d1      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800314c:	88f8      	ldrh	r0, [r7, #6]
 800314e:	893a      	ldrh	r2, [r7, #8]
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fa77 	bl	8003650 <I2C_RequestMemoryWrite>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0a9      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 ffb9 	bl	800410c <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 ffa8 	bl	800410c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fe54 	bl	8003e6e <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e07b      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d034      	beq.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d130      	bne.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fde6 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e04d      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2bff      	cmp	r3, #255	; 0xff
 8003234:	d90e      	bls.n	8003254 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 ff5d 	bl	800410c <I2C_TransferConfig>
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 ff4c 	bl	800410c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d19e      	bne.n	80031bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fe33 	bl	8003eee <I2C_WaitOnSTOPFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e01a      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2220      	movs	r2, #32
 8003298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_I2C_Mem_Write+0x224>)
 80032a6:	400b      	ands	r3, r1
 80032a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	fe00e800 	.word	0xfe00e800

080032d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
  }
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_I2C_ER_IRQHandler+0x46>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	09db      	lsrs	r3, r3, #7
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0a9b      	lsrs	r3, r3, #10
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d010      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0x74>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	09db      	lsrs	r3, r3, #7
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0208 	orr.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	0a5b      	lsrs	r3, r3, #9
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0xa2>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	09db      	lsrs	r3, r3, #7
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f043 0202 	orr.w	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 030b 	and.w	r3, r3, #11
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fbdd 	bl	8003b7c <I2C_ITError>
  }
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	70fb      	strb	r3, [r7, #3]
 80033fe:	4613      	mov	r3, r2
 8003400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <I2C_Slave_ISR_IT+0x24>
 800346a:	2302      	movs	r3, #2
 800346c:	e0ec      	b.n	8003648 <I2C_Slave_ISR_IT+0x1fe>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <I2C_Slave_ISR_IT+0x4c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa13 	bl	80038bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04d      	beq.n	800353e <I2C_Slave_ISR_IT+0xf4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d047      	beq.n	800353e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d128      	bne.n	800350a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b28      	cmp	r3, #40	; 0x28
 80034c2:	d108      	bne.n	80034d6 <I2C_Slave_ISR_IT+0x8c>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ca:	d104      	bne.n	80034d6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fafe 	bl	8003ad0 <I2C_ITListenCplt>
 80034d4:	e032      	b.n	800353c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b29      	cmp	r3, #41	; 0x29
 80034e0:	d10e      	bne.n	8003500 <I2C_Slave_ISR_IT+0xb6>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e8:	d00a      	beq.n	8003500 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fc39 	bl	8003d6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f981 	bl	8003800 <I2C_ITSlaveSeqCplt>
 80034fe:	e01d      	b.n	800353c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003508:	e096      	b.n	8003638 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2210      	movs	r2, #16
 8003510:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <I2C_Slave_ISR_IT+0xe4>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352a:	f040 8085 	bne.w	8003638 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4619      	mov	r1, r3
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fb21 	bl	8003b7c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800353a:	e07d      	b.n	8003638 <I2C_Slave_ISR_IT+0x1ee>
 800353c:	e07c      	b.n	8003638 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d030      	beq.n	80035ac <I2C_Slave_ISR_IT+0x162>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02a      	beq.n	80035ac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d14f      	bne.n	800363c <I2C_Slave_ISR_IT+0x1f2>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035a2:	d04b      	beq.n	800363c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f92b 	bl	8003800 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035aa:	e047      	b.n	800363c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f896 	bl	80036f8 <I2C_ITAddrCplt>
 80035cc:	e037      	b.n	800363e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d031      	beq.n	800363e <I2C_Slave_ISR_IT+0x1f4>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02b      	beq.n	800363e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d018      	beq.n	8003622 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003620:	e00d      	b.n	800363e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d002      	beq.n	8003630 <I2C_Slave_ISR_IT+0x1e6>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f8e5 	bl	8003800 <I2C_ITSlaveSeqCplt>
 8003636:	e002      	b.n	800363e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800363c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	460b      	mov	r3, r1
 8003664:	813b      	strh	r3, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <I2C_RequestMemoryWrite+0xa4>)
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fd47 	bl	800410c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fbf3 	bl	8003e6e <I2C_WaitOnTXISFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e02c      	b.n	80036ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
 80036a2:	e015      	b.n	80036d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fbd9 	bl	8003e6e <I2C_WaitOnTXISFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e012      	b.n	80036ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fb87 	bl	8003dee <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	80002000 	.word	0x80002000

080036f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370e:	2b28      	cmp	r3, #40	; 0x28
 8003710:	d16a      	bne.n	80037e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	b29b      	uxth	r3, r3
 800372c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003730:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800374c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d138      	bne.n	80037c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	09db      	lsrs	r3, r3, #7
 800375a:	b29a      	uxth	r2, r3
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	4053      	eors	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	f003 0306 	and.w	r3, r3, #6
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11c      	bne.n	80037a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	2b02      	cmp	r3, #2
 800377e:	d13b      	bne.n	80037f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2208      	movs	r2, #8
 800378c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003796:	89ba      	ldrh	r2, [r7, #12]
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fe28 	bl	80033f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037a2:	e029      	b.n	80037f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fcdb 	bl	8004168 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037ba:	89ba      	ldrh	r2, [r7, #12]
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe16 	bl	80033f2 <HAL_I2C_AddrCallback>
}
 80037c6:	e017      	b.n	80037f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fccb 	bl	8004168 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037da:	89ba      	ldrh	r2, [r7, #12]
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe06 	bl	80033f2 <HAL_I2C_AddrCallback>
}
 80037e6:	e007      	b.n	80037f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2208      	movs	r2, #8
 80037ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	0b9b      	lsrs	r3, r3, #14
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e00d      	b.n	8003852 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0bdb      	lsrs	r3, r3, #15
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003850:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b29      	cmp	r3, #41	; 0x29
 800385c:	d112      	bne.n	8003884 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2228      	movs	r2, #40	; 0x28
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2221      	movs	r2, #33	; 0x21
 800386a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800386c:	2101      	movs	r1, #1
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fc7a 	bl	8004168 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fda4 	bl	80033ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003882:	e017      	b.n	80038b4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b2a      	cmp	r3, #42	; 0x2a
 800388e:	d111      	bne.n	80038b4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2228      	movs	r2, #40	; 0x28
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2222      	movs	r2, #34	; 0x22
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800389e:	2102      	movs	r1, #2
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fc61 	bl	8004168 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fd95 	bl	80033de <HAL_I2C_SlaveRxCpltCallback>
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	d002      	beq.n	80038ee <I2C_ITSlaveCplt+0x32>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b29      	cmp	r3, #41	; 0x29
 80038ec:	d108      	bne.n	8003900 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038ee:	f248 0101 	movw	r1, #32769	; 0x8001
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fc38 	bl	8004168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2221      	movs	r2, #33	; 0x21
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
 80038fe:	e00d      	b.n	800391c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b22      	cmp	r3, #34	; 0x22
 8003904:	d002      	beq.n	800390c <I2C_ITSlaveCplt+0x50>
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b2a      	cmp	r3, #42	; 0x2a
 800390a:	d107      	bne.n	800391c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800390c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fc29 	bl	8004168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2222      	movs	r2, #34	; 0x22
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <I2C_ITSlaveCplt+0x20c>)
 8003938:	400b      	ands	r3, r1
 800393a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fa14 	bl	8003d6a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	0b9b      	lsrs	r3, r3, #14
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800395c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e018      	b.n	80039a8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	0bdb      	lsrs	r3, r3, #15
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003990:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0304 	bic.w	r3, r3, #4
 80039ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00c      	beq.n	80039f6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f043 0204 	orr.w	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8a7 	bl	8003b7c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b28      	cmp	r3, #40	; 0x28
 8003a38:	d141      	bne.n	8003abe <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f847 	bl	8003ad0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a42:	e03c      	b.n	8003abe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4c:	d014      	beq.n	8003a78 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fed6 	bl	8003800 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <I2C_ITSlaveCplt+0x210>)
 8003a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fccc 	bl	800340e <HAL_I2C_ListenCpltCallback>
}
 8003a76:	e022      	b.n	8003abe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b22      	cmp	r3, #34	; 0x22
 8003a82:	d10e      	bne.n	8003aa2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fc9f 	bl	80033de <HAL_I2C_SlaveRxCpltCallback>
}
 8003aa0:	e00d      	b.n	8003abe <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fc86 	bl	80033ca <HAL_I2C_SlaveTxCpltCallback>
}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	fe00e800 	.word	0xfe00e800
 8003acc:	ffff0000 	.word	0xffff0000

08003ad0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <I2C_ITListenCplt+0xa8>)
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d022      	beq.n	8003b4e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0204 	orr.w	r2, r3, #4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b4e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb08 	bl	8004168 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fc50 	bl	800340e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	ffff0000 	.word	0xffff0000

08003b7c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a5d      	ldr	r2, [pc, #372]	; (8003d10 <I2C_ITError+0x194>)
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b28      	cmp	r3, #40	; 0x28
 8003bb2:	d005      	beq.n	8003bc0 <I2C_ITError+0x44>
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b29      	cmp	r3, #41	; 0x29
 8003bb8:	d002      	beq.n	8003bc0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bbe:	d10b      	bne.n	8003bd8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bc0:	2103      	movs	r1, #3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fad0 	bl	8004168 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2228      	movs	r2, #40	; 0x28
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a50      	ldr	r2, [pc, #320]	; (8003d14 <I2C_ITError+0x198>)
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd6:	e011      	b.n	8003bfc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bd8:	f248 0103 	movw	r1, #32771	; 0x8003
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fac3 	bl	8004168 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b60      	cmp	r3, #96	; 0x60
 8003bec:	d003      	beq.n	8003bf6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d039      	beq.n	8003c7e <I2C_ITError+0x102>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b11      	cmp	r3, #17
 8003c0e:	d002      	beq.n	8003c16 <I2C_ITError+0x9a>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b21      	cmp	r3, #33	; 0x21
 8003c14:	d133      	bne.n	8003c7e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c24:	d107      	bne.n	8003c36 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fd31 	bl	80026a2 <HAL_DMA_GetState>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d017      	beq.n	8003c76 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <I2C_ITError+0x19c>)
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fc13 	bl	8002486 <HAL_DMA_Abort_IT>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04d      	beq.n	8003d02 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c70:	4610      	mov	r0, r2
 8003c72:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c74:	e045      	b.n	8003d02 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f850 	bl	8003d1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c7c:	e041      	b.n	8003d02 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d039      	beq.n	8003cfa <I2C_ITError+0x17e>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b12      	cmp	r3, #18
 8003c8a:	d002      	beq.n	8003c92 <I2C_ITError+0x116>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b22      	cmp	r3, #34	; 0x22
 8003c90:	d133      	bne.n	8003cfa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d107      	bne.n	8003cb2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fcf3 	bl	80026a2 <HAL_DMA_GetState>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d017      	beq.n	8003cf2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <I2C_ITError+0x19c>)
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fbd5 	bl	8002486 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf0:	e009      	b.n	8003d06 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f812 	bl	8003d1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf8:	e005      	b.n	8003d06 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f80e 	bl	8003d1c <I2C_TreatErrorCallback>
  }
}
 8003d00:	e002      	b.n	8003d08 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d06:	bf00      	nop
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ffff0000 	.word	0xffff0000
 8003d14:	0800344b 	.word	0x0800344b
 8003d18:	08003db3 	.word	0x08003db3

08003d1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d10e      	bne.n	8003d4e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fb75 	bl	8003436 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d4c:	e009      	b.n	8003d62 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fb60 	bl	8003422 <HAL_I2C_ErrorCallback>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d103      	bne.n	8003d88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d007      	beq.n	8003da6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	619a      	str	r2, [r3, #24]
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	2200      	movs	r2, #0
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	2200      	movs	r2, #0
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff ff9b 	bl	8003d1c <I2C_TreatErrorCallback>
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfe:	e022      	b.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d01e      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e08:	f7fd fd24 	bl	8001854 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d113      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d0cd      	beq.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e7a:	e02c      	b.n	8003ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8dd 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e02a      	b.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d01e      	beq.n	8003ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fd fcdc 	bl	8001854 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d113      	bne.n	8003ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e007      	b.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d1cb      	bne.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003efa:	e028      	b.n	8003f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f89d 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e026      	b.n	8003f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fd fca0 	bl	8001854 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d113      	bne.n	8003f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e007      	b.n	8003f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d1cf      	bne.n	8003efc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f74:	e055      	b.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f860 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e053      	b.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d129      	bne.n	8003fec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d105      	bne.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e03f      	b.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e022      	b.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fec:	f7fd fc32 	bl	8001854 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e007      	b.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d1a2      	bne.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	fe00e800 	.word	0xfe00e800

08004040 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b10      	cmp	r3, #16
 8004058:	d151      	bne.n	80040fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405a:	e022      	b.n	80040a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d01e      	beq.n	80040a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fd fbf6 	bl	8001854 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_IsAcknowledgeFailed+0x3a>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e02e      	b.n	8004100 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d1d5      	bne.n	800405c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2220      	movs	r2, #32
 80040be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff fe52 	bl	8003d6a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <I2C_IsAcknowledgeFailed+0xc8>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	fe00e800 	.word	0xfe00e800

0800410c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	4613      	mov	r3, r2
 800411c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	0d5b      	lsrs	r3, r3, #21
 8004128:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <I2C_TransferConfig+0x58>)
 800412e:	430b      	orrs	r3, r1
 8004130:	43db      	mvns	r3, r3
 8004132:	ea02 0103 	and.w	r1, r2, r3
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800413c:	7a7b      	ldrb	r3, [r7, #9]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	431a      	orrs	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	03ff63ff 	.word	0x03ff63ff

08004168 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004188:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004196:	2b28      	cmp	r3, #40	; 0x28
 8004198:	d003      	beq.n	80041a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80041b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041c0:	2b28      	cmp	r3, #40	; 0x28
 80041c2:	d003      	beq.n	80041cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80041cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da03      	bge.n	80041dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80041da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d103      	bne.n	80041ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d103      	bne.n	80041f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d103      	bne.n	8004206 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004204:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43da      	mvns	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	400a      	ands	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	d138      	bne.n	80042ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004244:	2302      	movs	r3, #2
 8004246:	e032      	b.n	80042ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d139      	bne.n	8004344 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042da:	2302      	movs	r3, #2
 80042dc:	e033      	b.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2224      	movs	r2, #36	; 0x24
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800430c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_PWREx_GetVoltageRange+0x3c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d102      	bne.n	800436c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436a:	e00b      	b.n	8004384 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_PWREx_GetVoltageRange+0x3c>)
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	d102      	bne.n	8004382 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800437c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004380:	e000      	b.n	8004384 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004382:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d141      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043a2:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d131      	bne.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b0:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	4a46      	ldr	r2, [pc, #280]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c8:	4a41      	ldr	r2, [pc, #260]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2232      	movs	r2, #50	; 0x32
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e6:	e002      	b.n	80043ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ee:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fa:	d102      	bne.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f2      	bne.n	80043e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004402:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d158      	bne.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e057      	b.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441a:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004424:	e04d      	b.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d141      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d131      	bne.n	80044a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800443c:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004442:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2232      	movs	r2, #50	; 0x32
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	0c9b      	lsrs	r3, r3, #18
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004472:	e002      	b.n	800447a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b01      	subs	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d102      	bne.n	800448e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f2      	bne.n	8004474 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449a:	d112      	bne.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e011      	b.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044b0:	e007      	b.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ba:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40007000 	.word	0x40007000
 80044d4:	20000000 	.word	0x20000000
 80044d8:	431bde83 	.word	0x431bde83

080044dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ea:	6053      	str	r3, [r2, #4]
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000

080044fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f000 bc16 	b.w	8004d3c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004510:	4ba0      	ldr	r3, [pc, #640]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451a:	4b9e      	ldr	r3, [pc, #632]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80e4 	beq.w	80046fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_RCC_OscConfig+0x4c>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	f040 808b 	bne.w	8004656 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 8087 	bne.w	8004656 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004548:	4b92      	ldr	r3, [pc, #584]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x64>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e3ed      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	4b8b      	ldr	r3, [pc, #556]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_RCC_OscConfig+0x7e>
 8004570:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004578:	e005      	b.n	8004586 <HAL_RCC_OscConfig+0x8a>
 800457a:	4b86      	ldr	r3, [pc, #536]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	4293      	cmp	r3, r2
 8004588:	d223      	bcs.n	80045d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fdc4 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e3ce      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800459e:	4b7d      	ldr	r3, [pc, #500]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a7c      	ldr	r2, [pc, #496]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045a4:	f043 0308 	orr.w	r3, r3, #8
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b7a      	ldr	r3, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4977      	ldr	r1, [pc, #476]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045bc:	4b75      	ldr	r3, [pc, #468]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	4972      	ldr	r1, [pc, #456]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	e025      	b.n	800461e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d2:	4b70      	ldr	r3, [pc, #448]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6f      	ldr	r2, [pc, #444]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	496a      	ldr	r1, [pc, #424]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	4b68      	ldr	r3, [pc, #416]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	4965      	ldr	r1, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd84 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e38e      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800461e:	f000 fcf3 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004622:	4601      	mov	r1, r0
 8004624:	4b5b      	ldr	r3, [pc, #364]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	4a5a      	ldr	r2, [pc, #360]	; (8004798 <HAL_RCC_OscConfig+0x29c>)
 8004630:	5cd3      	ldrb	r3, [r2, r3]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	fa21 f303 	lsr.w	r3, r1, r3
 800463a:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x2a0>)
 800463c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800463e:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <HAL_RCC_OscConfig+0x2a4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd f8b6 	bl	80017b4 <HAL_InitTick>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d052      	beq.n	80046f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	e372      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d032      	beq.n	80046c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800465e:	4b4d      	ldr	r3, [pc, #308]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a4c      	ldr	r2, [pc, #304]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800466a:	f7fd f8f3 	bl	8001854 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004672:	f7fd f8ef 	bl	8001854 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e35b      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004696:	f043 0308 	orr.w	r3, r3, #8
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	493a      	ldr	r1, [pc, #232]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	4935      	ldr	r1, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
 80046c2:	e01a      	b.n	80046fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046c4:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a32      	ldr	r2, [pc, #200]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d0:	f7fd f8c0 	bl	8001854 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046d8:	f7fd f8bc 	bl	8001854 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e328      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046ea:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1dc>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d073      	beq.n	80047ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d005      	beq.n	8004718 <HAL_RCC_OscConfig+0x21c>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d10e      	bne.n	8004730 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d063      	beq.n	80047ec <HAL_RCC_OscConfig+0x2f0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d15f      	bne.n	80047ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e305      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x24c>
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0x288>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x270>
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a0f      	ldr	r2, [pc, #60]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0x288>
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a05      	ldr	r2, [pc, #20]	; (8004794 <HAL_RCC_OscConfig+0x298>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd f862 	bl	8001854 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	e010      	b.n	80047b6 <HAL_RCC_OscConfig+0x2ba>
 8004794:	40021000 	.word	0x40021000
 8004798:	0800679c 	.word	0x0800679c
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fd f856 	bl	8001854 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e2c2      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	4baf      	ldr	r3, [pc, #700]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x2a8>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd f846 	bl	8001854 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fd f842 	bl	8001854 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e2ae      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047de:	4ba5      	ldr	r3, [pc, #660]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x2d0>
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d060      	beq.n	80048bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x310>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d119      	bne.n	800483a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d116      	bne.n	800483a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800480c:	4b99      	ldr	r3, [pc, #612]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_OscConfig+0x328>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e28b      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004824:	4b93      	ldr	r3, [pc, #588]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	4990      	ldr	r1, [pc, #576]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004838:	e040      	b.n	80048bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d023      	beq.n	800488a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004842:	4b8c      	ldr	r3, [pc, #560]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a8b      	ldr	r2, [pc, #556]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd f801 	bl	8001854 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7fc fffd 	bl	8001854 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e269      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	4b82      	ldr	r3, [pc, #520]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b7f      	ldr	r3, [pc, #508]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	497c      	ldr	r1, [pc, #496]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	e018      	b.n	80048bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b7a      	ldr	r3, [pc, #488]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a79      	ldr	r2, [pc, #484]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fc ffdd 	bl	8001854 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489e:	f7fc ffd9 	bl	8001854 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e245      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b0:	4b70      	ldr	r3, [pc, #448]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d03c      	beq.n	8004942 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01c      	beq.n	800490a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	4a67      	ldr	r2, [pc, #412]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fc ffb8 	bl	8001854 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fc ffb4 	bl	8001854 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e220      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048fa:	4b5e      	ldr	r3, [pc, #376]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80048fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCC_OscConfig+0x3ec>
 8004908:	e01b      	b.n	8004942 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490a:	4b5a      	ldr	r3, [pc, #360]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004910:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491a:	f7fc ff9b 	bl	8001854 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004922:	f7fc ff97 	bl	8001854 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e203      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004934:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ef      	bne.n	8004922 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80a6 	beq.w	8004a9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004954:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b44      	ldr	r3, [pc, #272]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	4a43      	ldr	r2, [pc, #268]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_RCC_OscConfig+0x57c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d118      	bne.n	80049ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x57c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <HAL_RCC_OscConfig+0x57c>)
 800498e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004994:	f7fc ff5e 	bl	8001854 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499c:	f7fc ff5a 	bl	8001854 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1c6      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ae:	4b32      	ldr	r3, [pc, #200]	; (8004a78 <HAL_RCC_OscConfig+0x57c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4d8>
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d2:	e024      	b.n	8004a1e <HAL_RCC_OscConfig+0x522>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d110      	bne.n	80049fe <HAL_RCC_OscConfig+0x502>
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	4a24      	ldr	r2, [pc, #144]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049fc:	e00f      	b.n	8004a1e <HAL_RCC_OscConfig+0x522>
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004a16:	f023 0304 	bic.w	r3, r3, #4
 8004a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d016      	beq.n	8004a54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fc ff15 	bl	8001854 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fc ff11 	bl	8001854 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e17b      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_OscConfig+0x578>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ed      	beq.n	8004a2e <HAL_RCC_OscConfig+0x532>
 8004a52:	e01a      	b.n	8004a8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fefe 	bl	8001854 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fefa 	bl	8001854 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d906      	bls.n	8004a7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e164      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a7c:	4ba8      	ldr	r3, [pc, #672]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e8      	bne.n	8004a5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4ba3      	ldr	r3, [pc, #652]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4aa2      	ldr	r2, [pc, #648]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01c      	beq.n	8004aea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab0:	4b9b      	ldr	r3, [pc, #620]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab6:	4a9a      	ldr	r2, [pc, #616]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc fec8 	bl	8001854 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac8:	f7fc fec4 	bl	8001854 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e130      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ada:	4b91      	ldr	r3, [pc, #580]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x5cc>
 8004ae8:	e01b      	b.n	8004b22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af0:	4a8b      	ldr	r2, [pc, #556]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fc feab 	bl	8001854 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b02:	f7fc fea7 	bl	8001854 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e113      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b14:	4b82      	ldr	r3, [pc, #520]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ef      	bne.n	8004b02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8107 	beq.w	8004d3a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	f040 80cb 	bne.w	8004ccc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b36:	4b7a      	ldr	r3, [pc, #488]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0203 	and.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d12c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	3b01      	subs	r3, #1
 8004b56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d123      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d113      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d06d      	beq.n	8004c80 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d068      	beq.n	8004c7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004baa:	4b5d      	ldr	r3, [pc, #372]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bb6:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0ba      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a55      	ldr	r2, [pc, #340]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bd2:	f7fc fe3f 	bl	8001854 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fc fe3b 	bl	8001854 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0a7      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bec:	4b4c      	ldr	r3, [pc, #304]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_RCC_OscConfig+0x828>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c12:	0212      	lsls	r2, r2, #8
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c1a:	0852      	lsrs	r2, r2, #1
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	0552      	lsls	r2, r2, #21
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c26:	0852      	lsrs	r2, r2, #1
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	0652      	lsls	r2, r2, #25
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c32:	06d2      	lsls	r2, r2, #27
 8004c34:	430a      	orrs	r2, r1
 8004c36:	493a      	ldr	r1, [pc, #232]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c3c:	4b38      	ldr	r3, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c54:	f7fc fdfe 	bl	8001854 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fc fdfa 	bl	8001854 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e066      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c7a:	e05e      	b.n	8004d3a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e05d      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d156      	bne.n	8004d3a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a23      	ldr	r2, [pc, #140]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ca4:	f7fc fdd6 	bl	8001854 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fc fdd2 	bl	8001854 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e03e      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cbe:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x7b0>
 8004cca:	e036      	b.n	8004d3a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d031      	beq.n	8004d36 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_OscConfig+0x824>)
 8004cfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fc fda5 	bl	8001854 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0c:	e00c      	b.n	8004d28 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0e:	f7fc fda1 	bl	8001854 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d905      	bls.n	8004d28 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e00d      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
 8004d20:	40021000 	.word	0x40021000
 8004d24:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_RCC_OscConfig+0x848>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ec      	bne.n	8004d0e <HAL_RCC_OscConfig+0x812>
 8004d34:	e001      	b.n	8004d3a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e10f      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d60:	4b89      	ldr	r3, [pc, #548]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d910      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b86      	ldr	r3, [pc, #536]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 020f 	bic.w	r2, r3, #15
 8004d76:	4984      	ldr	r1, [pc, #528]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b82      	ldr	r3, [pc, #520]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0f7      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8089 	beq.w	8004eb0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d133      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	4b79      	ldr	r3, [pc, #484]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0e4      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004db6:	f000 fa0b 	bl	80051d0 <RCC_GetSysClockFreqFromPLLSource>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <HAL_RCC_ClockConfig+0x248>)
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d955      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dc2:	4b72      	ldr	r3, [pc, #456]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dce:	4b6f      	ldr	r3, [pc, #444]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd6:	4a6d      	ldr	r2, [pc, #436]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e044      	b.n	8004e6e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d03e      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x126>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d13a      	bne.n	8004e6e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004df8:	4b64      	ldr	r3, [pc, #400]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e00:	4a62      	ldr	r2, [pc, #392]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e02f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e16:	4b5d      	ldr	r3, [pc, #372]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d115      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0ac      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e2e:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0a0      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3e:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e098      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e4e:	f000 f8db 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b4e      	ldr	r3, [pc, #312]	; (8004f90 <HAL_RCC_ClockConfig+0x248>)
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d909      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5a:	4b4c      	ldr	r3, [pc, #304]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e62:	4a4a      	ldr	r2, [pc, #296]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4944      	ldr	r1, [pc, #272]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fc fce8 	bl	8001854 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fc fce4 	bl	8001854 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e070      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 020c 	and.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1eb      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4930      	ldr	r1, [pc, #192]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ed6:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d210      	bcs.n	8004f12 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 020f 	bic.w	r2, r3, #15
 8004ef8:	4923      	ldr	r1, [pc, #140]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCC_ClockConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e036      	b.n	8004f80 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	4918      	ldr	r1, [pc, #96]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4910      	ldr	r1, [pc, #64]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f50:	f000 f85a 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004f54:	4601      	mov	r1, r0
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_ClockConfig+0x244>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <HAL_RCC_ClockConfig+0x24c>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa21 f303 	lsr.w	r3, r1, r3
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x250>)
 8004f6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x254>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fc fc1d 	bl	80017b4 <HAL_InitTick>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	04c4b400 	.word	0x04c4b400
 8004f94:	0800679c 	.word	0x0800679c
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	20000004 	.word	0x20000004

08004fa0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004fac:	4b15      	ldr	r3, [pc, #84]	; (8005004 <HAL_RCC_MCOConfig+0x64>)
 8004fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb0:	4a14      	ldr	r2, [pc, #80]	; (8005004 <HAL_RCC_MCOConfig+0x64>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_MCOConfig+0x64>)
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fe4:	f7fd fc0c 	bl	8002800 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_MCOConfig+0x64>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_MCOConfig+0x64>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	608b      	str	r3, [r1, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	3728      	adds	r7, #40	; 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	2300      	movs	r3, #0
 8005014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005016:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005020:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x34>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d121      	bne.n	800507a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d11e      	bne.n	800507a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 800504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e005      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005058:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005064:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <HAL_RCC_GetSysClockFreq+0x108>)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10d      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d102      	bne.n	8005086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005080:	4b24      	ldr	r3, [pc, #144]	; (8005114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e004      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d101      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800508c:	4b22      	ldr	r3, [pc, #136]	; (8005118 <HAL_RCC_GetSysClockFreq+0x110>)
 800508e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d133      	bne.n	80050fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005096:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d002      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xa4>
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80050aa:	e005      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050ae:	617b      	str	r3, [r7, #20]
      break;
 80050b0:	e005      	b.n	80050be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <HAL_RCC_GetSysClockFreq+0x110>)
 80050b4:	617b      	str	r3, [r7, #20]
      break;
 80050b6:	e002      	b.n	80050be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	617b      	str	r3, [r7, #20]
      break;
 80050bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	3301      	adds	r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	fb02 f203 	mul.w	r2, r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050e4:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_RCC_GetSysClockFreq+0x104>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	0e5b      	lsrs	r3, r3, #25
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	3301      	adds	r3, #1
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050fe:	69bb      	ldr	r3, [r7, #24]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3724      	adds	r7, #36	; 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40021000 	.word	0x40021000
 8005110:	080067b4 	.word	0x080067b4
 8005114:	00f42400 	.word	0x00f42400
 8005118:	007a1200 	.word	0x007a1200

0800511c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005128:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005134:	f7ff f90e 	bl	8004354 <HAL_PWREx_GetVoltageRange>
 8005138:	6178      	str	r0, [r7, #20]
 800513a:	e014      	b.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	6593      	str	r3, [r2, #88]	; 0x58
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005154:	f7ff f8fe 	bl	8004354 <HAL_PWREx_GetVoltageRange>
 8005158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516c:	d10b      	bne.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d913      	bls.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2ba0      	cmp	r3, #160	; 0xa0
 8005178:	d902      	bls.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800517a:	2302      	movs	r3, #2
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e00d      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005180:	2301      	movs	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e00a      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b7f      	cmp	r3, #127	; 0x7f
 800518a:	d902      	bls.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800518c:	2302      	movs	r3, #2
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e004      	b.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b70      	cmp	r3, #112	; 0x70
 8005196:	d101      	bne.n	800519c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005198:	2301      	movs	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 020f 	bic.w	r2, r3, #15
 80051a4:	4909      	ldr	r1, [pc, #36]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40022000 	.word	0x40022000

080051d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80051da:	4b2d      	ldr	r3, [pc, #180]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d118      	bne.n	8005218 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e6:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d107      	bne.n	8005202 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e005      	b.n	800520e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d002      	beq.n	800522e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005228:	2b03      	cmp	r3, #3
 800522a:	d003      	beq.n	8005234 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800522c:	e005      	b.n	800523a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800522e:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005230:	613b      	str	r3, [r7, #16]
    break;
 8005232:	e005      	b.n	8005240 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005234:	4b19      	ldr	r3, [pc, #100]	; (800529c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005236:	613b      	str	r3, [r7, #16]
    break;
 8005238:	e002      	b.n	8005240 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	613b      	str	r3, [r7, #16]
    break;
 800523e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005240:	4b13      	ldr	r3, [pc, #76]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	3301      	adds	r3, #1
 800524c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	fb02 f203 	mul.w	r2, r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	0e5b      	lsrs	r3, r3, #25
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	3301      	adds	r3, #1
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005280:	683b      	ldr	r3, [r7, #0]
}
 8005282:	4618      	mov	r0, r3
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000
 8005294:	080067b4 	.word	0x080067b4
 8005298:	00f42400 	.word	0x00f42400
 800529c:	007a1200 	.word	0x007a1200

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a8:	2300      	movs	r3, #0
 80052aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ac:	2300      	movs	r3, #0
 80052ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d03d      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d00b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d804      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d015      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80052d0:	e01d      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80052d2:	2b60      	cmp	r3, #96	; 0x60
 80052d4:	d01e      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d01c      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052da:	e018      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052dc:	4b86      	ldr	r3, [pc, #536]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a85      	ldr	r2, [pc, #532]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e8:	e015      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fafd 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052fa:	e00c      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3320      	adds	r3, #32
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fbe4 	bl	8005ad0 <RCCEx_PLLSAI2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	74fb      	strb	r3, [r7, #19]
      break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800531c:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005322:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532a:	4973      	ldr	r1, [pc, #460]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005332:	e001      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d042      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d00f      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800534e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005352:	d805      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535c:	d017      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800535e:	e01f      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005364:	d01f      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d01c      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800536c:	e018      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800536e:	4b62      	ldr	r3, [pc, #392]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a61      	ldr	r2, [pc, #388]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800537a:	e015      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fab4 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800538c:	e00c      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3320      	adds	r3, #32
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fb9b 	bl	8005ad0 <RCCEx_PLLSAI2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800539e:	e003      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	74fb      	strb	r3, [r7, #19]
      break;
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80053a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ae:	4b52      	ldr	r3, [pc, #328]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	494e      	ldr	r1, [pc, #312]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053c4:	e001      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 809f 	beq.w	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d8:	2300      	movs	r3, #0
 80053da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053dc:	4b46      	ldr	r3, [pc, #280]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	4a40      	ldr	r2, [pc, #256]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6593      	str	r3, [r2, #88]	; 0x58
 80053fe:	4b3e      	ldr	r3, [pc, #248]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800540a:	2301      	movs	r3, #1
 800540c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540e:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3a      	ldr	r2, [pc, #232]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541a:	f7fc fa1b 	bl	8001854 <HAL_GetTick>
 800541e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005420:	e009      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fc fa17 	bl	8001854 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d902      	bls.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	74fb      	strb	r3, [r7, #19]
        break;
 8005434:	e005      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ef      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d15b      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005448:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005452:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01f      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	429a      	cmp	r2, r3
 8005464:	d019      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005470:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005472:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800547a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005492:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fc f9d6 	bl	8001854 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054aa:	e00b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fc f9d2 	bl	8001854 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d902      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	74fb      	strb	r3, [r7, #19]
            break;
 80054c2:	e006      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ec      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10c      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054f0:	e008      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	74bb      	strb	r3, [r7, #18]
 80054f6:	e005      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005504:	7c7b      	ldrb	r3, [r7, #17]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4ba0      	ldr	r3, [pc, #640]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	4a9f      	ldr	r2, [pc, #636]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005522:	4b9a      	ldr	r3, [pc, #616]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f023 0203 	bic.w	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	4996      	ldr	r1, [pc, #600]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005544:	4b91      	ldr	r3, [pc, #580]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f023 020c 	bic.w	r2, r3, #12
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	498e      	ldr	r1, [pc, #568]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	4985      	ldr	r1, [pc, #532]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005588:	4b80      	ldr	r3, [pc, #512]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	497d      	ldr	r1, [pc, #500]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055aa:	4b78      	ldr	r3, [pc, #480]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b8:	4974      	ldr	r1, [pc, #464]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055cc:	4b6f      	ldr	r3, [pc, #444]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	496c      	ldr	r1, [pc, #432]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ee:	4b67      	ldr	r3, [pc, #412]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fc:	4963      	ldr	r1, [pc, #396]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005610:	4b5e      	ldr	r3, [pc, #376]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800561e:	495b      	ldr	r1, [pc, #364]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005632:	4b56      	ldr	r3, [pc, #344]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	4952      	ldr	r1, [pc, #328]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005654:	4b4d      	ldr	r3, [pc, #308]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	494a      	ldr	r1, [pc, #296]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005676:	4b45      	ldr	r3, [pc, #276]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	4941      	ldr	r1, [pc, #260]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005698:	4b3c      	ldr	r3, [pc, #240]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a6:	4939      	ldr	r1, [pc, #228]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d028      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ba:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c8:	4930      	ldr	r1, [pc, #192]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d8:	d106      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056da:	4b2c      	ldr	r3, [pc, #176]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a2b      	ldr	r2, [pc, #172]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e4:	60d3      	str	r3, [r2, #12]
 80056e6:	e011      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f0:	d10c      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f8f9 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d04d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005720:	d108      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800572e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005732:	e012      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005740:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005752:	490e      	ldr	r1, [pc, #56]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005762:	d106      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a08      	ldr	r2, [pc, #32]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576e:	60d3      	str	r3, [r2, #12]
 8005770:	e020      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800577a:	d109      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a02      	ldr	r2, [pc, #8]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005786:	60d3      	str	r3, [r2, #12]
 8005788:	e014      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3304      	adds	r3, #4
 800579e:	2101      	movs	r1, #1
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f8a5 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d028      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c0:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ce:	4947      	ldr	r1, [pc, #284]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057de:	d106      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e0:	4b42      	ldr	r3, [pc, #264]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a41      	ldr	r2, [pc, #260]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ea:	60d3      	str	r3, [r2, #12]
 80057ec:	e011      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f6:	d10c      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	2101      	movs	r1, #1
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f876 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01e      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800581e:	4b33      	ldr	r3, [pc, #204]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582e:	492f      	ldr	r1, [pc, #188]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2102      	movs	r1, #2
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f851 	bl	80058f0 <RCCEx_PLLSAI1_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800586a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800586e:	f023 0204 	bic.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	491c      	ldr	r1, [pc, #112]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800588e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005892:	f023 0218 	bic.w	r2, r3, #24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	4913      	ldr	r1, [pc, #76]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058b0:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c0:	490a      	ldr	r1, [pc, #40]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a04      	ldr	r2, [pc, #16]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000

080058f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058fe:	4b70      	ldr	r3, [pc, #448]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800590a:	4b6d      	ldr	r3, [pc, #436]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0203 	and.w	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d103      	bne.n	8005922 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
       ||
 800591e:	2b00      	cmp	r3, #0
 8005920:	d13f      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
 8005926:	e03c      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d00c      	beq.n	800594a <RCCEx_PLLSAI1_Config+0x5a>
 8005930:	2b03      	cmp	r3, #3
 8005932:	d013      	beq.n	800595c <RCCEx_PLLSAI1_Config+0x6c>
 8005934:	2b01      	cmp	r3, #1
 8005936:	d120      	bne.n	800597a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005938:	4b61      	ldr	r3, [pc, #388]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11d      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005948:	e01a      	b.n	8005980 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800594a:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595a:	e013      	b.n	8005984 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800595c:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10f      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005968:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005978:	e006      	b.n	8005988 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e004      	b.n	800598a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005988:	bf00      	nop
    }

    if(status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005990:	4b4b      	ldr	r3, [pc, #300]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f023 0203 	bic.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4948      	ldr	r1, [pc, #288]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f040 8086 	bne.w	8005ab6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059aa:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a44      	ldr	r2, [pc, #272]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fb ff4d 	bl	8001854 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059bc:	e009      	b.n	80059d2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059be:	f7fb ff49 	bl	8001854 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d902      	bls.n	80059d2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	73fb      	strb	r3, [r7, #15]
        break;
 80059d0:	e005      	b.n	80059de <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ef      	bne.n	80059be <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d168      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d113      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ea:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	0211      	lsls	r1, r2, #8
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68d2      	ldr	r2, [r2, #12]
 80059fc:	06d2      	lsls	r2, r2, #27
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6852      	ldr	r2, [r2, #4]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	492d      	ldr	r1, [pc, #180]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]
 8005a10:	e02d      	b.n	8005a6e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d115      	bne.n	8005a44 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a18:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6892      	ldr	r2, [r2, #8]
 8005a24:	0211      	lsls	r1, r2, #8
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6912      	ldr	r2, [r2, #16]
 8005a2a:	0852      	lsrs	r2, r2, #1
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	0552      	lsls	r2, r2, #21
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6852      	ldr	r2, [r2, #4]
 8005a36:	3a01      	subs	r2, #1
 8005a38:	0112      	lsls	r2, r2, #4
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	4920      	ldr	r1, [pc, #128]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]
 8005a42:	e014      	b.n	8005a6e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6892      	ldr	r2, [r2, #8]
 8005a50:	0211      	lsls	r1, r2, #8
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6952      	ldr	r2, [r2, #20]
 8005a56:	0852      	lsrs	r2, r2, #1
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0652      	lsls	r2, r2, #25
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6852      	ldr	r2, [r2, #4]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	430a      	orrs	r2, r1
 8005a68:	4915      	ldr	r1, [pc, #84]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fb feeb 	bl	8001854 <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a80:	e009      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a82:	f7fb fee7 	bl	8001854 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d902      	bls.n	8005a96 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73fb      	strb	r3, [r7, #15]
          break;
 8005a94:	e005      	b.n	8005aa2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0ef      	beq.n	8005a82 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	4903      	ldr	r1, [pc, #12]	; (8005ac0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	07ff800f 	.word	0x07ff800f
 8005ac8:	ff9f800f 	.word	0xff9f800f
 8005acc:	f9ff800f 	.word	0xf9ff800f

08005ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ade:	4b70      	ldr	r3, [pc, #448]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aea:	4b6d      	ldr	r3, [pc, #436]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0203 	and.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d103      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
       ||
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13f      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e03c      	b.n	8005b82 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d00c      	beq.n	8005b2a <RCCEx_PLLSAI2_Config+0x5a>
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d013      	beq.n	8005b3c <RCCEx_PLLSAI2_Config+0x6c>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d120      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b18:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11d      	bne.n	8005b60 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b28:	e01a      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3a:	e013      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3c:	4b58      	ldr	r3, [pc, #352]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b48:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b58:	e006      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5e:	e004      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005b60:	bf00      	nop
 8005b62:	e002      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005b64:	bf00      	nop
 8005b66:	e000      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8005b68:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d108      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005b70:	4b4b      	ldr	r3, [pc, #300]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f023 0203 	bic.w	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4948      	ldr	r1, [pc, #288]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8086 	bne.w	8005c96 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b8a:	4b45      	ldr	r3, [pc, #276]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a44      	ldr	r2, [pc, #272]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b96:	f7fb fe5d 	bl	8001854 <HAL_GetTick>
 8005b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b9c:	e009      	b.n	8005bb2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b9e:	f7fb fe59 	bl	8001854 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d902      	bls.n	8005bb2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb0:	e005      	b.n	8005bbe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb2:	4b3b      	ldr	r3, [pc, #236]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ef      	bne.n	8005b9e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d168      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d113      	bne.n	8005bf2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bca:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6892      	ldr	r2, [r2, #8]
 8005bd6:	0211      	lsls	r1, r2, #8
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68d2      	ldr	r2, [r2, #12]
 8005bdc:	06d2      	lsls	r2, r2, #27
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6852      	ldr	r2, [r2, #4]
 8005be4:	3a01      	subs	r2, #1
 8005be6:	0112      	lsls	r2, r2, #4
 8005be8:	430a      	orrs	r2, r1
 8005bea:	492d      	ldr	r1, [pc, #180]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	614b      	str	r3, [r1, #20]
 8005bf0:	e02d      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d115      	bne.n	8005c24 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf8:	4b29      	ldr	r3, [pc, #164]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6892      	ldr	r2, [r2, #8]
 8005c04:	0211      	lsls	r1, r2, #8
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6912      	ldr	r2, [r2, #16]
 8005c0a:	0852      	lsrs	r2, r2, #1
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0552      	lsls	r2, r2, #21
 8005c10:	4311      	orrs	r1, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6852      	ldr	r2, [r2, #4]
 8005c16:	3a01      	subs	r2, #1
 8005c18:	0112      	lsls	r2, r2, #4
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	4920      	ldr	r1, [pc, #128]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	614b      	str	r3, [r1, #20]
 8005c22:	e014      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c24:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <RCCEx_PLLSAI2_Config+0x1dc>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6892      	ldr	r2, [r2, #8]
 8005c30:	0211      	lsls	r1, r2, #8
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6952      	ldr	r2, [r2, #20]
 8005c36:	0852      	lsrs	r2, r2, #1
 8005c38:	3a01      	subs	r2, #1
 8005c3a:	0652      	lsls	r2, r2, #25
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	3a01      	subs	r2, #1
 8005c44:	0112      	lsls	r2, r2, #4
 8005c46:	430a      	orrs	r2, r1
 8005c48:	4915      	ldr	r1, [pc, #84]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c4e:	4b14      	ldr	r3, [pc, #80]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fb fdfb 	bl	8001854 <HAL_GetTick>
 8005c5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c60:	e009      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c62:	f7fb fdf7 	bl	8001854 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d902      	bls.n	8005c76 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	73fb      	strb	r3, [r7, #15]
          break;
 8005c74:	e005      	b.n	8005c82 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ef      	beq.n	8005c62 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	07ff800f 	.word	0x07ff800f
 8005ca8:	ff9f800f 	.word	0xff9f800f
 8005cac:	f9ff800f 	.word	0xf9ff800f

08005cb0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b08b      	sub	sp, #44	; 0x2c
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e003      	b.n	8005ce2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	fab3 f383 	clz	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	401a      	ands	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	e003      	b.n	8005d10 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	372c      	adds	r7, #44	; 0x2c
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	401a      	ands	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b08b      	sub	sp, #44	; 0x2c
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	613b      	str	r3, [r7, #16]
  return result;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005d80:	2320      	movs	r3, #32
 8005d82:	e003      	b.n	8005d8c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	2103      	movs	r1, #3
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	fa93 f3a3 	rbit	r3, r3
 8005da2:	61fb      	str	r3, [r7, #28]
  return result;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005dae:	2320      	movs	r3, #32
 8005db0:	e003      	b.n	8005dba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	fab3 f383 	clz	r3, r3
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005dc8:	bf00      	nop
 8005dca:	372c      	adds	r7, #44	; 0x2c
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b08b      	sub	sp, #44	; 0x2c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	613b      	str	r3, [r7, #16]
  return result;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	e003      	b.n	8005e06 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	fab3 f383 	clz	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	2103      	movs	r1, #3
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	401a      	ands	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	fa93 f3a3 	rbit	r3, r3
 8005e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e28:	2320      	movs	r3, #32
 8005e2a:	e003      	b.n	8005e34 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	fab3 f383 	clz	r3, r3
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	60da      	str	r2, [r3, #12]
}
 8005e42:	bf00      	nop
 8005e44:	372c      	adds	r7, #44	; 0x2c
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b08b      	sub	sp, #44	; 0x2c
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	613b      	str	r3, [r7, #16]
  return result;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e74:	2320      	movs	r3, #32
 8005e76:	e003      	b.n	8005e80 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	fab3 f383 	clz	r3, r3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	210f      	movs	r1, #15
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	61fb      	str	r3, [r7, #28]
  return result;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	e003      	b.n	8005eae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	fab3 f383 	clz	r3, r3
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005ebc:	bf00      	nop
 8005ebe:	372c      	adds	r7, #44	; 0x2c
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b08b      	sub	sp, #44	; 0x2c
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	613b      	str	r3, [r7, #16]
  return result;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	e003      	b.n	8005efc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	210f      	movs	r1, #15
 8005f00:	fa01 f303 	lsl.w	r3, r1, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	401a      	ands	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	fa93 f3a3 	rbit	r3, r3
 8005f14:	61fb      	str	r3, [r7, #28]
  return result;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005f20:	2320      	movs	r3, #32
 8005f22:	e003      	b.n	8005f2c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005f3a:	bf00      	nop
 8005f3c:	372c      	adds	r7, #44	; 0x2c
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	fa93 f3a3 	rbit	r3, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
  return result;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <LL_GPIO_Init+0x26>
    return 32U;
 8005f68:	2320      	movs	r3, #32
 8005f6a:	e003      	b.n	8005f74 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005f76:	e040      	b.n	8005ffa <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d032      	beq.n	8005ff4 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	461a      	mov	r2, r3
 8005f94:	69b9      	ldr	r1, [r7, #24]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fe8a 	bl	8005cb0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d003      	beq.n	8005fac <LL_GPIO_Init+0x66>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d106      	bne.n	8005fba <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fed0 	bl	8005d5a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	69b9      	ldr	r1, [r7, #24]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff ff06 	bl	8005dd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d111      	bne.n	8005ff4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2bff      	cmp	r3, #255	; 0xff
 8005fd4:	d807      	bhi.n	8005fe6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff ff35 	bl	8005e4e <LL_GPIO_SetAFPin_0_7>
 8005fe4:	e006      	b.n	8005ff4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	461a      	mov	r2, r3
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ff6a 	bl	8005ec8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1b7      	bne.n	8005f78 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d003      	beq.n	8006018 <LL_GPIO_Init+0xd2>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d107      	bne.n	8006028 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	461a      	mov	r2, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fe81 	bl	8005d2a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <LL_LPUART_IsEnabled>:
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <LL_LPUART_IsEnabled+0x18>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <LL_LPUART_IsEnabled+0x1a>
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_LPUART_SetPrescaler>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f023 030f 	bic.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	b292      	uxth	r2, r2
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_LPUART_SetStopBitsLength>:
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <LL_LPUART_SetHWFlowCtrl>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_LPUART_SetBaudRate>:
{
 80060cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	4b19      	ldr	r3, [pc, #100]	; (8006150 <LL_LPUART_SetBaudRate+0x84>)
 80060ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f04f 0400 	mov.w	r4, #0
 80060f6:	461a      	mov	r2, r3
 80060f8:	4623      	mov	r3, r4
 80060fa:	f7fa f87f 	bl	80001fc <__aeabi_uldivmod>
 80060fe:	4603      	mov	r3, r0
 8006100:	460c      	mov	r4, r1
 8006102:	4619      	mov	r1, r3
 8006104:	4622      	mov	r2, r4
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	f04f 0400 	mov.w	r4, #0
 800610e:	0214      	lsls	r4, r2, #8
 8006110:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006114:	020b      	lsls	r3, r1, #8
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	0852      	lsrs	r2, r2, #1
 800611a:	4611      	mov	r1, r2
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	eb13 0b01 	adds.w	fp, r3, r1
 8006124:	eb44 0c02 	adc.w	ip, r4, r2
 8006128:	4658      	mov	r0, fp
 800612a:	4661      	mov	r1, ip
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f04f 0400 	mov.w	r4, #0
 8006132:	461a      	mov	r2, r3
 8006134:	4623      	mov	r3, r4
 8006136:	f7fa f861 	bl	80001fc <__aeabi_uldivmod>
 800613a:	4603      	mov	r3, r0
 800613c:	460c      	mov	r4, r1
 800613e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	60da      	str	r2, [r3, #12]
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006150:	080067e4 	.word	0x080067e4

08006154 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff ff65 	bl	8006032 <LL_LPUART_IsEnabled>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d136      	bne.n	80061dc <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <LL_LPUART_Init+0x94>)
 8006174:	4013      	ands	r3, r2
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6891      	ldr	r1, [r2, #8]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	6912      	ldr	r2, [r2, #16]
 800617e:	4311      	orrs	r1, r2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	6952      	ldr	r2, [r2, #20]
 8006184:	430a      	orrs	r2, r1
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff74 	bl	8006080 <LL_LPUART_SetStopBitsLength>

    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ff81 	bl	80060a6 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80061a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80061a8:	f000 f8ea 	bl	8006380 <LL_RCC_GetLPUARTClockFreq>
 80061ac:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 80061bc:	2300      	movs	r3, #0
 80061be:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff ff7e 	bl	80060cc <LL_LPUART_SetBaudRate>
#if defined(USART_PRESC_PRESCALER)
    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff3e 	bl	8006058 <LL_LPUART_SetPrescaler>
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	efffe9f3 	.word	0xefffe9f3

080061ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <LL_RCC_HSI_IsReady+0x24>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d101      	bne.n	8006202 <LL_RCC_HSI_IsReady+0x16>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <LL_RCC_HSI_IsReady+0x18>
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000

08006214 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006218:	4b07      	ldr	r3, [pc, #28]	; (8006238 <LL_RCC_LSE_IsReady+0x24>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d101      	bne.n	800622a <LL_RCC_LSE_IsReady+0x16>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <LL_RCC_LSE_IsReady+0x18>
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000

0800623c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b08      	cmp	r3, #8
 800624a:	d101      	bne.n	8006250 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	40021000 	.word	0x40021000

08006260 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <LL_RCC_MSI_GetRange+0x18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000

0800627c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006286:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	40021000 	.word	0x40021000

08006298 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <LL_RCC_GetSysClkSource+0x18>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40021000 	.word	0x40021000

080062b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <LL_RCC_GetAHBPrescaler+0x18>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000

080062d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000

080062ec <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <LL_RCC_GetLPUARTClockSource+0x20>)
 80062f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4013      	ands	r3, r2
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000

08006310 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <LL_RCC_PLL_GetMainSource+0x18>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0303 	and.w	r3, r3, #3
}
 800631c:	4618      	mov	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000

0800632c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <LL_RCC_PLL_GetN+0x18>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800633a:	4618      	mov	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40021000 	.word	0x40021000

08006348 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <LL_RCC_PLL_GetR+0x18>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006354:	4618      	mov	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000

08006364 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <LL_RCC_PLL_GetDivider+0x18>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000

08006380 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ffad 	bl	80062ec <LL_RCC_GetLPUARTClockSource>
 8006392:	4603      	mov	r3, r0
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d00c      	beq.n	80063b4 <LL_RCC_GetLPUARTClockFreq+0x34>
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d802      	bhi.n	80063a6 <LL_RCC_GetLPUARTClockFreq+0x26>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <LL_RCC_GetLPUARTClockFreq+0x5e>
    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
      break;

    default:
      break;
 80063a4:	e02a      	b.n	80063fc <LL_RCC_GetLPUARTClockFreq+0x7c>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80063a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063aa:	d007      	beq.n	80063bc <LL_RCC_GetLPUARTClockFreq+0x3c>
 80063ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b0:	d00c      	beq.n	80063cc <LL_RCC_GetLPUARTClockFreq+0x4c>
      break;
 80063b2:	e023      	b.n	80063fc <LL_RCC_GetLPUARTClockFreq+0x7c>
      lpuart_frequency = RCC_GetSystemClockFreq();
 80063b4:	f000 f82a 	bl	800640c <RCC_GetSystemClockFreq>
 80063b8:	60f8      	str	r0, [r7, #12]
      break;
 80063ba:	e01f      	b.n	80063fc <LL_RCC_GetLPUARTClockFreq+0x7c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80063bc:	f7ff ff16 	bl	80061ec <LL_RCC_HSI_IsReady>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d017      	beq.n	80063f6 <LL_RCC_GetLPUARTClockFreq+0x76>
        lpuart_frequency = HSI_VALUE;
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <LL_RCC_GetLPUARTClockFreq+0x88>)
 80063c8:	60fb      	str	r3, [r7, #12]
      break;
 80063ca:	e014      	b.n	80063f6 <LL_RCC_GetLPUARTClockFreq+0x76>
      if (LL_RCC_LSE_IsReady() != 0U)
 80063cc:	f7ff ff22 	bl	8006214 <LL_RCC_LSE_IsReady>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <LL_RCC_GetLPUARTClockFreq+0x7a>
        lpuart_frequency = LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063da:	60fb      	str	r3, [r7, #12]
      break;
 80063dc:	e00d      	b.n	80063fa <LL_RCC_GetLPUARTClockFreq+0x7a>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80063de:	f000 f815 	bl	800640c <RCC_GetSystemClockFreq>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f8a1 	bl	800652c <RCC_GetHCLKClockFreq>
 80063ea:	4603      	mov	r3, r0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f8b3 	bl	8006558 <RCC_GetPCLK1ClockFreq>
 80063f2:	60f8      	str	r0, [r7, #12]
      break;
 80063f4:	e002      	b.n	80063fc <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 80063fa:	bf00      	nop
  }

  return lpuart_frequency;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	00f42400 	.word	0x00f42400

0800640c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006412:	f7ff ff41 	bl	8006298 <LL_RCC_GetSysClkSource>
 8006416:	4603      	mov	r3, r0
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d851      	bhi.n	80064c0 <RCC_GetSystemClockFreq+0xb4>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <RCC_GetSystemClockFreq+0x18>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	080064c1 	.word	0x080064c1
 800642c:	080064c1 	.word	0x080064c1
 8006430:	080064c1 	.word	0x080064c1
 8006434:	080064ad 	.word	0x080064ad
 8006438:	080064c1 	.word	0x080064c1
 800643c:	080064c1 	.word	0x080064c1
 8006440:	080064c1 	.word	0x080064c1
 8006444:	080064b3 	.word	0x080064b3
 8006448:	080064c1 	.word	0x080064c1
 800644c:	080064c1 	.word	0x080064c1
 8006450:	080064c1 	.word	0x080064c1
 8006454:	080064b9 	.word	0x080064b9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006458:	f7ff fef0 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d111      	bne.n	8006486 <RCC_GetSystemClockFreq+0x7a>
 8006462:	f7ff feeb 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <RCC_GetSystemClockFreq+0x6a>
 800646c:	f7ff fef8 	bl	8006260 <LL_RCC_MSI_GetRange>
 8006470:	4603      	mov	r3, r0
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	e003      	b.n	800647e <RCC_GetSystemClockFreq+0x72>
 8006476:	f7ff ff01 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 800647a:	4603      	mov	r3, r0
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	4a28      	ldr	r2, [pc, #160]	; (8006520 <RCC_GetSystemClockFreq+0x114>)
 8006480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006484:	e010      	b.n	80064a8 <RCC_GetSystemClockFreq+0x9c>
 8006486:	f7ff fed9 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <RCC_GetSystemClockFreq+0x8e>
 8006490:	f7ff fee6 	bl	8006260 <LL_RCC_MSI_GetRange>
 8006494:	4603      	mov	r3, r0
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	e003      	b.n	80064a2 <RCC_GetSystemClockFreq+0x96>
 800649a:	f7ff feef 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 800649e:	4603      	mov	r3, r0
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <RCC_GetSystemClockFreq+0x114>)
 80064a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80064aa:	e033      	b.n	8006514 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <RCC_GetSystemClockFreq+0x118>)
 80064ae:	607b      	str	r3, [r7, #4]
      break;
 80064b0:	e030      	b.n	8006514 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <RCC_GetSystemClockFreq+0x11c>)
 80064b4:	607b      	str	r3, [r7, #4]
      break;
 80064b6:	e02d      	b.n	8006514 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80064b8:	f000 f862 	bl	8006580 <RCC_PLL_GetFreqDomain_SYS>
 80064bc:	6078      	str	r0, [r7, #4]
      break;
 80064be:	e029      	b.n	8006514 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80064c0:	f7ff febc 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d111      	bne.n	80064ee <RCC_GetSystemClockFreq+0xe2>
 80064ca:	f7ff feb7 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <RCC_GetSystemClockFreq+0xd2>
 80064d4:	f7ff fec4 	bl	8006260 <LL_RCC_MSI_GetRange>
 80064d8:	4603      	mov	r3, r0
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	e003      	b.n	80064e6 <RCC_GetSystemClockFreq+0xda>
 80064de:	f7ff fecd 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 80064e2:	4603      	mov	r3, r0
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	4a0e      	ldr	r2, [pc, #56]	; (8006520 <RCC_GetSystemClockFreq+0x114>)
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	e010      	b.n	8006510 <RCC_GetSystemClockFreq+0x104>
 80064ee:	f7ff fea5 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <RCC_GetSystemClockFreq+0xf6>
 80064f8:	f7ff feb2 	bl	8006260 <LL_RCC_MSI_GetRange>
 80064fc:	4603      	mov	r3, r0
 80064fe:	091b      	lsrs	r3, r3, #4
 8006500:	e003      	b.n	800650a <RCC_GetSystemClockFreq+0xfe>
 8006502:	f7ff febb 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 8006506:	4603      	mov	r3, r0
 8006508:	091b      	lsrs	r3, r3, #4
 800650a:	4a05      	ldr	r2, [pc, #20]	; (8006520 <RCC_GetSystemClockFreq+0x114>)
 800650c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006510:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006512:	bf00      	nop
  }

  return frequency;
 8006514:	687b      	ldr	r3, [r7, #4]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	080067b4 	.word	0x080067b4
 8006524:	00f42400 	.word	0x00f42400
 8006528:	007a1200 	.word	0x007a1200

0800652c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006534:	f7ff febe 	bl	80062b4 <LL_RCC_GetAHBPrescaler>
 8006538:	4603      	mov	r3, r0
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <RCC_GetHCLKClockFreq+0x28>)
 8006542:	5cd3      	ldrb	r3, [r2, r3]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	40d3      	lsrs	r3, r2
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	0800679c 	.word	0x0800679c

08006558 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006560:	f7ff feb6 	bl	80062d0 <LL_RCC_GetAPB1Prescaler>
 8006564:	4603      	mov	r3, r0
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	4a04      	ldr	r2, [pc, #16]	; (800657c <RCC_GetPCLK1ClockFreq+0x24>)
 800656a:	5cd3      	ldrb	r3, [r2, r3]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	40d3      	lsrs	r3, r2
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	080067ac 	.word	0x080067ac

08006580 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006586:	f7ff fec3 	bl	8006310 <LL_RCC_PLL_GetMainSource>
 800658a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d02d      	beq.n	80065ee <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8006592:	2b03      	cmp	r3, #3
 8006594:	d02e      	beq.n	80065f4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8006596:	2b01      	cmp	r3, #1
 8006598:	d12f      	bne.n	80065fa <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800659a:	f7ff fe4f 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <RCC_PLL_GetFreqDomain_SYS+0x48>
 80065a4:	f7ff fe4a 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <RCC_PLL_GetFreqDomain_SYS+0x38>
 80065ae:	f7ff fe57 	bl	8006260 <LL_RCC_MSI_GetRange>
 80065b2:	4603      	mov	r3, r0
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	e003      	b.n	80065c0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80065b8:	f7ff fe60 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 80065bc:	4603      	mov	r3, r0
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80065c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c6:	e010      	b.n	80065ea <RCC_PLL_GetFreqDomain_SYS+0x6a>
 80065c8:	f7ff fe38 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80065d2:	f7ff fe45 	bl	8006260 <LL_RCC_MSI_GetRange>
 80065d6:	4603      	mov	r3, r0
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	e003      	b.n	80065e4 <RCC_PLL_GetFreqDomain_SYS+0x64>
 80065dc:	f7ff fe4e 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 80065e0:	4603      	mov	r3, r0
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	4a26      	ldr	r2, [pc, #152]	; (8006680 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80065ec:	e02f      	b.n	800664e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80065ee:	4b25      	ldr	r3, [pc, #148]	; (8006684 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80065f0:	607b      	str	r3, [r7, #4]
      break;
 80065f2:	e02c      	b.n	800664e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80065f6:	607b      	str	r3, [r7, #4]
      break;
 80065f8:	e029      	b.n	800664e <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065fa:	f7ff fe1f 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d111      	bne.n	8006628 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8006604:	f7ff fe1a 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <RCC_PLL_GetFreqDomain_SYS+0x98>
 800660e:	f7ff fe27 	bl	8006260 <LL_RCC_MSI_GetRange>
 8006612:	4603      	mov	r3, r0
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	e003      	b.n	8006620 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8006618:	f7ff fe30 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 800661c:	4603      	mov	r3, r0
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	4a17      	ldr	r2, [pc, #92]	; (8006680 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8006622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006626:	e010      	b.n	800664a <RCC_PLL_GetFreqDomain_SYS+0xca>
 8006628:	f7ff fe08 	bl	800623c <LL_RCC_MSI_IsEnabledRangeSelect>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8006632:	f7ff fe15 	bl	8006260 <LL_RCC_MSI_GetRange>
 8006636:	4603      	mov	r3, r0
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	e003      	b.n	8006644 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 800663c:	f7ff fe1e 	bl	800627c <LL_RCC_MSI_GetRangeAfterStandby>
 8006640:	4603      	mov	r3, r0
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	4a0e      	ldr	r2, [pc, #56]	; (8006680 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8006646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800664c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800664e:	f7ff fe89 	bl	8006364 <LL_RCC_PLL_GetDivider>
 8006652:	4603      	mov	r3, r0
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	3301      	adds	r3, #1
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	fbb2 f4f3 	udiv	r4, r2, r3
 800665e:	f7ff fe65 	bl	800632c <LL_RCC_PLL_GetN>
 8006662:	4603      	mov	r3, r0
 8006664:	fb03 f404 	mul.w	r4, r3, r4
 8006668:	f7ff fe6e 	bl	8006348 <LL_RCC_PLL_GetR>
 800666c:	4603      	mov	r3, r0
 800666e:	0e5b      	lsrs	r3, r3, #25
 8006670:	3301      	adds	r3, #1
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bd90      	pop	{r4, r7, pc}
 8006680:	080067b4 	.word	0x080067b4
 8006684:	00f42400 	.word	0x00f42400
 8006688:	007a1200 	.word	0x007a1200

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4e0d      	ldr	r6, [pc, #52]	; (80066c4 <__libc_init_array+0x38>)
 8006690:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006692:	1ba4      	subs	r4, r4, r6
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	2500      	movs	r5, #0
 8006698:	42a5      	cmp	r5, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4e0b      	ldr	r6, [pc, #44]	; (80066cc <__libc_init_array+0x40>)
 800669e:	4c0c      	ldr	r4, [pc, #48]	; (80066d0 <__libc_init_array+0x44>)
 80066a0:	f000 f820 	bl	80066e4 <_init>
 80066a4:	1ba4      	subs	r4, r4, r6
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	2500      	movs	r5, #0
 80066aa:	42a5      	cmp	r5, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b4:	4798      	blx	r3
 80066b6:	3501      	adds	r5, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066be:	4798      	blx	r3
 80066c0:	3501      	adds	r5, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	08006804 	.word	0x08006804
 80066c8:	08006804 	.word	0x08006804
 80066cc:	08006804 	.word	0x08006804
 80066d0:	08006808 	.word	0x08006808

080066d4 <memset>:
 80066d4:	4402      	add	r2, r0
 80066d6:	4603      	mov	r3, r0
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	f803 1b01 	strb.w	r1, [r3], #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
