
STM32L4R5ZI-OV7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006674  08006674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800667c  0800667c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025930  2000000c  08006690  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002593c  08006690  0002593c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119f3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025c1  00000000  00000000  00031a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c78f  00000000  00000000  00035e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf6b  00000000  00000000  000625f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010930e  00000000  00000000  0006f562  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  001788ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006558 	.word	0x08006558

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006558 	.word	0x08006558

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f043 0201 	orr.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	075b      	lsls	r3, r3, #29
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	609a      	str	r2, [r3, #8]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	065b      	lsls	r3, r3, #25
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	609a      	str	r2, [r3, #8]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4013      	ands	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LL_DMA_SetDataTransferDirection+0x4c>)
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000724:	f023 0310 	bic.w	r3, r3, #16
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <LL_DMA_SetDataTransferDirection+0x4c>)
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	440a      	add	r2, r1
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	440a      	add	r2, r1
 8000736:	4611      	mov	r1, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800073e:	bf00      	nop
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	080065b0 	.word	0x080065b0

08000750 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LL_DMA_SetMode+0x48>)
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 0220 	bic.w	r2, r3, #32
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <LL_DMA_SetMode+0x48>)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	440b      	add	r3, r1
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4313      	orrs	r3, r2
 8000788:	600b      	str	r3, [r1, #0]
             Mode);
}
 800078a:	bf00      	nop
 800078c:	371c      	adds	r7, #28
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	080065b0 	.word	0x080065b0

0800079c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LL_DMA_SetPeriphIncMode+0x48>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007c0:	4908      	ldr	r1, [pc, #32]	; (80007e4 <LL_DMA_SetPeriphIncMode+0x48>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	440b      	add	r3, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	440b      	add	r3, r1
 80007ce:	4619      	mov	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80007d6:	bf00      	nop
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	080065b0 	.word	0x080065b0

080007e8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LL_DMA_SetMemoryIncMode+0x48>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <LL_DMA_SetMemoryIncMode+0x48>)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	440b      	add	r3, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	440b      	add	r3, r1
 800081a:	4619      	mov	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	080065b0 	.word	0x080065b0

08000834 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LL_DMA_SetPeriphSize+0x48>)
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000858:	4908      	ldr	r1, [pc, #32]	; (800087c <LL_DMA_SetPeriphSize+0x48>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	440b      	add	r3, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	440b      	add	r3, r1
 8000866:	4619      	mov	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800086e:	bf00      	nop
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	080065b0 	.word	0x080065b0

08000880 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <LL_DMA_SetMemorySize+0x48>)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80008a4:	4908      	ldr	r1, [pc, #32]	; (80008c8 <LL_DMA_SetMemorySize+0x48>)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	440b      	add	r3, r1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	440b      	add	r3, r1
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008ba:	bf00      	nop
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	080065b0 	.word	0x080065b0

080008cc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80008f0:	4908      	ldr	r1, [pc, #32]	; (8000914 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	440b      	add	r3, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	440b      	add	r3, r1
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000906:	bf00      	nop
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	080065b0 	.word	0x080065b0

08000918 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_AES_OUT
  *         @arg @ref LL_DMAMUX_REQ_HASH_IN
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	0a9b      	lsrs	r3, r3, #10
 8000928:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800092c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000930:	461a      	mov	r2, r3
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000944:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800095a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bf00      	nop
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fe57 	bl	8001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f828 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f9ea 	bl	8000d54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000980:	f000 f9ae 	bl	8000ce0 <MX_DMA_Init>
  MX_DCMI_Init();
 8000984:	f000 f8a2 	bl	8000acc <MX_DCMI_Init>
  MX_I2C2_Init();
 8000988:	f000 f8d4 	bl	8000b34 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800098c:	f000 f912 	bl	8000bb4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //i2c_check(); //Implement as part of ov7670 init function?
  ov7670_init();
 8000990:	f000 fb1c 	bl	8000fcc <ov7670_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  ov7670_read(0x0b); // read only register - version number
 8000994:	200b      	movs	r0, #11
 8000996:	f000 fab9 	bl	8000f0c <ov7670_read>
  ov7670_reg_check(); // Prints 0xAA and lights Green LED if all registers are sucessfully written
 800099a:	f000 fb47 	bl	800102c <ov7670_reg_check>
  //ov7670_read_all_reg();

  while (1)
  {

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800099e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <main+0x50>)
 80009a4:	f002 f828 	bl	80029f8 <HAL_GPIO_TogglePin>

	HAL_Delay(3000);
 80009a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ac:	f000 feb0 	bl	8001710 <HAL_Delay>

	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, RGB565_QVGA_SIZE);
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <main+0x54>)
 80009b2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009b6:	2102      	movs	r1, #2
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <main+0x58>)
 80009ba:	f001 f863 	bl	8001a84 <HAL_DCMI_Start_DMA>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009be:	e7ee      	b.n	800099e <main+0x2e>
 80009c0:	48000400 	.word	0x48000400
 80009c4:	20000028 	.word	0x20000028
 80009c8:	200258d4 	.word	0x200258d4

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0bc      	sub	sp, #240	; 0xf0
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fdb4 	bl	8006548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2294      	movs	r2, #148	; 0x94
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fda6 	bl	8006548 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 fc03 	bl	8004208 <HAL_PWREx_ControlVoltageScaling>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000a08:	f000 fa7c 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2322      	movs	r3, #34	; 0x22
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a38:	231e      	movs	r3, #30
 8000a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fc8b 	bl	8004370 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a60:	f000 fa50 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a86:	2105      	movs	r1, #5
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 f897 	bl	8004bbc <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a94:	f000 fa36 	bl	8000f04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C2;
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fb34 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ab2:	f000 fa27 	bl	8000f04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_2);
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f004 f9a8 	bl	8004e14 <HAL_RCC_MCOConfig>
}
 8000ac4:	bf00      	nop
 8000ac6:	37f0      	adds	r7, #240	; 0xf0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_DCMI_Init+0x64>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_DCMI_Init+0x60>)
 8000b1a:	f000 ff2d 	bl	8001978 <HAL_DCMI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 f9ee 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200258d4 	.word	0x200258d4
 8000b30:	50050000 	.word	0x50050000

08000b34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <MX_I2C2_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <MX_I2C2_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b70:	f001 ff5c 	bl	8002a2c <HAL_I2C_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 f9c3 	bl	8000f04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b82:	f003 fa89 	bl	8004098 <HAL_I2CEx_ConfigAnalogFilter>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f9ba 	bl	8000f04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2C2_Init+0x74>)
 8000b94:	f003 facb 	bl	800412e <HAL_I2CEx_ConfigDigitalFilter>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 f9b1 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20025828 	.word	0x20025828
 8000bac:	40005800 	.word	0x40005800
 8000bb0:	307075b1 	.word	0x307075b1

08000bb4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff fd76 	bl	80006d0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000be4:	2040      	movs	r0, #64	; 0x40
 8000be6:	f7ff fd5b 	bl	80006a0 <LL_AHB2_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
 8000bea:	f003 fbb1 	bl	8004350 <HAL_PWREx_EnableVddIO2>
  /**LPUART1 GPIO Configuration
  PG7   ------> LPUART1_TX
  PG8   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8000bee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c04:	2308      	movs	r3, #8
 8000c06:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4831      	ldr	r0, [pc, #196]	; (8000cd4 <MX_LPUART1_UART_Init+0x120>)
 8000c0e:	f005 f8d4 	bl	8005dba <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_LPUART1_TX);
 8000c12:	2223      	movs	r2, #35	; 0x23
 8000c14:	2100      	movs	r1, #0
 8000c16:	4830      	ldr	r0, [pc, #192]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c18:	f7ff fe7e 	bl	8000918 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	482d      	ldr	r0, [pc, #180]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c22:	f7ff fd6d 	bl	8000700 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	482a      	ldr	r0, [pc, #168]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c2e:	f7ff fe4d 	bl	80008cc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c38:	f7ff fd8a 	bl	8000750 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c42:	f7ff fdab 	bl	800079c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c4c:	f7ff fdcc 	bl	80007e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c56:	f7ff fded 	bl	8000834 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	481e      	ldr	r0, [pc, #120]	; (8000cd8 <MX_LPUART1_UART_Init+0x124>)
 8000c60:	f7ff fe0e 	bl	8000880 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c64:	f7ff fc4a 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc9a 	bl	80005a8 <NVIC_EncodePriority>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4619      	mov	r1, r3
 8000c78:	2046      	movs	r0, #70	; 0x46
 8000c7a:	f7ff fc6b 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8000c7e:	2046      	movs	r0, #70	; 0x46
 8000c80:	f7ff fc4a 	bl	8000518 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 8000c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c8c:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_LPUART1_UART_Init+0x128>)
 8000caa:	f005 f98d 	bl	8005fc8 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480a      	ldr	r0, [pc, #40]	; (8000cdc <MX_LPUART1_UART_Init+0x128>)
 8000cb2:	f7ff fccc 	bl	800064e <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_LPUART1_UART_Init+0x128>)
 8000cba:	f7ff fcdc 	bl	8000676 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_LPUART1_UART_Init+0x128>)
 8000cc0:	f7ff fcb5 	bl	800062e <LL_LPUART_DisableFIFO>
  LL_LPUART_Enable(LPUART1);
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_LPUART1_UART_Init+0x128>)
 8000cc6:	f7ff fca2 	bl	800060e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	48001800 	.word	0x48001800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40008000 	.word	0x40008000

08000ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_DMA_Init+0x70>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <MX_DMA_Init+0x70>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6493      	str	r3, [r2, #72]	; 0x48
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_DMA_Init+0x70>)
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_DMA_Init+0x70>)
 8000d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_DMA_Init+0x70>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6493      	str	r3, [r2, #72]	; 0x48
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_DMA_Init+0x70>)
 8000d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d16:	f7ff fbf1 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc41 	bl	80005a8 <NVIC_EncodePriority>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f7ff fc12 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d30:	200b      	movs	r0, #11
 8000d32:	f7ff fbf1 	bl	8000518 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	f000 fde5 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d40:	200c      	movs	r0, #12
 8000d42:	f000 fdfe 	bl	8001942 <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a59      	ldr	r2, [pc, #356]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a53      	ldr	r2, [pc, #332]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000da0:	f043 0320 	orr.w	r3, r3, #32
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0320 	and.w	r3, r3, #32
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a47      	ldr	r2, [pc, #284]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000dfa:	f003 faa9 	bl	8004350 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <MX_GPIO_Init+0x180>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1c:	482e      	ldr	r0, [pc, #184]	; (8000ed8 <MX_GPIO_Init+0x184>)
 8000e1e:	f001 fdd3 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <MX_GPIO_Init+0x188>)
 8000e28:	f001 fdce 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2102      	movs	r1, #2
 8000e30:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x18c>)
 8000e32:	f001 fdc9 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e40:	2302      	movs	r3, #2
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <MX_GPIO_Init+0x188>)
 8000e4c:	f001 fc2a 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <MX_GPIO_Init+0x184>)
 8000e6a:	f001 fc1b 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_GPIO_Init+0x188>)
 8000e86:	f001 fc0d 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f001 fbfb 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_GPIO_Init+0x18c>)
 8000ec6:	f001 fbed 	bl	80026a4 <HAL_GPIO_Init>

}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48001000 	.word	0x48001000

08000ee4 <HAL_DCMI_FrameEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_FrameEventCallback() callback can be implemented in the user file.
   */
  Serial_com(&frame_buffer[0], RGB565_QVGA_SIZE_8BIT); //Send the Frame buffer to PC
 8000eec:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000ef2:	f000 fb4b 	bl	800158c <Serial_com>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000028 	.word	0x20000028

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <Error_Handler+0x6>

08000f0c <ov7670_read>:
extern I2C_HandleTypeDef hi2c2;



void ov7670_read(uint8_t reg_addr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	2142      	movs	r1, #66	; 0x42
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <ov7670_read+0x44>)
 8000f26:	f001 fe11 	bl	8002b4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 8000f2a:	f107 020c 	add.w	r2, r7, #12
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	2142      	movs	r1, #66	; 0x42
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <ov7670_read+0x44>)
 8000f38:	f001 fefc 	bl	8002d34 <HAL_I2C_Master_Receive>
	Serial_com(&buffer[0], 1);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fb22 	bl	800158c <Serial_com>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20025828 	.word	0x20025828

08000f54 <ov7670_write>:

void ov7670_write(uint8_t reg_addr, uint8_t data)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af04      	add	r7, sp, #16
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, OV7670_WRITE_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT , &data, 1, 100); // I2C_MEMADD_SIZE_8BIT is defined in the HAL library
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	1dbb      	adds	r3, r7, #6
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2142      	movs	r1, #66	; 0x42
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <ov7670_write+0x34>)
 8000f7a:	f001 ffd1 	bl	8002f20 <HAL_I2C_Mem_Write>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20025828 	.word	0x20025828

08000f8c <ov7670_read_return>:

uint8_t ov7670_read_return(uint8_t reg_addr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, OV7670_WRITE_ADDR, &reg_addr, 1, 100);
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2142      	movs	r1, #66	; 0x42
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <ov7670_read_return+0x3c>)
 8000fa6:	f001 fdd1 	bl	8002b4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, OV7670_WRITE_ADDR, buffer, 1, 100);
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2142      	movs	r1, #66	; 0x42
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <ov7670_read_return+0x3c>)
 8000fb8:	f001 febc 	bl	8002d34 <HAL_I2C_Master_Receive>
	return buffer[0];
 8000fbc:	7b3b      	ldrb	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20025828 	.word	0x20025828

08000fcc <ov7670_init>:
//  return ov7670_config(ov7670Mode);
//}


void ov7670_init()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
//	uint8_t buffer[0];
//	buffer[0] = 0x01;
//  //ov7670_hard_reset();
  ov7670_write(0x12, 0x80);  // soft reset
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	2012      	movs	r0, #18
 8000fd6:	f7ff ffbd 	bl	8000f54 <ov7670_write>
  HAL_Delay(500);			 // Needs a delay after reset otherwise all registers are 0x00
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f000 fb97 	bl	8001710 <HAL_Delay>

  // Configure camera
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e011      	b.n	800100c <ov7670_init+0x40>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <ov7670_init+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <ov7670_init+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff ffaa 	bl	8000f54 <ov7670_write>
    HAL_Delay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 fb85 	bl	8001710 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <ov7670_init+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001014:	2bff      	cmp	r3, #255	; 0xff
 8001016:	d1e7      	bne.n	8000fe8 <ov7670_init+0x1c>
  }
  HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f000 fb78 	bl	8001710 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	080065b8 	.word	0x080065b8

0800102c <ov7670_reg_check>:
	HAL_Delay(1000);
  }
}

void ov7670_reg_check()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 uint8_t buffer[1] = {00};
 8001032:	2300      	movs	r3, #0
 8001034:	713b      	strb	r3, [r7, #4]
 uint8_t counter = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
 uint8_t tot_reg_num = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	e01b      	b.n	800107c <ov7670_reg_check+0x50>
	 tot_reg_num++;
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	3301      	adds	r3, #1
 8001048:	73bb      	strb	r3, [r7, #14]
	if (ov7670_read_return(OV7670_reg[i][0]) == OV7670_reg[i][1])
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <ov7670_reg_check+0xa0>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff9a 	bl	8000f8c <ov7670_read_return>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <ov7670_reg_check+0xa0>)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4299      	cmp	r1, r3
 8001068:	d102      	bne.n	8001070 <ov7670_reg_check+0x44>
	{
		counter++;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	3301      	adds	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
	}
	HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 fb4d 	bl	8001710 <HAL_Delay>
 for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <ov7670_reg_check+0xa0>)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d1dd      	bne.n	8001044 <ov7670_reg_check+0x18>
  }
 if (counter == tot_reg_num)
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	429a      	cmp	r2, r3
 800108e:	d10c      	bne.n	80010aa <ov7670_reg_check+0x7e>
 {
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <ov7670_reg_check+0xa4>)
 8001096:	f001 fc97 	bl	80029c8 <HAL_GPIO_WritePin>
	 buffer[0] = 0xAA;
 800109a:	23aa      	movs	r3, #170	; 0xaa
 800109c:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fa72 	bl	800158c <Serial_com>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
	 buffer[0] = 0xFA;
	 Serial_com(&buffer[0], 1);
	 //HAL_UART_Transmit(&hlpuart1, buffer, 1, 10);
 }
}
 80010a8:	e00b      	b.n	80010c2 <ov7670_reg_check+0x96>
	 HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <ov7670_reg_check+0xa4>)
 80010b0:	f001 fc8a 	bl	80029c8 <HAL_GPIO_WritePin>
	 buffer[0] = 0xFA;
 80010b4:	23fa      	movs	r3, #250	; 0xfa
 80010b6:	713b      	strb	r3, [r7, #4]
	 Serial_com(&buffer[0], 1);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fa65 	bl	800158c <Serial_com>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	080065b8 	.word	0x080065b8
 80010d0:	48000800 	.word	0x48000800

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x44>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_MspInit+0x44>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x44>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x44>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x44>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a84      	ldr	r2, [pc, #528]	; (800134c <HAL_DCMI_MspInit+0x230>)
 800113a:	4293      	cmp	r3, r2
 800113c:	f040 8101 	bne.w	8001342 <HAL_DCMI_MspInit+0x226>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001140:	4b83      	ldr	r3, [pc, #524]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	4a82      	ldr	r2, [pc, #520]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001158:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001164:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b77      	ldr	r3, [pc, #476]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a76      	ldr	r2, [pc, #472]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b74      	ldr	r3, [pc, #464]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	4b71      	ldr	r3, [pc, #452]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a70      	ldr	r2, [pc, #448]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b6b      	ldr	r3, [pc, #428]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ac:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b65      	ldr	r3, [pc, #404]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	4a64      	ldr	r2, [pc, #400]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c4:	4b62      	ldr	r3, [pc, #392]	; (8001350 <HAL_DCMI_MspInit+0x234>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PA10     ------> DCMI_D1
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011d0:	2370      	movs	r3, #112	; 0x70
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d8:	2302      	movs	r3, #2
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80011e0:	230a      	movs	r3, #10
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	485a      	ldr	r0, [pc, #360]	; (8001354 <HAL_DCMI_MspInit+0x238>)
 80011ec:	f001 fa5a 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f0:	2310      	movs	r3, #16
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001200:	230a      	movs	r3, #10
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f001 fa49 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001212:	2340      	movs	r3, #64	; 0x40
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001222:	2304      	movs	r3, #4
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f001 fa38 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001234:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	2302      	movs	r3, #2
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001246:	230a      	movs	r3, #10
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4841      	ldr	r0, [pc, #260]	; (8001358 <HAL_DCMI_MspInit+0x23c>)
 8001252:	f001 fa27 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001260:	2302      	movs	r3, #2
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001268:	2304      	movs	r3, #4
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4839      	ldr	r0, [pc, #228]	; (8001358 <HAL_DCMI_MspInit+0x23c>)
 8001274:	f001 fa16 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001282:	2302      	movs	r3, #2
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_DCMI;
 800128a:	2305      	movs	r3, #5
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f001 fa04 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800129c:	2308      	movs	r3, #8
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80012ac:	2304      	movs	r3, #4
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4829      	ldr	r0, [pc, #164]	; (800135c <HAL_DCMI_MspInit+0x240>)
 80012b8:	f001 f9f4 	bl	80026a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012cc:	230a      	movs	r3, #10
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4822      	ldr	r0, [pc, #136]	; (8001360 <HAL_DCMI_MspInit+0x244>)
 80012d8:	f001 f9e4 	bl	80026a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Channel2;
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_DCMI_MspInit+0x24c>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012e4:	225a      	movs	r2, #90	; 0x5a
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 8001304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001308:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001316:	4813      	ldr	r0, [pc, #76]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 8001318:	f000 fee4 	bl	80020e4 <HAL_DMA_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_DCMI_MspInit+0x20a>
    {
      Error_Handler();
 8001322:	f7ff fdef 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 800132a:	651a      	str	r2, [r3, #80]	; 0x50
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_DCMI_MspInit+0x248>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6293      	str	r3, [r2, #40]	; 0x28

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2055      	movs	r0, #85	; 0x55
 8001338:	f000 fae7 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800133c:	2055      	movs	r0, #85	; 0x55
 800133e:	f000 fb00 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	50050000 	.word	0x50050000
 8001350:	40021000 	.word	0x40021000
 8001354:	48001000 	.word	0x48001000
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00
 8001360:	48000400 	.word	0x48000400
 8001364:	20025874 	.word	0x20025874
 8001368:	4002001c 	.word	0x4002001c

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_I2C_MspInit+0x9c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d137      	bne.n	80013fe <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_I2C_MspInit+0xa0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_I2C_MspInit+0xa0>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_I2C_MspInit+0xa0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013a6:	2303      	movs	r3, #3
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013b6:	2304      	movs	r3, #4
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <HAL_I2C_MspInit+0xa4>)
 80013c2:	f001 f96f 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_I2C_MspInit+0xa0>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_I2C_MspInit+0xa0>)
 80013cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_I2C_MspInit+0xa0>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2021      	movs	r0, #33	; 0x21
 80013e4:	f000 fa91 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013e8:	2021      	movs	r0, #33	; 0x21
 80013ea:	f000 faaa 	bl	8001942 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2022      	movs	r0, #34	; 0x22
 80013f4:	f000 fa89 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013f8:	2022      	movs	r0, #34	; 0x22
 80013fa:	f000 faa2 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40005800 	.word	0x40005800
 800140c:	40021000 	.word	0x40021000
 8001410:	48001400 	.word	0x48001400

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 f936 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DMA1_Channel2_IRQHandler+0x10>)
 800147e:	f000 ffb3 	bl	80023e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20025874 	.word	0x20025874

0800148c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <I2C2_EV_IRQHandler+0x10>)
 8001492:	f001 fe59 	bl	8003148 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20025828 	.word	0x20025828

080014a0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <I2C2_ER_IRQHandler+0x10>)
 80014a6:	f001 fe69 	bl	800317c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20025828 	.word	0x20025828

080014b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DCMI_IRQHandler+0x10>)
 80014ca:	f000 fbb1 	bl	8001c30 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200258d4 	.word	0x200258d4

080014d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <SystemInit+0x64>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <SystemInit+0x64>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <SystemInit+0x68>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <SystemInit+0x68>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <SystemInit+0x68>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <SystemInit+0x68>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <SystemInit+0x68>)
 8001504:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001508:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800150c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <SystemInit+0x68>)
 8001510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001514:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SystemInit+0x68>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <SystemInit+0x68>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <SystemInit+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <SystemInit+0x64>)
 800152a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152e:	609a      	str	r2, [r3, #8]
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	40021000 	.word	0x40021000

08001544 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d101      	bne.n	800155c <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <Serial_com>:
 */


#include "uart.h"

void Serial_com(uint8_t *s, uint32_t size) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	uint32_t counter = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 800159a:	e011      	b.n	80015c0 <Serial_com+0x34>
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1))
 800159c:	bf00      	nop
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <Serial_com+0x44>)
 80015a0:	f7ff ffd0 	bl	8001544 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f9      	beq.n	800159e <Serial_com+0x12>
			; // Wait for Empty
		LL_LPUART_TransmitData8(LPUART1, *s++);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <Serial_com+0x44>)
 80015b6:	f7ff ffd8 	bl	800156a <LL_LPUART_TransmitData8>
		counter++;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
	while (counter < size) {
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3e9      	bcc.n	800159c <Serial_com+0x10>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40008000 	.word	0x40008000

080015d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d8:	f7ff ff7e 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
	ldr	r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopForever+0x12>)
	b	LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LoopForever+0x16>)
	cmp	r2, r3
 80015fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001602:	f004 ff7d 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001606:	f7ff f9b3 	bl	8000970 <main>

0800160a <LoopForever>:

LoopForever:
    b LoopForever
 800160a:	e7fe      	b.n	800160a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800160c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001610:	08006684 	.word	0x08006684
	ldr	r0, =_sdata
 8001614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001618:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800161c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001620:	2002593c 	.word	0x2002593c

08001624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_IRQHandler>

08001626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f95f 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f80e 	bl	8001658 <HAL_InitTick>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	e001      	b.n	800164c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001648:	f7ff fd44 	bl	80010d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800164c:	79fb      	ldrb	r3, [r7, #7]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_InitTick+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_InitTick+0x70>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_InitTick+0x6c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f96b 	bl	800195e <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d809      	bhi.n	80016a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f935 	bl	800190a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e004      	b.n	80016b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e001      	b.n	80016b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20025938 	.word	0x20025938

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20025938 	.word	0x20025938

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_Delay+0x40>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e075      	b.n	8001a76 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fbbc 	bl	800111c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019ba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_DCMI_Init+0x108>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80019ee:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80019fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a06:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001a12:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a1e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d112      	bne.n	8001a56 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7f5b      	ldrb	r3, [r3, #29]
 8001a3a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001a3c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7f9b      	ldrb	r3, [r3, #30]
 8001a42:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001a44:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7fdb      	ldrb	r3, [r3, #31]
 8001a4c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001a52:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001a54:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 021f 	orr.w	r2, r2, #31
 8001a64:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	ffe0f007 	.word	0xffe0f007

08001a84 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DCMI_Start_DMA+0x1c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0bc      	b.n	8001c1a <HAL_DCMI_Start_DMA+0x196>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aba:	f023 0302 	bic.w	r3, r3, #2
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aca:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad0:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <HAL_DCMI_Start_DMA+0x1a0>)
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad8:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_DCMI_Start_DMA+0x1a4>)
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d21f      	bcs.n	8001b2c <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3328      	adds	r3, #40	; 0x28
 8001afc:	4619      	mov	r1, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	f000 fb97 	bl	8002234 <HAL_DMA_Start_IT>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d079      	beq.n	8001c00 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e076      	b.n	8001c1a <HAL_DCMI_Start_DMA+0x196>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	2220      	movs	r2, #32
 8001b32:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_DCMI_Start_DMA+0x1a8>)
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f000 fa07 	bl	8001f5c <DCMI_TransferSize>
 8001b4e:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e057      	b.n	8001c1a <HAL_DCMI_Start_DMA+0x196>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001b76:	3b01      	subs	r3, #1
 8001b78:	005a      	lsls	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	085a      	lsrs	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	441a      	add	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3328      	adds	r3, #40	; 0x28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f000 fb2d 	bl	8002234 <HAL_DMA_Start_IT>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00f      	beq.n	8001c00 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DCMI_Start_DMA+0x196>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08001d65 	.word	0x08001d65
 8001c28:	08001f2d 	.word	0x08001f2d
 8001c2c:	08001e95 	.word	0x08001e95

08001c30 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <HAL_DCMI_IRQHandler+0xf4>)
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fb46 	bl	800232a <HAL_DMA_Abort_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f93f 	bl	8001f2c <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f83b 	bl	8001d3c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f839 	bl	8001d50 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d019      	beq.n	8001d1c <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d10b      	bne.n	8001d0e <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 021e 	bic.w	r2, r2, #30
 8001d04:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff f8e4 	bl	8000ee4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	08001f2d 	.word	0x08001f2d

08001d28 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_LineEventCallback() callback can be implemented in the user file.
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_VsyncEventCallback() callback can be implemented in the user file.
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d05c      	beq.n	8001e34 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10c      	bne.n	8001da0 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001d9e:	e075      	b.n	8001e8c <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de6:	1ad2      	subs	r2, r2, r3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f000 fa15 	bl	8002234 <HAL_DMA_Start_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03d      	beq.n	8001e8c <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8001e2c:	69f8      	ldr	r0, [r7, #28]
 8001e2e:	f7ff ff7b 	bl	8001d28 <HAL_DCMI_ErrorCallback>
}
 8001e32:	e02b      	b.n	8001e8c <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d124      	bne.n	8001e8c <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01d      	beq.n	8001e8c <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d10f      	bne.n	8001e86 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 021e 	bic.w	r2, r2, #30
 8001e74:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8001e86:	69f8      	ldr	r0, [r7, #28]
 8001e88:	f7ff f82c 	bl	8000ee4 <HAL_DCMI_FrameEventCallback>
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03c      	beq.n	8001f24 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d036      	beq.n	8001f24 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	441a      	add	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001ef2:	68f9      	ldr	r1, [r7, #12]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f000 f99c 	bl	8002234 <HAL_DMA_Start_IT>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff02 	bl	8001d28 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff feea 	bl	8001d28 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b0a6      	sub	sp, #152	; 0x98
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t temp = InputSize;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t aPrime[NPRIME] = {0};
 8001f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fae5 	bl	8006548 <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t PrimeArray[NPRIME] = { 1UL,  2UL,  3UL,  5UL,
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <DCMI_TransferSize+0x184>)
 8001f86:	f107 040c 	add.w	r4, r7, #12
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 8001fa0:	e041      	b.n	8002026 <DCMI_TransferSize+0xca>
  {
    if (temp < PrimeArray[j])
 8001fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001fac:	4413      	add	r3, r2
 8001fae:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001fb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d33a      	bcc.n	8002030 <DCMI_TransferSize+0xd4>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 8001fba:	e01e      	b.n	8001ffa <DCMI_TransferSize+0x9e>
    {
      aPrime[j]++;
 8001fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001fd8:	440b      	add	r3, r1
 8001fda:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8001fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001fe8:	4413      	add	r3, r2
 8001fea:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001fee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while ((temp % PrimeArray[j]) == 0U)
 8001ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002004:	4413      	add	r3, r2
 8002006:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 800200a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800200e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002012:	fb02 f201 	mul.w	r2, r2, r1
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0cf      	beq.n	8001fbc <DCMI_TransferSize+0x60>
    }
    j++;
 800201c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002020:	3301      	adds	r3, #1
 8002022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while (j < NPRIME)
 8002026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d9b9      	bls.n	8001fa2 <DCMI_TransferSize+0x46>
 800202e:	e000      	b.n	8002032 <DCMI_TransferSize+0xd6>
      break;
 8002030:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count dividor 2 twice */
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	3b01      	subs	r3, #1
 8002036:	653b      	str	r3, [r7, #80]	; 0x50

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8002038:	230f      	movs	r3, #15
 800203a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 800203e:	e03f      	b.n	80020c0 <DCMI_TransferSize+0x164>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 8002040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800204a:	4413      	add	r3, r2
 800204c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8002050:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800205c:	4293      	cmp	r3, r2
 800205e:	d829      	bhi.n	80020b4 <DCMI_TransferSize+0x158>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 8002060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800206a:	4413      	add	r3, r2
 800206c:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 8002070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        aPrime[j]--;
 800207c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002086:	4413      	add	r3, r2
 8002088:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002098:	440b      	add	r3, r1
 800209a:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 800209e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020a8:	4413      	add	r3, r2
 80020aa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1c6      	bne.n	8002040 <DCMI_TransferSize+0xe4>
 80020b2:	e000      	b.n	80020b6 <DCMI_TransferSize+0x15a>
        break;
 80020b4:	bf00      	nop
      }
    }
    j--;
 80020b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80020c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <DCMI_TransferSize+0x178>
 80020c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d9e4      	bls.n	800209e <DCMI_TransferSize+0x142>
  }



  return output;
 80020d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3798      	adds	r7, #152	; 0x98
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdb0      	pop	{r4, r5, r7, pc}
 80020e0:	08006570 	.word	0x08006570

080020e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e08d      	b.n	8002212 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_DMA_Init+0x138>)
 80020fe:	429a      	cmp	r2, r3
 8002100:	d80f      	bhi.n	8002122 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	4b45      	ldr	r3, [pc, #276]	; (8002220 <HAL_DMA_Init+0x13c>)
 800210a:	4413      	add	r3, r2
 800210c:	4a45      	ldr	r2, [pc, #276]	; (8002224 <HAL_DMA_Init+0x140>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	009a      	lsls	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_DMA_Init+0x144>)
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
 8002120:	e00e      	b.n	8002140 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_DMA_Init+0x148>)
 800212a:	4413      	add	r3, r2
 800212c:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <HAL_DMA_Init+0x140>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <HAL_DMA_Init+0x14c>)
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa24 	bl	80025e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a0:	d102      	bne.n	80021a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_DMA_Init+0x104>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d80c      	bhi.n	80021e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fa44 	bl	800265c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	e008      	b.n	80021fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020407 	.word	0x40020407
 8002220:	bffdfff8 	.word	0xbffdfff8
 8002224:	cccccccd 	.word	0xcccccccd
 8002228:	40020000 	.word	0x40020000
 800222c:	bffdfbf8 	.word	0xbffdfbf8
 8002230:	40020400 	.word	0x40020400

08002234 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Start_IT+0x20>
 8002250:	2302      	movs	r3, #2
 8002252:	e066      	b.n	8002322 <HAL_DMA_Start_IT+0xee>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d155      	bne.n	8002314 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f968 	bl	8002562 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 020e 	orr.w	r2, r2, #14
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e00f      	b.n	80022cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 020a 	orr.w	r2, r2, #10
 80022ca:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e005      	b.n	8002320 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002320:	7dfb      	ldrb	r3, [r7, #23]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d005      	beq.n	800234e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e047      	b.n	80023de <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020e 	bic.w	r2, r2, #14
 800235c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f003 021c 	and.w	r2, r3, #28
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800239a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00c      	beq.n	80023be <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023bc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
    }
  }
  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f003 031c 	and.w	r3, r3, #28
 8002408:	2204      	movs	r2, #4
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d026      	beq.n	8002462 <HAL_DMA_IRQHandler+0x7a>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d021      	beq.n	8002462 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f003 021c 	and.w	r2, r3, #28
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2104      	movs	r1, #4
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d071      	beq.n	800253c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002460:	e06c      	b.n	800253c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 031c 	and.w	r3, r3, #28
 800246a:	2202      	movs	r2, #2
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02e      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xec>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d029      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020a 	bic.w	r2, r2, #10
 800249c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 021c 	and.w	r2, r3, #28
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2102      	movs	r1, #2
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d038      	beq.n	800253c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024d2:	e033      	b.n	800253c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f003 031c 	and.w	r3, r3, #28
 80024dc:	2208      	movs	r2, #8
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02a      	beq.n	800253e <HAL_DMA_IRQHandler+0x156>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d025      	beq.n	800253e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 020e 	bic.w	r2, r2, #14
 8002500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 021c 	and.w	r2, r3, #28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800253c:	bf00      	nop
 800253e:	bf00      	nop
}
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002554:	b2db      	uxtb	r3, r3
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002578:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800258a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f003 021c 	and.w	r2, r3, #28
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d108      	bne.n	80025c2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025c0:	e007      	b.n	80025d2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d80a      	bhi.n	800260a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002600:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6493      	str	r3, [r2, #72]	; 0x48
 8002608:	e007      	b.n	800261a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002614:	4413      	add	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3b08      	subs	r3, #8
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2201      	movs	r2, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40020407 	.word	0x40020407
 8002650:	4002081c 	.word	0x4002081c
 8002654:	cccccccd 	.word	0xcccccccd
 8002658:	40020880 	.word	0x40020880

0800265c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800267e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2201      	movs	r2, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	1000823f 	.word	0x1000823f
 80026a0:	40020940 	.word	0x40020940

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	e166      	b.n	8002982 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8158 	beq.w	800297c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00b      	beq.n	80026ec <HAL_GPIO_Init+0x48>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d007      	beq.n	80026ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0201 	and.w	r2, r3, #1
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0xea>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b12      	cmp	r3, #18
 800278c:	d123      	bne.n	80027d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0203 	and.w	r2, r3, #3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80b2 	beq.w	800297c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_GPIO_Init+0x2fc>)
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	4a60      	ldr	r2, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x2fc>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6613      	str	r3, [r2, #96]	; 0x60
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_GPIO_Init+0x2fc>)
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002830:	4a5c      	ldr	r2, [pc, #368]	; (80029a4 <HAL_GPIO_Init+0x300>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800285a:	d02b      	beq.n	80028b4 <HAL_GPIO_Init+0x210>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x304>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d025      	beq.n	80028b0 <HAL_GPIO_Init+0x20c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x308>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d01f      	beq.n	80028ac <HAL_GPIO_Init+0x208>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x30c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d019      	beq.n	80028a8 <HAL_GPIO_Init+0x204>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x310>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_GPIO_Init+0x200>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x314>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00d      	beq.n	80028a0 <HAL_GPIO_Init+0x1fc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x318>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <HAL_GPIO_Init+0x1f8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x31c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_GPIO_Init+0x1f4>
 8002894:	2307      	movs	r3, #7
 8002896:	e00e      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 8002898:	2308      	movs	r3, #8
 800289a:	e00c      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 800289c:	2306      	movs	r3, #6
 800289e:	e00a      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028a0:	2305      	movs	r3, #5
 80028a2:	e008      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028a4:	2304      	movs	r3, #4
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028a8:	2303      	movs	r3, #3
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_Init+0x212>
 80028b4:	2300      	movs	r3, #0
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	4093      	lsls	r3, r2
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028c6:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_GPIO_Init+0x300>)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_GPIO_Init+0x320>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_GPIO_Init+0x320>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_GPIO_Init+0x320>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002922:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <HAL_GPIO_Init+0x320>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_GPIO_Init+0x320>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_GPIO_Init+0x320>)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_GPIO_Init+0x320>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_GPIO_Init+0x320>)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f ae91 	bne.w	80026b4 <HAL_GPIO_Init+0x10>
  }
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000
 80029a8:	48000400 	.word	0x48000400
 80029ac:	48000800 	.word	0x48000800
 80029b0:	48000c00 	.word	0x48000c00
 80029b4:	48001000 	.word	0x48001000
 80029b8:	48001400 	.word	0x48001400
 80029bc:	48001800 	.word	0x48001800
 80029c0:	48001c00 	.word	0x48001c00
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43d9      	mvns	r1, r3
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	400b      	ands	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e081      	b.n	8002b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fc8a 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e006      	b.n	8002ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d104      	bne.n	8002ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	f040 80da 	bne.w	8002d22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x30>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0d3      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fdb8 	bl	80016f8 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f001 f863 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0be      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	; 0x21
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d90e      	bls.n	8002bf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_I2C_Master_Transmit+0x1e0>)
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f001 f9c6 	bl	8003f80 <I2C_TransferConfig>
 8002bf4:	e06c      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f001 f9b5 	bl	8003f80 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c16:	e05b      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f001 f860 	bl	8003ce2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e07b      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d034      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d130      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fff2 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e04d      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d90e      	bls.n	8002cb0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 f969 	bl	8003f80 <I2C_TransferConfig>
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	8979      	ldrh	r1, [r7, #10]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f001 f958 	bl	8003f80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d19e      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 f83f 	bl	8003d62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e01a      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d02:	400b      	ands	r3, r1
 8002d04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	80002000 	.word	0x80002000
 8002d30:	fe00e800 	.word	0xfe00e800

08002d34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	460b      	mov	r3, r1
 8002d42:	817b      	strh	r3, [r7, #10]
 8002d44:	4613      	mov	r3, r2
 8002d46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 80db 	bne.w	8002f0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2C_Master_Receive+0x30>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0d4      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fcc4 	bl	80016f8 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2319      	movs	r3, #25
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 ff6f 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0bf      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2222      	movs	r2, #34	; 0x22
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2bff      	cmp	r3, #255	; 0xff
 8002dbe:	d90e      	bls.n	8002dde <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	; 0xff
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	8979      	ldrh	r1, [r7, #10]
 8002dce:	4b52      	ldr	r3, [pc, #328]	; (8002f18 <HAL_I2C_Master_Receive+0x1e4>)
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 f8d2 	bl	8003f80 <I2C_TransferConfig>
 8002ddc:	e06d      	b.n	8002eba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <HAL_I2C_Master_Receive+0x1e4>)
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f001 f8c1 	bl	8003f80 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002dfe:	e05c      	b.n	8002eba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	6a39      	ldr	r1, [r7, #32]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 ffe9 	bl	8003ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e07c      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d034      	beq.n	8002eba <HAL_I2C_Master_Receive+0x186>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d130      	bne.n	8002eba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fefd 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e04d      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2bff      	cmp	r3, #255	; 0xff
 8002e7a:	d90e      	bls.n	8002e9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f001 f874 	bl	8003f80 <I2C_TransferConfig>
 8002e98:	e00f      	b.n	8002eba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f001 f863 	bl	8003f80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d19d      	bne.n	8002e00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 ff4a 	bl	8003d62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01a      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2220      	movs	r2, #32
 8002ede:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_I2C_Master_Receive+0x1e8>)
 8002eec:	400b      	ands	r3, r1
 8002eee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	80002400 	.word	0x80002400
 8002f1c:	fe00e800 	.word	0xfe00e800

08002f20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	460b      	mov	r3, r1
 8002f34:	813b      	strh	r3, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	f040 80f9 	bne.w	800313a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_I2C_Mem_Write+0x34>
 8002f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0ed      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Mem_Write+0x4e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e0e6      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f76:	f7fe fbbf 	bl	80016f8 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2319      	movs	r3, #25
 8002f82:	2201      	movs	r2, #1
 8002f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fe6a 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0d1      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2221      	movs	r2, #33	; 0x21
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fc0:	88f8      	ldrh	r0, [r7, #6]
 8002fc2:	893a      	ldrh	r2, [r7, #8]
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4603      	mov	r3, r0
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa77 	bl	80034c4 <I2C_RequestMemoryWrite>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0a9      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d90e      	bls.n	8003010 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	8979      	ldrh	r1, [r7, #10]
 8003000:	2300      	movs	r3, #0
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 ffb9 	bl	8003f80 <I2C_TransferConfig>
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 ffa8 	bl	8003f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fe54 	bl	8003ce2 <I2C_WaitOnTXISFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07b      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d034      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x1c8>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d130      	bne.n	80030e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fde6 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04d      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d90e      	bls.n	80030c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 ff5d 	bl	8003f80 <I2C_TransferConfig>
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 ff4c 	bl	8003f80 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d19e      	bne.n	8003030 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fe33 	bl	8003d62 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01a      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_I2C_Mem_Write+0x224>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	fe00e800 	.word	0xfe00e800

08003148 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
  }
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x46>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	09db      	lsrs	r3, r3, #7
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0a9b      	lsrs	r3, r3, #10
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <HAL_I2C_ER_IRQHandler+0x74>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	09db      	lsrs	r3, r3, #7
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <HAL_I2C_ER_IRQHandler+0xa2>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	09db      	lsrs	r3, r3, #7
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0202 	orr.w	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 030b 	and.w	r3, r3, #11
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fbdd 	bl	80039f0 <I2C_ITError>
  }
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
 8003272:	4613      	mov	r3, r2
 8003274:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <I2C_Slave_ISR_IT+0x24>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0ec      	b.n	80034bc <I2C_Slave_ISR_IT+0x1fe>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <I2C_Slave_ISR_IT+0x4c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003302:	6939      	ldr	r1, [r7, #16]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fa13 	bl	8003730 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04d      	beq.n	80033b2 <I2C_Slave_ISR_IT+0xf4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d047      	beq.n	80033b2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d128      	bne.n	800337e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b28      	cmp	r3, #40	; 0x28
 8003336:	d108      	bne.n	800334a <I2C_Slave_ISR_IT+0x8c>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800333e:	d104      	bne.n	800334a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003340:	6939      	ldr	r1, [r7, #16]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fafe 	bl	8003944 <I2C_ITListenCplt>
 8003348:	e032      	b.n	80033b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b29      	cmp	r3, #41	; 0x29
 8003354:	d10e      	bne.n	8003374 <I2C_Slave_ISR_IT+0xb6>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800335c:	d00a      	beq.n	8003374 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2210      	movs	r2, #16
 8003364:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fc39 	bl	8003bde <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f981 	bl	8003674 <I2C_ITSlaveSeqCplt>
 8003372:	e01d      	b.n	80033b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2210      	movs	r2, #16
 800337a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800337c:	e096      	b.n	80034ac <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2210      	movs	r2, #16
 8003384:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <I2C_Slave_ISR_IT+0xe4>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800339e:	f040 8085 	bne.w	80034ac <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4619      	mov	r1, r3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fb21 	bl	80039f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80033ae:	e07d      	b.n	80034ac <I2C_Slave_ISR_IT+0x1ee>
 80033b0:	e07c      	b.n	80034ac <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d030      	beq.n	8003420 <I2C_Slave_ISR_IT+0x162>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02a      	beq.n	8003420 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d14f      	bne.n	80034b0 <I2C_Slave_ISR_IT+0x1f2>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003416:	d04b      	beq.n	80034b0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f92b 	bl	8003674 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800341e:	e047      	b.n	80034b0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	08db      	lsrs	r3, r3, #3
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003438:	6939      	ldr	r1, [r7, #16]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f896 	bl	800356c <I2C_ITAddrCplt>
 8003440:	e037      	b.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d031      	beq.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02b      	beq.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d018      	beq.n	8003496 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
 8003494:	e00d      	b.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800349c:	d002      	beq.n	80034a4 <I2C_Slave_ISR_IT+0x1e6>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f8e5 	bl	8003674 <I2C_ITSlaveSeqCplt>
 80034aa:	e002      	b.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80034b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	817b      	strh	r3, [r7, #10]
 80034d6:	460b      	mov	r3, r1
 80034d8:	813b      	strh	r3, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8979      	ldrh	r1, [r7, #10]
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <I2C_RequestMemoryWrite+0xa4>)
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fd47 	bl	8003f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fbf3 	bl	8003ce2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e02c      	b.n	8003560 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
 8003516:	e015      	b.n	8003544 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003518:	893b      	ldrh	r3, [r7, #8]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	b29b      	uxth	r3, r3
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fbd9 	bl	8003ce2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e012      	b.n	8003560 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800353a:	893b      	ldrh	r3, [r7, #8]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2200      	movs	r2, #0
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fb87 	bl	8003c62 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	80002000 	.word	0x80002000

0800356c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003582:	2b28      	cmp	r3, #40	; 0x28
 8003584:	d16a      	bne.n	800365c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035a4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035c0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d138      	bne.n	800363c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	09db      	lsrs	r3, r3, #7
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	89bb      	ldrh	r3, [r7, #12]
 80035d2:	4053      	eors	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f003 0306 	and.w	r3, r3, #6
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11c      	bne.n	8003618 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d13b      	bne.n	800366c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2208      	movs	r2, #8
 8003600:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800360a:	89ba      	ldrh	r2, [r7, #12]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fe28 	bl	8003266 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003616:	e029      	b.n	800366c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003618:	893b      	ldrh	r3, [r7, #8]
 800361a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800361c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fcdb 	bl	8003fdc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800362e:	89ba      	ldrh	r2, [r7, #12]
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fe16 	bl	8003266 <HAL_I2C_AddrCallback>
}
 800363a:	e017      	b.n	800366c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800363c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fccb 	bl	8003fdc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800364e:	89ba      	ldrh	r2, [r7, #12]
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fe06 	bl	8003266 <HAL_I2C_AddrCallback>
}
 800365a:	e007      	b.n	800366c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0b9b      	lsrs	r3, r3, #14
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e00d      	b.n	80036c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0bdb      	lsrs	r3, r3, #15
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b29      	cmp	r3, #41	; 0x29
 80036d0:	d112      	bne.n	80036f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2228      	movs	r2, #40	; 0x28
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2221      	movs	r2, #33	; 0x21
 80036de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036e0:	2101      	movs	r1, #1
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fc7a 	bl	8003fdc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fda4 	bl	800323e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036f6:	e017      	b.n	8003728 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b2a      	cmp	r3, #42	; 0x2a
 8003702:	d111      	bne.n	8003728 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2228      	movs	r2, #40	; 0x28
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2222      	movs	r2, #34	; 0x22
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003712:	2102      	movs	r1, #2
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fc61 	bl	8003fdc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fd95 	bl	8003252 <HAL_I2C_SlaveRxCpltCallback>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2220      	movs	r2, #32
 8003754:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b21      	cmp	r3, #33	; 0x21
 800375a:	d002      	beq.n	8003762 <I2C_ITSlaveCplt+0x32>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b29      	cmp	r3, #41	; 0x29
 8003760:	d108      	bne.n	8003774 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003762:	f248 0101 	movw	r1, #32769	; 0x8001
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fc38 	bl	8003fdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2221      	movs	r2, #33	; 0x21
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
 8003772:	e00d      	b.n	8003790 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b22      	cmp	r3, #34	; 0x22
 8003778:	d002      	beq.n	8003780 <I2C_ITSlaveCplt+0x50>
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b2a      	cmp	r3, #42	; 0x2a
 800377e:	d107      	bne.n	8003790 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003780:	f248 0102 	movw	r1, #32770	; 0x8002
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fc29 	bl	8003fdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2222      	movs	r2, #34	; 0x22
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b64      	ldr	r3, [pc, #400]	; (800393c <I2C_ITSlaveCplt+0x20c>)
 80037ac:	400b      	ands	r3, r1
 80037ae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fa14 	bl	8003bde <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	0b9b      	lsrs	r3, r3, #14
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d013      	beq.n	80037ea <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e8:	e018      	b.n	800381c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	0bdb      	lsrs	r3, r3, #15
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d012      	beq.n	800381c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003804:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0204 	orr.w	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8a7 	bl	80039f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b28      	cmp	r3, #40	; 0x28
 80038ac:	d141      	bne.n	8003932 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038ae:	6979      	ldr	r1, [r7, #20]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f847 	bl	8003944 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038b6:	e03c      	b.n	8003932 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c0:	d014      	beq.n	80038ec <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fed6 	bl	8003674 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <I2C_ITSlaveCplt+0x210>)
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fccc 	bl	8003282 <HAL_I2C_ListenCpltCallback>
}
 80038ea:	e022      	b.n	8003932 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b22      	cmp	r3, #34	; 0x22
 80038f6:	d10e      	bne.n	8003916 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fc9f 	bl	8003252 <HAL_I2C_SlaveRxCpltCallback>
}
 8003914:	e00d      	b.n	8003932 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fc86 	bl	800323e <HAL_I2C_SlaveTxCpltCallback>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	fe00e800 	.word	0xfe00e800
 8003940:	ffff0000 	.word	0xffff0000

08003944 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <I2C_ITListenCplt+0xa8>)
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d022      	beq.n	80039c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039c2:	f248 0103 	movw	r1, #32771	; 0x8003
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fb08 	bl	8003fdc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2210      	movs	r2, #16
 80039d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fc50 	bl	8003282 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	ffff0000 	.word	0xffff0000

080039f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a5d      	ldr	r2, [pc, #372]	; (8003b84 <I2C_ITError+0x194>)
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b28      	cmp	r3, #40	; 0x28
 8003a26:	d005      	beq.n	8003a34 <I2C_ITError+0x44>
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b29      	cmp	r3, #41	; 0x29
 8003a2c:	d002      	beq.n	8003a34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b2a      	cmp	r3, #42	; 0x2a
 8003a32:	d10b      	bne.n	8003a4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a34:	2103      	movs	r1, #3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fad0 	bl	8003fdc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2228      	movs	r2, #40	; 0x28
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a50      	ldr	r2, [pc, #320]	; (8003b88 <I2C_ITError+0x198>)
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34
 8003a4a:	e011      	b.n	8003a70 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fac3 	bl	8003fdc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b60      	cmp	r3, #96	; 0x60
 8003a60:	d003      	beq.n	8003a6a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d039      	beq.n	8003af2 <I2C_ITError+0x102>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b11      	cmp	r3, #17
 8003a82:	d002      	beq.n	8003a8a <I2C_ITError+0x9a>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b21      	cmp	r3, #33	; 0x21
 8003a88:	d133      	bne.n	8003af2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a98:	d107      	bne.n	8003aaa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fd49 	bl	8002546 <HAL_DMA_GetState>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d017      	beq.n	8003aea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <I2C_ITError+0x19c>)
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fc2b 	bl	800232a <HAL_DMA_Abort_IT>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04d      	beq.n	8003b76 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ae8:	e045      	b.n	8003b76 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f850 	bl	8003b90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003af0:	e041      	b.n	8003b76 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d039      	beq.n	8003b6e <I2C_ITError+0x17e>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b12      	cmp	r3, #18
 8003afe:	d002      	beq.n	8003b06 <I2C_ITError+0x116>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b22      	cmp	r3, #34	; 0x22
 8003b04:	d133      	bne.n	8003b6e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d107      	bne.n	8003b26 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fd0b 	bl	8002546 <HAL_DMA_GetState>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d017      	beq.n	8003b66 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <I2C_ITError+0x19c>)
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fbed 	bl	800232a <HAL_DMA_Abort_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d011      	beq.n	8003b7a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b60:	4610      	mov	r0, r2
 8003b62:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b64:	e009      	b.n	8003b7a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f812 	bl	8003b90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b6c:	e005      	b.n	8003b7a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f80e 	bl	8003b90 <I2C_TreatErrorCallback>
  }
}
 8003b74:	e002      	b.n	8003b7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b7a:	bf00      	nop
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	ffff0000 	.word	0xffff0000
 8003b88:	080032bf 	.word	0x080032bf
 8003b8c:	08003c27 	.word	0x08003c27

08003b90 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d10e      	bne.n	8003bc2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fb75 	bl	80032aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bc0:	e009      	b.n	8003bd6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fb60 	bl	8003296 <HAL_I2C_ErrorCallback>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d103      	bne.n	8003bfc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d007      	beq.n	8003c1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	619a      	str	r2, [r3, #24]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2200      	movs	r2, #0
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff9b 	bl	8003b90 <I2C_TreatErrorCallback>
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c72:	e022      	b.n	8003cba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d01e      	beq.n	8003cba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7c:	f7fd fd3c 	bl	80016f8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d0cd      	beq.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cee:	e02c      	b.n	8003d4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f8dd 	bl	8003eb4 <I2C_IsAcknowledgeFailed>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e02a      	b.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d01e      	beq.n	8003d4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0c:	f7fd fcf4 	bl	80016f8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e007      	b.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d1cb      	bne.n	8003cf0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d6e:	e028      	b.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f89d 	bl	8003eb4 <I2C_IsAcknowledgeFailed>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e026      	b.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fd fcb8 	bl	80016f8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e007      	b.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d1cf      	bne.n	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de8:	e055      	b.n	8003e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f860 	bl	8003eb4 <I2C_IsAcknowledgeFailed>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e053      	b.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d129      	bne.n	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d105      	bne.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e03f      	b.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e022      	b.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e60:	f7fd fc4a 	bl	80016f8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d302      	bcc.n	8003e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e007      	b.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d1a2      	bne.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	fe00e800 	.word	0xfe00e800

08003eb4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d151      	bne.n	8003f72 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ece:	e022      	b.n	8003f16 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d01e      	beq.n	8003f16 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fd fc0e 	bl	80016f8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <I2C_IsAcknowledgeFailed+0x3a>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d113      	bne.n	8003f16 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e02e      	b.n	8003f74 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d1d5      	bne.n	8003ed0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2210      	movs	r2, #16
 8003f2a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2220      	movs	r2, #32
 8003f32:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fe52 	bl	8003bde <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <I2C_IsAcknowledgeFailed+0xc8>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	0d5b      	lsrs	r3, r3, #21
 8003f9c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <I2C_TransferConfig+0x58>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	ea02 0103 	and.w	r1, r2, r3
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb0:	7a7b      	ldrb	r3, [r7, #9]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	03ff63ff 	.word	0x03ff63ff

08003fdc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00f      	beq.n	8004016 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ffc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800400a:	2b28      	cmp	r3, #40	; 0x28
 800400c:	d003      	beq.n	8004016 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004014:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00f      	beq.n	8004040 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004026:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004034:	2b28      	cmp	r3, #40	; 0x28
 8004036:	d003      	beq.n	8004040 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800403e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da03      	bge.n	8004050 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800404e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	2b10      	cmp	r3, #16
 8004054:	d103      	bne.n	800405e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	2b20      	cmp	r3, #32
 8004062:	d103      	bne.n	800406c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f043 0320 	orr.w	r3, r3, #32
 800406a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d103      	bne.n	800407a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004078:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43da      	mvns	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d138      	bne.n	8004120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e032      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d139      	bne.n	80041b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800414e:	2302      	movs	r3, #2
 8004150:	e033      	b.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2224      	movs	r2, #36	; 0x24
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d102      	bne.n	80041e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041de:	e00b      	b.n	80041f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d102      	bne.n	80041f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f4:	e000      	b.n	80041f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40007000 	.word	0x40007000

08004208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d141      	bne.n	800429a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004216:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d131      	bne.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004224:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423c:	4a41      	ldr	r2, [pc, #260]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004244:	4b40      	ldr	r3, [pc, #256]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2232      	movs	r2, #50	; 0x32
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	0c9b      	lsrs	r3, r3, #18
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425a:	e002      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d102      	bne.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f2      	bne.n	800425c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d158      	bne.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e057      	b.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428e:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004298:	e04d      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a0:	d141      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d131      	bne.n	8004314 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b6:	4a23      	ldr	r2, [pc, #140]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2232      	movs	r2, #50	; 0x32
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e6:	e002      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d102      	bne.n	8004302 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d112      	bne.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e011      	b.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004324:	e007      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004334:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40007000 	.word	0x40007000
 8004348:	20000000 	.word	0x20000000
 800434c:	431bde83 	.word	0x431bde83

08004350 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <HAL_PWREx_EnableVddIO2+0x1c>)
 800435a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435e:	6053      	str	r3, [r2, #4]
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40007000 	.word	0x40007000

08004370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f000 bc16 	b.w	8004bb0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004384:	4ba0      	ldr	r3, [pc, #640]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800438e:	4b9e      	ldr	r3, [pc, #632]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80e4 	beq.w	800456e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_RCC_OscConfig+0x4c>
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	f040 808b 	bne.w	80044ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	f040 8087 	bne.w	80044ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043bc:	4b92      	ldr	r3, [pc, #584]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x64>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e3ed      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	4b8b      	ldr	r3, [pc, #556]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_RCC_OscConfig+0x7e>
 80043e4:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ec:	e005      	b.n	80043fa <HAL_RCC_OscConfig+0x8a>
 80043ee:	4b86      	ldr	r3, [pc, #536]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d223      	bcs.n	8004446 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fdc4 	bl	8004f90 <RCC_SetFlashLatencyFromMSIRange>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e3ce      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004412:	4b7d      	ldr	r3, [pc, #500]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7c      	ldr	r2, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b7a      	ldr	r3, [pc, #488]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4977      	ldr	r1, [pc, #476]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	4972      	ldr	r1, [pc, #456]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	e025      	b.n	8004492 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004446:	4b70      	ldr	r3, [pc, #448]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6f      	ldr	r2, [pc, #444]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800444c:	f043 0308 	orr.w	r3, r3, #8
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	496a      	ldr	r1, [pc, #424]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	4965      	ldr	r1, [pc, #404]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fd84 	bl	8004f90 <RCC_SetFlashLatencyFromMSIRange>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e38e      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004492:	f000 fcf3 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004496:	4601      	mov	r1, r0
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	4a5a      	ldr	r2, [pc, #360]	; (800460c <HAL_RCC_OscConfig+0x29c>)
 80044a4:	5cd3      	ldrb	r3, [r2, r3]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	fa21 f303 	lsr.w	r3, r1, r3
 80044ae:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_OscConfig+0x2a0>)
 80044b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044b2:	4b58      	ldr	r3, [pc, #352]	; (8004614 <HAL_RCC_OscConfig+0x2a4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd f8ce 	bl	8001658 <HAL_InitTick>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d052      	beq.n	800456c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	e372      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d032      	beq.n	8004538 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044de:	f7fd f90b 	bl	80016f8 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e6:	f7fd f907 	bl	80016f8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e35b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004504:	4b40      	ldr	r3, [pc, #256]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800450a:	f043 0308 	orr.w	r3, r3, #8
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	493a      	ldr	r1, [pc, #232]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	4935      	ldr	r1, [pc, #212]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
 8004536:	e01a      	b.n	800456e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004538:	4b33      	ldr	r3, [pc, #204]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a32      	ldr	r2, [pc, #200]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004544:	f7fd f8d8 	bl	80016f8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454c:	f7fd f8d4 	bl	80016f8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e328      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x1dc>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d073      	beq.n	8004662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d005      	beq.n	800458c <HAL_RCC_OscConfig+0x21c>
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d10e      	bne.n	80045a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d063      	beq.n	8004660 <HAL_RCC_OscConfig+0x2f0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d15f      	bne.n	8004660 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e305      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x24c>
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0x288>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x270>
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0x288>
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <HAL_RCC_OscConfig+0x298>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f87a 	bl	80016f8 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	e010      	b.n	800462a <HAL_RCC_OscConfig+0x2ba>
 8004608:	40021000 	.word	0x40021000
 800460c:	08006614 	.word	0x08006614
 8004610:	20000000 	.word	0x20000000
 8004614:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd f86e 	bl	80016f8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e2c2      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462a:	4baf      	ldr	r3, [pc, #700]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x2a8>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd f85e 	bl	80016f8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd f85a 	bl	80016f8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e2ae      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004652:	4ba5      	ldr	r3, [pc, #660]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x2d0>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d060      	beq.n	8004730 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d005      	beq.n	8004680 <HAL_RCC_OscConfig+0x310>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d119      	bne.n	80046ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d116      	bne.n	80046ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004680:	4b99      	ldr	r3, [pc, #612]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_OscConfig+0x328>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e28b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004698:	4b93      	ldr	r3, [pc, #588]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	4990      	ldr	r1, [pc, #576]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ac:	e040      	b.n	8004730 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d023      	beq.n	80046fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b6:	4b8c      	ldr	r3, [pc, #560]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a8b      	ldr	r2, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fd f819 	bl	80016f8 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fd f815 	bl	80016f8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e269      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046dc:	4b82      	ldr	r3, [pc, #520]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b7f      	ldr	r3, [pc, #508]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	497c      	ldr	r1, [pc, #496]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
 80046fc:	e018      	b.n	8004730 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fe:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a79      	ldr	r2, [pc, #484]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fc fff5 	bl	80016f8 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004712:	f7fc fff1 	bl	80016f8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e245      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004724:	4b70      	ldr	r3, [pc, #448]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01c      	beq.n	800477e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004744:	4b68      	ldr	r3, [pc, #416]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474a:	4a67      	ldr	r2, [pc, #412]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fc ffd0 	bl	80016f8 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475c:	f7fc ffcc 	bl	80016f8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e220      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476e:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ef      	beq.n	800475c <HAL_RCC_OscConfig+0x3ec>
 800477c:	e01b      	b.n	80047b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fc ffb3 	bl	80016f8 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004796:	f7fc ffaf 	bl	80016f8 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e203      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a8:	4b4f      	ldr	r3, [pc, #316]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80047aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ef      	bne.n	8004796 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80a6 	beq.w	8004910 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c8:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d4:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	4a43      	ldr	r2, [pc, #268]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	6593      	str	r3, [r2, #88]	; 0x58
 80047e0:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f0:	4b3e      	ldr	r3, [pc, #248]	; (80048ec <HAL_RCC_OscConfig+0x57c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d118      	bne.n	800482e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_OscConfig+0x57c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <HAL_RCC_OscConfig+0x57c>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004808:	f7fc ff76 	bl	80016f8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004810:	f7fc ff72 	bl	80016f8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1c6      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004822:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_RCC_OscConfig+0x57c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <HAL_RCC_OscConfig+0x4d8>
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004846:	e024      	b.n	8004892 <HAL_RCC_OscConfig+0x522>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d110      	bne.n	8004872 <HAL_RCC_OscConfig+0x502>
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004860:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004870:	e00f      	b.n	8004892 <HAL_RCC_OscConfig+0x522>
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 800488a:	f023 0304 	bic.w	r3, r3, #4
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fc ff2d 	bl	80016f8 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fc ff29 	bl	80016f8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e17b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_OscConfig+0x578>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ed      	beq.n	80048a2 <HAL_RCC_OscConfig+0x532>
 80048c6:	e01a      	b.n	80048fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fc ff16 	bl	80016f8 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ce:	e00f      	b.n	80048f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fc ff12 	bl	80016f8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d906      	bls.n	80048f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e164      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f0:	4ba8      	ldr	r3, [pc, #672]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e8      	bne.n	80048d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4ba3      	ldr	r3, [pc, #652]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	4aa2      	ldr	r2, [pc, #648]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d03c      	beq.n	8004996 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01c      	beq.n	800495e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004924:	4b9b      	ldr	r3, [pc, #620]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492a:	4a9a      	ldr	r2, [pc, #616]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fc fee0 	bl	80016f8 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493c:	f7fc fedc 	bl	80016f8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e130      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494e:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <HAL_RCC_OscConfig+0x5cc>
 800495c:	e01b      	b.n	8004996 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800495e:	4b8d      	ldr	r3, [pc, #564]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	4a8b      	ldr	r2, [pc, #556]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fc fec3 	bl	80016f8 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004976:	f7fc febf 	bl	80016f8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e113      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004988:	4b82      	ldr	r3, [pc, #520]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 800498a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ef      	bne.n	8004976 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8107 	beq.w	8004bae <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f040 80cb 	bne.w	8004b40 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049aa:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0203 	and.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d12c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	3b01      	subs	r3, #1
 80049ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d123      	bne.n	8004a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d11b      	bne.n	8004a18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d113      	bne.n	8004a18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d109      	bne.n	8004a18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	3b01      	subs	r3, #1
 8004a12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d06d      	beq.n	8004af4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d068      	beq.n	8004af0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a2a:	4b5a      	ldr	r3, [pc, #360]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0ba      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a3a:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a55      	ldr	r2, [pc, #340]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a46:	f7fc fe57 	bl	80016f8 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7fc fe53 	bl	80016f8 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0a7      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a60:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a6c:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <HAL_RCC_OscConfig+0x828>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0112      	lsls	r2, r2, #4
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a86:	0212      	lsls	r2, r2, #8
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a8e:	0852      	lsrs	r2, r2, #1
 8004a90:	3a01      	subs	r2, #1
 8004a92:	0552      	lsls	r2, r2, #21
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a9a:	0852      	lsrs	r2, r2, #1
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0652      	lsls	r2, r2, #25
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa6:	06d2      	lsls	r2, r2, #27
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	493a      	ldr	r1, [pc, #232]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b38      	ldr	r3, [pc, #224]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a37      	ldr	r2, [pc, #220]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a34      	ldr	r2, [pc, #208]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac8:	f7fc fe16 	bl	80016f8 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fc fe12 	bl	80016f8 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e066      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aee:	e05e      	b.n	8004bae <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e05d      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d156      	bne.n	8004bae <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b18:	f7fc fdee 	bl	80016f8 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fc fdea 	bl	80016f8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e03e      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x7b0>
 8004b3e:	e036      	b.n	8004bae <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d031      	beq.n	8004baa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b64:	f023 0303 	bic.w	r3, r3, #3
 8004b68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_OscConfig+0x824>)
 8004b70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fc fdbd 	bl	80016f8 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b80:	e00c      	b.n	8004b9c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fc fdb9 	bl	80016f8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d905      	bls.n	8004b9c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e00d      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
 8004b94:	40021000 	.word	0x40021000
 8004b98:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_OscConfig+0x848>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ec      	bne.n	8004b82 <HAL_RCC_OscConfig+0x812>
 8004ba8:	e001      	b.n	8004bae <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e10f      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b89      	ldr	r3, [pc, #548]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d910      	bls.n	8004c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b86      	ldr	r3, [pc, #536]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 020f 	bic.w	r2, r3, #15
 8004bea:	4984      	ldr	r1, [pc, #528]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0f7      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8089 	beq.w	8004d24 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d133      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0e4      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004c2a:	f000 fa0b 	bl	8005044 <RCC_GetSysClockFreqFromPLLSource>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4b74      	ldr	r3, [pc, #464]	; (8004e04 <HAL_RCC_ClockConfig+0x248>)
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d955      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c42:	4b6f      	ldr	r3, [pc, #444]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e044      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d03e      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d13a      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c6c:	4b64      	ldr	r3, [pc, #400]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c74:	4a62      	ldr	r2, [pc, #392]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e02f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8a:	4b5d      	ldr	r3, [pc, #372]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d115      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0ac      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca2:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e0a0      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e098      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004cc2:	f000 f8db 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b4e      	ldr	r3, [pc, #312]	; (8004e04 <HAL_RCC_ClockConfig+0x248>)
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d909      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cce:	4b4c      	ldr	r3, [pc, #304]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd6:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4944      	ldr	r1, [pc, #272]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fc fd00 	bl	80016f8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fc fcfc 	bl	80016f8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e070      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4930      	ldr	r1, [pc, #192]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d105      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d54:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d210      	bcs.n	8004d86 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f023 020f 	bic.w	r2, r3, #15
 8004d6c:	4923      	ldr	r1, [pc, #140]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <HAL_RCC_ClockConfig+0x240>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d001      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e036      	b.n	8004df4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4918      	ldr	r1, [pc, #96]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4910      	ldr	r1, [pc, #64]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dc4:	f000 f85a 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004dc8:	4601      	mov	r1, r0
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <HAL_RCC_ClockConfig+0x24c>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa21 f303 	lsr.w	r3, r1, r3
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <HAL_RCC_ClockConfig+0x250>)
 8004de2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004de4:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x254>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fc fc35 	bl	8001658 <HAL_InitTick>
 8004dee:	4603      	mov	r3, r0
 8004df0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40022000 	.word	0x40022000
 8004e00:	40021000 	.word	0x40021000
 8004e04:	04c4b400 	.word	0x04c4b400
 8004e08:	08006614 	.word	0x08006614
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000004 	.word	0x20000004

08004e14 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_MCOConfig+0x64>)
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <HAL_RCC_MCOConfig+0x64>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e2c:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_MCOConfig+0x64>)
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e42:	2302      	movs	r3, #2
 8004e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	4619      	mov	r1, r3
 8004e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e58:	f7fd fc24 	bl	80026a4 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCC_MCOConfig+0x64>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	4903      	ldr	r1, [pc, #12]	; (8004e78 <HAL_RCC_MCOConfig+0x64>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]
}
 8004e70:	bf00      	nop
 8004e72:	3728      	adds	r7, #40	; 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	2300      	movs	r3, #0
 8004e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8a:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d121      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11e      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb0:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e005      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e004      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f00:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d133      	bne.n	8004f72 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0xa4>
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0xaa>
 8004f1e:	e005      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f22:	617b      	str	r3, [r7, #20]
      break;
 8004f24:	e005      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f26:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f28:	617b      	str	r3, [r7, #20]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	617b      	str	r3, [r7, #20]
      break;
 8004f30:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	fb02 f203 	mul.w	r2, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	0e5b      	lsrs	r3, r3, #25
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	3301      	adds	r3, #1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f72:	69bb      	ldr	r3, [r7, #24]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3724      	adds	r7, #36	; 0x24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40021000 	.word	0x40021000
 8004f84:	0800662c 	.word	0x0800662c
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	007a1200 	.word	0x007a1200

08004f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fa8:	f7ff f90e 	bl	80041c8 <HAL_PWREx_GetVoltageRange>
 8004fac:	6178      	str	r0, [r7, #20]
 8004fae:	e014      	b.n	8004fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	4a21      	ldr	r2, [pc, #132]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6593      	str	r3, [r2, #88]	; 0x58
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fc8:	f7ff f8fe 	bl	80041c8 <HAL_PWREx_GetVoltageRange>
 8004fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fce:	4b1b      	ldr	r3, [pc, #108]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a1a      	ldr	r2, [pc, #104]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d10b      	bne.n	8004ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d913      	bls.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2ba0      	cmp	r3, #160	; 0xa0
 8004fec:	d902      	bls.n	8004ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fee:	2302      	movs	r3, #2
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e00d      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e00a      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffe:	d902      	bls.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005000:	2302      	movs	r3, #2
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e004      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d101      	bne.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800500c:	2301      	movs	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 020f 	bic.w	r2, r3, #15
 8005018:	4909      	ldr	r1, [pc, #36]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	40022000 	.word	0x40022000

08005044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800504e:	4b2d      	ldr	r3, [pc, #180]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b01      	cmp	r3, #1
 8005058:	d118      	bne.n	800508c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e005      	b.n	8005082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d002      	beq.n	80050a2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800509c:	2b03      	cmp	r3, #3
 800509e:	d003      	beq.n	80050a8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80050a0:	e005      	b.n	80050ae <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80050a2:	4b1a      	ldr	r3, [pc, #104]	; (800510c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80050a4:	613b      	str	r3, [r7, #16]
    break;
 80050a6:	e005      	b.n	80050b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80050a8:	4b19      	ldr	r3, [pc, #100]	; (8005110 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050aa:	613b      	str	r3, [r7, #16]
    break;
 80050ac:	e002      	b.n	80050b4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	613b      	str	r3, [r7, #16]
    break;
 80050b2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3301      	adds	r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	fb02 f203 	mul.w	r2, r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	0e5b      	lsrs	r3, r3, #25
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	3301      	adds	r3, #1
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050f4:	683b      	ldr	r3, [r7, #0]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40021000 	.word	0x40021000
 8005108:	0800662c 	.word	0x0800662c
 800510c:	00f42400 	.word	0x00f42400
 8005110:	007a1200 	.word	0x007a1200

08005114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800511c:	2300      	movs	r3, #0
 800511e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005120:	2300      	movs	r3, #0
 8005122:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512c:	2b00      	cmp	r3, #0
 800512e:	d03d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d00b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d804      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d015      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005144:	e01d      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005146:	2b60      	cmp	r3, #96	; 0x60
 8005148:	d01e      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d01c      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800514e:	e018      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005150:	4b86      	ldr	r3, [pc, #536]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a85      	ldr	r2, [pc, #532]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800515c:	e015      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fafd 	bl	8005764 <RCCEx_PLLSAI1_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516e:	e00c      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3320      	adds	r3, #32
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fbe4 	bl	8005944 <RCCEx_PLLSAI2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	74fb      	strb	r3, [r7, #19]
      break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005190:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005196:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519e:	4973      	ldr	r1, [pc, #460]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d042      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d00f      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80051c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c6:	d805      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d0:	d017      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80051d2:	e01f      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80051d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d8:	d01f      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	d01c      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051e0:	e018      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e2:	4b62      	ldr	r3, [pc, #392]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4a61      	ldr	r2, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ee:	e015      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fab4 	bl	8005764 <RCCEx_PLLSAI1_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005200:	e00c      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3320      	adds	r3, #32
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fb9b 	bl	8005944 <RCCEx_PLLSAI2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	74fb      	strb	r3, [r7, #19]
      break;
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800521a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005222:	4b52      	ldr	r3, [pc, #328]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	494e      	ldr	r1, [pc, #312]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005238:	e001      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 809f 	beq.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524c:	2300      	movs	r3, #0
 800524e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005250:	4b46      	ldr	r3, [pc, #280]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	4a40      	ldr	r2, [pc, #256]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	6593      	str	r3, [r2, #88]	; 0x58
 8005272:	4b3e      	ldr	r3, [pc, #248]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005282:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528e:	f7fc fa33 	bl	80016f8 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fc fa2f 	bl	80016f8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d902      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	74fb      	strb	r3, [r7, #19]
        break;
 80052a8:	e005      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ef      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d15b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01f      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d019      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052da:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	4a1b      	ldr	r2, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d016      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fc f9ee 	bl	80016f8 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	e00b      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fc f9ea 	bl	80016f8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d902      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	74fb      	strb	r3, [r7, #19]
            break;
 8005336:	e006      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ec      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	4903      	ldr	r1, [pc, #12]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	74bb      	strb	r3, [r7, #18]
 800536a:	e005      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005378:	7c7b      	ldrb	r3, [r7, #17]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d105      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537e:	4ba0      	ldr	r3, [pc, #640]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	4a9f      	ldr	r2, [pc, #636]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005396:	4b9a      	ldr	r3, [pc, #616]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f023 0203 	bic.w	r2, r3, #3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	4996      	ldr	r1, [pc, #600]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b8:	4b91      	ldr	r3, [pc, #580]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f023 020c 	bic.w	r2, r3, #12
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	498e      	ldr	r1, [pc, #568]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053da:	4b89      	ldr	r3, [pc, #548]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	4985      	ldr	r1, [pc, #532]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053fc:	4b80      	ldr	r3, [pc, #512]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540a:	497d      	ldr	r1, [pc, #500]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800541e:	4b78      	ldr	r3, [pc, #480]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	4974      	ldr	r1, [pc, #464]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005440:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	496c      	ldr	r1, [pc, #432]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b67      	ldr	r3, [pc, #412]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005470:	4963      	ldr	r1, [pc, #396]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005484:	4b5e      	ldr	r3, [pc, #376]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005492:	495b      	ldr	r1, [pc, #364]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a6:	4b56      	ldr	r3, [pc, #344]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	4952      	ldr	r1, [pc, #328]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c8:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	494a      	ldr	r1, [pc, #296]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ea:	4b45      	ldr	r3, [pc, #276]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	4941      	ldr	r1, [pc, #260]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800550c:	4b3c      	ldr	r3, [pc, #240]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	4939      	ldr	r1, [pc, #228]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d028      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552e:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553c:	4930      	ldr	r1, [pc, #192]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554c:	d106      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005558:	60d3      	str	r3, [r2, #12]
 800555a:	e011      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f8f9 	bl	8005764 <RCCEx_PLLSAI1_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d04d      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005594:	d108      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005596:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055a6:	e012      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c6:	490e      	ldr	r1, [pc, #56]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d6:	d106      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e2:	60d3      	str	r3, [r2, #12]
 80055e4:	e020      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ee:	d109      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a02      	ldr	r2, [pc, #8]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fa:	60d3      	str	r3, [r2, #12]
 80055fc:	e014      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055fe:	bf00      	nop
 8005600:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800560c:	d10c      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f8a5 	bl	8005764 <RCCEx_PLLSAI1_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d028      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005634:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005642:	4947      	ldr	r1, [pc, #284]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005652:	d106      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005654:	4b42      	ldr	r3, [pc, #264]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4a41      	ldr	r2, [pc, #260]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800565a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565e:	60d3      	str	r3, [r2, #12]
 8005660:	e011      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800566a:	d10c      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2101      	movs	r1, #1
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f876 	bl	8005764 <RCCEx_PLLSAI1_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01e      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	492f      	ldr	r1, [pc, #188]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f851 	bl	8005764 <RCCEx_PLLSAI1_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056dc:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056e2:	f023 0204 	bic.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ec:	491c      	ldr	r1, [pc, #112]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005700:	4b17      	ldr	r3, [pc, #92]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005706:	f023 0218 	bic.w	r2, r3, #24
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	4913      	ldr	r1, [pc, #76]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005724:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005726:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800572a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005734:	490a      	ldr	r1, [pc, #40]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a04      	ldr	r2, [pc, #16]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005752:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005754:	7cbb      	ldrb	r3, [r7, #18]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000

08005764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005772:	4b70      	ldr	r3, [pc, #448]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800577e:	4b6d      	ldr	r3, [pc, #436]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0203 	and.w	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d103      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
       ||
 8005792:	2b00      	cmp	r3, #0
 8005794:	d13f      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e03c      	b.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d00c      	beq.n	80057be <RCCEx_PLLSAI1_Config+0x5a>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d013      	beq.n	80057d0 <RCCEx_PLLSAI1_Config+0x6c>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d120      	bne.n	80057ee <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ac:	4b61      	ldr	r3, [pc, #388]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11d      	bne.n	80057f4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057bc:	e01a      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057be:	4b5d      	ldr	r3, [pc, #372]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d116      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ce:	e013      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d0:	4b58      	ldr	r3, [pc, #352]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057dc:	4b55      	ldr	r3, [pc, #340]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ec:	e006      	b.n	80057fc <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      break;
 80057f2:	e004      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80057fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005804:	4b4b      	ldr	r3, [pc, #300]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f023 0203 	bic.w	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4948      	ldr	r1, [pc, #288]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005812:	4313      	orrs	r3, r2
 8005814:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 8086 	bne.w	800592a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a44      	ldr	r2, [pc, #272]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005824:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582a:	f7fb ff65 	bl	80016f8 <HAL_GetTick>
 800582e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005830:	e009      	b.n	8005846 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005832:	f7fb ff61 	bl	80016f8 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d902      	bls.n	8005846 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	73fb      	strb	r3, [r7, #15]
        break;
 8005844:	e005      	b.n	8005852 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005846:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ef      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d168      	bne.n	800592a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800585e:	4b35      	ldr	r3, [pc, #212]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005864:	4013      	ands	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6892      	ldr	r2, [r2, #8]
 800586a:	0211      	lsls	r1, r2, #8
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68d2      	ldr	r2, [r2, #12]
 8005870:	06d2      	lsls	r2, r2, #27
 8005872:	4311      	orrs	r1, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	430a      	orrs	r2, r1
 800587e:	492d      	ldr	r1, [pc, #180]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	610b      	str	r3, [r1, #16]
 8005884:	e02d      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d115      	bne.n	80058b8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	4b2a      	ldr	r3, [pc, #168]	; (800593c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005892:	4013      	ands	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6892      	ldr	r2, [r2, #8]
 8005898:	0211      	lsls	r1, r2, #8
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6912      	ldr	r2, [r2, #16]
 800589e:	0852      	lsrs	r2, r2, #1
 80058a0:	3a01      	subs	r2, #1
 80058a2:	0552      	lsls	r2, r2, #21
 80058a4:	4311      	orrs	r1, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6852      	ldr	r2, [r2, #4]
 80058aa:	3a01      	subs	r2, #1
 80058ac:	0112      	lsls	r2, r2, #4
 80058ae:	430a      	orrs	r2, r1
 80058b0:	4920      	ldr	r1, [pc, #128]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	610b      	str	r3, [r1, #16]
 80058b6:	e014      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058be:	4013      	ands	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	0211      	lsls	r1, r2, #8
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6952      	ldr	r2, [r2, #20]
 80058ca:	0852      	lsrs	r2, r2, #1
 80058cc:	3a01      	subs	r2, #1
 80058ce:	0652      	lsls	r2, r2, #25
 80058d0:	4311      	orrs	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	3a01      	subs	r2, #1
 80058d8:	0112      	lsls	r2, r2, #4
 80058da:	430a      	orrs	r2, r1
 80058dc:	4915      	ldr	r1, [pc, #84]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058e2:	4b14      	ldr	r3, [pc, #80]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a13      	ldr	r2, [pc, #76]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 80058e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fb ff03 	bl	80016f8 <HAL_GetTick>
 80058f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058f4:	e009      	b.n	800590a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f6:	f7fb feff 	bl	80016f8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d902      	bls.n	800590a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	73fb      	strb	r3, [r7, #15]
          break;
 8005908:	e005      	b.n	8005916 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ef      	beq.n	80058f6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40021000 	.word	0x40021000
 8005938:	07ff800f 	.word	0x07ff800f
 800593c:	ff9f800f 	.word	0xff9f800f
 8005940:	f9ff800f 	.word	0xf9ff800f

08005944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005952:	4b70      	ldr	r3, [pc, #448]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800595e:	4b6d      	ldr	r3, [pc, #436]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0203 	and.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d103      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
       ||
 8005972:	2b00      	cmp	r3, #0
 8005974:	d13f      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	e03c      	b.n	80059f6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d00c      	beq.n	800599e <RCCEx_PLLSAI2_Config+0x5a>
 8005984:	2b03      	cmp	r3, #3
 8005986:	d013      	beq.n	80059b0 <RCCEx_PLLSAI2_Config+0x6c>
 8005988:	2b01      	cmp	r3, #1
 800598a:	d120      	bne.n	80059ce <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800598c:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11d      	bne.n	80059d4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599c:	e01a      	b.n	80059d4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800599e:	4b5d      	ldr	r3, [pc, #372]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d116      	bne.n	80059d8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ae:	e013      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b0:	4b58      	ldr	r3, [pc, #352]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10f      	bne.n	80059dc <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059bc:	4b55      	ldr	r3, [pc, #340]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059cc:	e006      	b.n	80059dc <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      break;
 80059d2:	e004      	b.n	80059de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80059dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059e4:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f023 0203 	bic.w	r2, r3, #3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4948      	ldr	r1, [pc, #288]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 8086 	bne.w	8005b0a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059fe:	4b45      	ldr	r3, [pc, #276]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a44      	ldr	r2, [pc, #272]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fb fe75 	bl	80016f8 <HAL_GetTick>
 8005a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a10:	e009      	b.n	8005a26 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a12:	f7fb fe71 	bl	80016f8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d902      	bls.n	8005a26 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	73fb      	strb	r3, [r7, #15]
        break;
 8005a24:	e005      	b.n	8005a32 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ef      	bne.n	8005a12 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d168      	bne.n	8005b0a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a3e:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1d4>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6892      	ldr	r2, [r2, #8]
 8005a4a:	0211      	lsls	r1, r2, #8
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68d2      	ldr	r2, [r2, #12]
 8005a50:	06d2      	lsls	r2, r2, #27
 8005a52:	4311      	orrs	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6852      	ldr	r2, [r2, #4]
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	492d      	ldr	r1, [pc, #180]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	614b      	str	r3, [r1, #20]
 8005a64:	e02d      	b.n	8005ac2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d115      	bne.n	8005a98 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6892      	ldr	r2, [r2, #8]
 8005a78:	0211      	lsls	r1, r2, #8
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6912      	ldr	r2, [r2, #16]
 8005a7e:	0852      	lsrs	r2, r2, #1
 8005a80:	3a01      	subs	r2, #1
 8005a82:	0552      	lsls	r2, r2, #21
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6852      	ldr	r2, [r2, #4]
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	0112      	lsls	r2, r2, #4
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	4920      	ldr	r1, [pc, #128]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	614b      	str	r3, [r1, #20]
 8005a96:	e014      	b.n	8005ac2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	0211      	lsls	r1, r2, #8
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6952      	ldr	r2, [r2, #20]
 8005aaa:	0852      	lsrs	r2, r2, #1
 8005aac:	3a01      	subs	r2, #1
 8005aae:	0652      	lsls	r2, r2, #25
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6852      	ldr	r2, [r2, #4]
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0112      	lsls	r2, r2, #4
 8005aba:	430a      	orrs	r2, r1
 8005abc:	4915      	ldr	r1, [pc, #84]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ace:	f7fb fe13 	bl	80016f8 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad4:	e009      	b.n	8005aea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ad6:	f7fb fe0f 	bl	80016f8 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d902      	bls.n	8005aea <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae8:	e005      	b.n	8005af6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ef      	beq.n	8005ad6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4903      	ldr	r1, [pc, #12]	; (8005b14 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	07ff800f 	.word	0x07ff800f
 8005b1c:	ff9f800f 	.word	0xff9f800f
 8005b20:	f9ff800f 	.word	0xf9ff800f

08005b24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	e003      	b.n	8005b56 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2103      	movs	r1, #3
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	401a      	ands	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	fa93 f3a3 	rbit	r3, r3
 8005b6c:	61fb      	str	r3, [r7, #28]
  return result;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005b78:	2320      	movs	r3, #32
 8005b7a:	e003      	b.n	8005b84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	fab3 f383 	clz	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	372c      	adds	r7, #44	; 0x2c
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b08b      	sub	sp, #44	; 0x2c
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	613b      	str	r3, [r7, #16]
  return result;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e003      	b.n	8005c00 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	fab3 f383 	clz	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	2103      	movs	r1, #3
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	fa93 f3a3 	rbit	r3, r3
 8005c16:	61fb      	str	r3, [r7, #28]
  return result;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005c22:	2320      	movs	r3, #32
 8005c24:	e003      	b.n	8005c2e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	fab3 f383 	clz	r3, r3
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005c3c:	bf00      	nop
 8005c3e:	372c      	adds	r7, #44	; 0x2c
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b08b      	sub	sp, #44	; 0x2c
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	fa93 f3a3 	rbit	r3, r3
 8005c62:	613b      	str	r3, [r7, #16]
  return result;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	e003      	b.n	8005c7a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	fab3 f383 	clz	r3, r3
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	2103      	movs	r1, #3
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	401a      	ands	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	fa93 f3a3 	rbit	r3, r3
 8005c90:	61fb      	str	r3, [r7, #28]
  return result;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	e003      	b.n	8005ca8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	60da      	str	r2, [r3, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	372c      	adds	r7, #44	; 0x2c
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b08b      	sub	sp, #44	; 0x2c
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	fa93 f3a3 	rbit	r3, r3
 8005cdc:	613b      	str	r3, [r7, #16]
  return result;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005ce8:	2320      	movs	r3, #32
 8005cea:	e003      	b.n	8005cf4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	fab3 f383 	clz	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	210f      	movs	r1, #15
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005d16:	2320      	movs	r3, #32
 8005d18:	e003      	b.n	8005d22 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	fab3 f383 	clz	r3, r3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005d30:	bf00      	nop
 8005d32:	372c      	adds	r7, #44	; 0x2c
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b08b      	sub	sp, #44	; 0x2c
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	fa93 f3a3 	rbit	r3, r3
 8005d58:	613b      	str	r3, [r7, #16]
  return result;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005d64:	2320      	movs	r3, #32
 8005d66:	e003      	b.n	8005d70 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	210f      	movs	r1, #15
 8005d74:	fa01 f303 	lsl.w	r3, r1, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	61fb      	str	r3, [r7, #28]
  return result;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005d94:	2320      	movs	r3, #32
 8005d96:	e003      	b.n	8005da0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	fab3 f383 	clz	r3, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	431a      	orrs	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005dae:	bf00      	nop
 8005db0:	372c      	adds	r7, #44	; 0x2c
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	fa93 f3a3 	rbit	r3, r3
 8005dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <LL_GPIO_Init+0x26>
    return 32U;
 8005ddc:	2320      	movs	r3, #32
 8005dde:	e003      	b.n	8005de8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005dea:	e040      	b.n	8005e6e <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2101      	movs	r1, #1
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fe8a 	bl	8005b24 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d003      	beq.n	8005e20 <LL_GPIO_Init+0x66>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d106      	bne.n	8005e2e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	461a      	mov	r2, r3
 8005e26:	69b9      	ldr	r1, [r7, #24]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fed0 	bl	8005bce <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	461a      	mov	r2, r3
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ff06 	bl	8005c48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d111      	bne.n	8005e68 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2bff      	cmp	r3, #255	; 0xff
 8005e48:	d807      	bhi.n	8005e5a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff35 	bl	8005cc2 <LL_GPIO_SetAFPin_0_7>
 8005e58:	e006      	b.n	8005e68 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ff6a 	bl	8005d3c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1b7      	bne.n	8005dec <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d003      	beq.n	8005e8c <LL_GPIO_Init+0xd2>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d107      	bne.n	8005e9c <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fe81 	bl	8005b9e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <LL_LPUART_IsEnabled>:
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <LL_LPUART_IsEnabled+0x18>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <LL_LPUART_IsEnabled+0x1a>
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <LL_LPUART_SetPrescaler>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	f023 030f 	bic.w	r3, r3, #15
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_LPUART_SetStopBitsLength>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_LPUART_SetHWFlowCtrl>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_LPUART_SetBaudRate>:
{
 8005f40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <LL_LPUART_SetBaudRate+0x84>)
 8005f60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f04f 0400 	mov.w	r4, #0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	f7fa f945 	bl	80001fc <__aeabi_uldivmod>
 8005f72:	4603      	mov	r3, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	4619      	mov	r1, r3
 8005f78:	4622      	mov	r2, r4
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f04f 0400 	mov.w	r4, #0
 8005f82:	0214      	lsls	r4, r2, #8
 8005f84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f88:	020b      	lsls	r3, r1, #8
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	0852      	lsrs	r2, r2, #1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	eb13 0b01 	adds.w	fp, r3, r1
 8005f98:	eb44 0c02 	adc.w	ip, r4, r2
 8005f9c:	4658      	mov	r0, fp
 8005f9e:	4661      	mov	r1, ip
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f04f 0400 	mov.w	r4, #0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4623      	mov	r3, r4
 8005faa:	f7fa f927 	bl	80001fc <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	60da      	str	r2, [r3, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005fc4:	0800665c 	.word	0x0800665c

08005fc8 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff ff65 	bl	8005ea6 <LL_LPUART_IsEnabled>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d136      	bne.n	8006050 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <LL_LPUART_Init+0x94>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	6891      	ldr	r1, [r2, #8]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	6912      	ldr	r2, [r2, #16]
 8005ff2:	4311      	orrs	r1, r2
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	6952      	ldr	r2, [r2, #20]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff74 	bl	8005ef4 <LL_LPUART_SetStopBitsLength>

    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff81 	bl	8005f1a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8006018:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800601c:	f000 f8ea 	bl	80061f4 <LL_RCC_GetLPUARTClockFreq>
 8006020:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ff7e 	bl	8005f40 <LL_LPUART_SetBaudRate>
#if defined(USART_PRESC_PRESCALER)
    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff3e 	bl	8005ecc <LL_LPUART_SetPrescaler>
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	efffe9f3 	.word	0xefffe9f3

08006060 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <LL_RCC_HSI_IsReady+0x24>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006070:	d101      	bne.n	8006076 <LL_RCC_HSI_IsReady+0x16>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <LL_RCC_HSI_IsReady+0x18>
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000

08006088 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <LL_RCC_LSE_IsReady+0x24>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d101      	bne.n	800609e <LL_RCC_LSE_IsReady+0x16>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <LL_RCC_LSE_IsReady+0x18>
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000

080060b0 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d101      	bne.n	80060c4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40021000 	.word	0x40021000

080060d4 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <LL_RCC_MSI_GetRange+0x18>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000

080060f0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80060f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80060fe:	4618      	mov	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40021000 	.word	0x40021000

0800610c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <LL_RCC_GetSysClkSource+0x18>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 030c 	and.w	r3, r3, #12
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000

08006128 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <LL_RCC_GetAHBPrescaler+0x18>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000

08006144 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <LL_RCC_GetAPB1Prescaler+0x18>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000

08006160 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <LL_RCC_GetLPUARTClockSource+0x20>)
 800616a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4013      	ands	r3, r2
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000

08006184 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <LL_RCC_PLL_GetMainSource+0x18>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0303 	and.w	r3, r3, #3
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000

080061a0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <LL_RCC_PLL_GetN+0x18>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40021000 	.word	0x40021000

080061bc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <LL_RCC_PLL_GetR+0x18>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000

080061d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <LL_RCC_PLL_GetDivider+0x18>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40021000 	.word	0x40021000

080061f4 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff ffad 	bl	8006160 <LL_RCC_GetLPUARTClockSource>
 8006206:	4603      	mov	r3, r0
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620c:	d00c      	beq.n	8006228 <LL_RCC_GetLPUARTClockFreq+0x34>
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006212:	d802      	bhi.n	800621a <LL_RCC_GetLPUARTClockFreq+0x26>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01c      	beq.n	8006252 <LL_RCC_GetLPUARTClockFreq+0x5e>
    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
      break;

    default:
      break;
 8006218:	e02a      	b.n	8006270 <LL_RCC_GetLPUARTClockFreq+0x7c>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d007      	beq.n	8006230 <LL_RCC_GetLPUARTClockFreq+0x3c>
 8006220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006224:	d00c      	beq.n	8006240 <LL_RCC_GetLPUARTClockFreq+0x4c>
      break;
 8006226:	e023      	b.n	8006270 <LL_RCC_GetLPUARTClockFreq+0x7c>
      lpuart_frequency = RCC_GetSystemClockFreq();
 8006228:	f000 f82a 	bl	8006280 <RCC_GetSystemClockFreq>
 800622c:	60f8      	str	r0, [r7, #12]
      break;
 800622e:	e01f      	b.n	8006270 <LL_RCC_GetLPUARTClockFreq+0x7c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8006230:	f7ff ff16 	bl	8006060 <LL_RCC_HSI_IsReady>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <LL_RCC_GetLPUARTClockFreq+0x76>
        lpuart_frequency = HSI_VALUE;
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <LL_RCC_GetLPUARTClockFreq+0x88>)
 800623c:	60fb      	str	r3, [r7, #12]
      break;
 800623e:	e014      	b.n	800626a <LL_RCC_GetLPUARTClockFreq+0x76>
      if (LL_RCC_LSE_IsReady() != 0U)
 8006240:	f7ff ff22 	bl	8006088 <LL_RCC_LSE_IsReady>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <LL_RCC_GetLPUARTClockFreq+0x7a>
        lpuart_frequency = LSE_VALUE;
 800624a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624e:	60fb      	str	r3, [r7, #12]
      break;
 8006250:	e00d      	b.n	800626e <LL_RCC_GetLPUARTClockFreq+0x7a>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006252:	f000 f815 	bl	8006280 <RCC_GetSystemClockFreq>
 8006256:	4603      	mov	r3, r0
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f8a1 	bl	80063a0 <RCC_GetHCLKClockFreq>
 800625e:	4603      	mov	r3, r0
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f8b3 	bl	80063cc <RCC_GetPCLK1ClockFreq>
 8006266:	60f8      	str	r0, [r7, #12]
      break;
 8006268:	e002      	b.n	8006270 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 800626e:	bf00      	nop
  }

  return lpuart_frequency;
 8006270:	68fb      	ldr	r3, [r7, #12]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	00f42400 	.word	0x00f42400

08006280 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006286:	f7ff ff41 	bl	800610c <LL_RCC_GetSysClkSource>
 800628a:	4603      	mov	r3, r0
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d851      	bhi.n	8006334 <RCC_GetSystemClockFreq+0xb4>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <RCC_GetSystemClockFreq+0x18>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062cd 	.word	0x080062cd
 800629c:	08006335 	.word	0x08006335
 80062a0:	08006335 	.word	0x08006335
 80062a4:	08006335 	.word	0x08006335
 80062a8:	08006321 	.word	0x08006321
 80062ac:	08006335 	.word	0x08006335
 80062b0:	08006335 	.word	0x08006335
 80062b4:	08006335 	.word	0x08006335
 80062b8:	08006327 	.word	0x08006327
 80062bc:	08006335 	.word	0x08006335
 80062c0:	08006335 	.word	0x08006335
 80062c4:	08006335 	.word	0x08006335
 80062c8:	0800632d 	.word	0x0800632d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80062cc:	f7ff fef0 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d111      	bne.n	80062fa <RCC_GetSystemClockFreq+0x7a>
 80062d6:	f7ff feeb 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <RCC_GetSystemClockFreq+0x6a>
 80062e0:	f7ff fef8 	bl	80060d4 <LL_RCC_MSI_GetRange>
 80062e4:	4603      	mov	r3, r0
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	e003      	b.n	80062f2 <RCC_GetSystemClockFreq+0x72>
 80062ea:	f7ff ff01 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80062ee:	4603      	mov	r3, r0
 80062f0:	0a1b      	lsrs	r3, r3, #8
 80062f2:	4a28      	ldr	r2, [pc, #160]	; (8006394 <RCC_GetSystemClockFreq+0x114>)
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	e010      	b.n	800631c <RCC_GetSystemClockFreq+0x9c>
 80062fa:	f7ff fed9 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <RCC_GetSystemClockFreq+0x8e>
 8006304:	f7ff fee6 	bl	80060d4 <LL_RCC_MSI_GetRange>
 8006308:	4603      	mov	r3, r0
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	e003      	b.n	8006316 <RCC_GetSystemClockFreq+0x96>
 800630e:	f7ff feef 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006312:	4603      	mov	r3, r0
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <RCC_GetSystemClockFreq+0x114>)
 8006318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800631e:	e033      	b.n	8006388 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006320:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <RCC_GetSystemClockFreq+0x118>)
 8006322:	607b      	str	r3, [r7, #4]
      break;
 8006324:	e030      	b.n	8006388 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006326:	4b1d      	ldr	r3, [pc, #116]	; (800639c <RCC_GetSystemClockFreq+0x11c>)
 8006328:	607b      	str	r3, [r7, #4]
      break;
 800632a:	e02d      	b.n	8006388 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800632c:	f000 f862 	bl	80063f4 <RCC_PLL_GetFreqDomain_SYS>
 8006330:	6078      	str	r0, [r7, #4]
      break;
 8006332:	e029      	b.n	8006388 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006334:	f7ff febc 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d111      	bne.n	8006362 <RCC_GetSystemClockFreq+0xe2>
 800633e:	f7ff feb7 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <RCC_GetSystemClockFreq+0xd2>
 8006348:	f7ff fec4 	bl	80060d4 <LL_RCC_MSI_GetRange>
 800634c:	4603      	mov	r3, r0
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	e003      	b.n	800635a <RCC_GetSystemClockFreq+0xda>
 8006352:	f7ff fecd 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006356:	4603      	mov	r3, r0
 8006358:	0a1b      	lsrs	r3, r3, #8
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <RCC_GetSystemClockFreq+0x114>)
 800635c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006360:	e010      	b.n	8006384 <RCC_GetSystemClockFreq+0x104>
 8006362:	f7ff fea5 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <RCC_GetSystemClockFreq+0xf6>
 800636c:	f7ff feb2 	bl	80060d4 <LL_RCC_MSI_GetRange>
 8006370:	4603      	mov	r3, r0
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	e003      	b.n	800637e <RCC_GetSystemClockFreq+0xfe>
 8006376:	f7ff febb 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 800637a:	4603      	mov	r3, r0
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	4a05      	ldr	r2, [pc, #20]	; (8006394 <RCC_GetSystemClockFreq+0x114>)
 8006380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006384:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006386:	bf00      	nop
  }

  return frequency;
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	0800662c 	.word	0x0800662c
 8006398:	00f42400 	.word	0x00f42400
 800639c:	007a1200 	.word	0x007a1200

080063a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80063a8:	f7ff febe 	bl	8006128 <LL_RCC_GetAHBPrescaler>
 80063ac:	4603      	mov	r3, r0
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <RCC_GetHCLKClockFreq+0x28>)
 80063b6:	5cd3      	ldrb	r3, [r2, r3]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	40d3      	lsrs	r3, r2
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08006614 	.word	0x08006614

080063cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80063d4:	f7ff feb6 	bl	8006144 <LL_RCC_GetAPB1Prescaler>
 80063d8:	4603      	mov	r3, r0
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	40d3      	lsrs	r3, r2
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	08006624 	.word	0x08006624

080063f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80063fa:	f7ff fec3 	bl	8006184 <LL_RCC_PLL_GetMainSource>
 80063fe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d02d      	beq.n	8006462 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8006406:	2b03      	cmp	r3, #3
 8006408:	d02e      	beq.n	8006468 <RCC_PLL_GetFreqDomain_SYS+0x74>
 800640a:	2b01      	cmp	r3, #1
 800640c:	d12f      	bne.n	800646e <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800640e:	f7ff fe4f 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d111      	bne.n	800643c <RCC_PLL_GetFreqDomain_SYS+0x48>
 8006418:	f7ff fe4a 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <RCC_PLL_GetFreqDomain_SYS+0x38>
 8006422:	f7ff fe57 	bl	80060d4 <LL_RCC_MSI_GetRange>
 8006426:	4603      	mov	r3, r0
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	e003      	b.n	8006434 <RCC_PLL_GetFreqDomain_SYS+0x40>
 800642c:	f7ff fe60 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006430:	4603      	mov	r3, r0
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	4a2f      	ldr	r2, [pc, #188]	; (80064f4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8006436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643a:	e010      	b.n	800645e <RCC_PLL_GetFreqDomain_SYS+0x6a>
 800643c:	f7ff fe38 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8006446:	f7ff fe45 	bl	80060d4 <LL_RCC_MSI_GetRange>
 800644a:	4603      	mov	r3, r0
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	e003      	b.n	8006458 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8006450:	f7ff fe4e 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006454:	4603      	mov	r3, r0
 8006456:	091b      	lsrs	r3, r3, #4
 8006458:	4a26      	ldr	r2, [pc, #152]	; (80064f4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800645a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006460:	e02f      	b.n	80064c2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006462:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8006464:	607b      	str	r3, [r7, #4]
      break;
 8006466:	e02c      	b.n	80064c2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006468:	4b24      	ldr	r3, [pc, #144]	; (80064fc <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800646a:	607b      	str	r3, [r7, #4]
      break;
 800646c:	e029      	b.n	80064c2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800646e:	f7ff fe1f 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d111      	bne.n	800649c <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8006478:	f7ff fe1a 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <RCC_PLL_GetFreqDomain_SYS+0x98>
 8006482:	f7ff fe27 	bl	80060d4 <LL_RCC_MSI_GetRange>
 8006486:	4603      	mov	r3, r0
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	e003      	b.n	8006494 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 800648c:	f7ff fe30 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006490:	4603      	mov	r3, r0
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8006496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649a:	e010      	b.n	80064be <RCC_PLL_GetFreqDomain_SYS+0xca>
 800649c:	f7ff fe08 	bl	80060b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80064a6:	f7ff fe15 	bl	80060d4 <LL_RCC_MSI_GetRange>
 80064aa:	4603      	mov	r3, r0
 80064ac:	091b      	lsrs	r3, r3, #4
 80064ae:	e003      	b.n	80064b8 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80064b0:	f7ff fe1e 	bl	80060f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80064b4:	4603      	mov	r3, r0
 80064b6:	091b      	lsrs	r3, r3, #4
 80064b8:	4a0e      	ldr	r2, [pc, #56]	; (80064f4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80064ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064be:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80064c0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80064c2:	f7ff fe89 	bl	80061d8 <LL_RCC_PLL_GetDivider>
 80064c6:	4603      	mov	r3, r0
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	3301      	adds	r3, #1
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	fbb2 f4f3 	udiv	r4, r2, r3
 80064d2:	f7ff fe65 	bl	80061a0 <LL_RCC_PLL_GetN>
 80064d6:	4603      	mov	r3, r0
 80064d8:	fb03 f404 	mul.w	r4, r3, r4
 80064dc:	f7ff fe6e 	bl	80061bc <LL_RCC_PLL_GetR>
 80064e0:	4603      	mov	r3, r0
 80064e2:	0e5b      	lsrs	r3, r3, #25
 80064e4:	3301      	adds	r3, #1
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd90      	pop	{r4, r7, pc}
 80064f4:	0800662c 	.word	0x0800662c
 80064f8:	00f42400 	.word	0x00f42400
 80064fc:	007a1200 	.word	0x007a1200

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4e0d      	ldr	r6, [pc, #52]	; (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	; (800653c <__libc_init_array+0x3c>)
 8006506:	1ba4      	subs	r4, r4, r6
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2500      	movs	r5, #0
 800650c:	42a5      	cmp	r5, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4e0b      	ldr	r6, [pc, #44]	; (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	; (8006544 <__libc_init_array+0x44>)
 8006514:	f000 f820 	bl	8006558 <_init>
 8006518:	1ba4      	subs	r4, r4, r6
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2500      	movs	r5, #0
 800651e:	42a5      	cmp	r5, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006528:	4798      	blx	r3
 800652a:	3501      	adds	r5, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006532:	4798      	blx	r3
 8006534:	3501      	adds	r5, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	0800667c 	.word	0x0800667c
 800653c:	0800667c 	.word	0x0800667c
 8006540:	0800667c 	.word	0x0800667c
 8006544:	08006680 	.word	0x08006680

08006548 <memset>:
 8006548:	4402      	add	r2, r0
 800654a:	4603      	mov	r3, r0
 800654c:	4293      	cmp	r3, r2
 800654e:	d100      	bne.n	8006552 <memset+0xa>
 8006550:	4770      	bx	lr
 8006552:	f803 1b01 	strb.w	r1, [r3], #1
 8006556:	e7f9      	b.n	800654c <memset+0x4>

08006558 <_init>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr

08006564 <_fini>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr
